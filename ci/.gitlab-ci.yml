stages:
  - compile
  - test
  #  - sanitizer TODO
  - coverage
  - static-test
  - docs


image: $CI_REGISTRY/maierhofer/environment-model/ci:0.5.0

.python-prepare: &python-prepare
  - source activate commonroad
  - pip install tox coverage
  - pip install -r ./requirements.txt
  - pip install -r ./test_requirements.txt

### static test ###
clang-format:
  stage: static-test
  script:
    bash ./ci/clang-format.sh
  dependencies: []

clang-tidy:
  stage: static-test
  script:
    # run CMake in order to get compile_commands.json
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  ..
    - cd ..
    - bash ./ci/clang-tidy.sh
  dependencies: []

cppcheck:
  stage: static-test
  script:
    # run CMake in order to get compile_commands.json
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  ..
    - cd ..
    - cppcheck --project=build/compile_commands.json -i"$(pwd)/external" -i"$(pwd)/src/commonroad_cpp/interfaces/commonroad/pugi_xml/pugixml.cpp"
  dependencies: []

### build project ###
build-clang:
  stage: compile
  script:
    - export CC=clang
    - export CXX=clang++
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4

build-gcc:
  stage: compile
  script:
    - export CC=gcc
    - export CXX=g++
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4

build-standalone:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model_example_node -j4

build-test:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug ..
    - make env_model_test -j4
  artifacts:
    paths:
      - build/env_model_test
      - build/libenv_model.so
    expire_in: 20 minutes

build-run-coverage:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON -DCMAKE_CXX_FLAGS=--coverage ..
    - make env_model_coverage -j4
  artifacts:
    paths:
      - ./build/
    expire_in: 20 minutes


### tests ###
test:
  stage: test
  script:
    - build/env_model_test --gtest_output="xml:report.xml"
  dependencies:
    - build-test
  artifacts:
    reports:
      junit: ./report.xml

test-python:
  stage: test
  before_script:
    - *python-prepare
  script:
    - python setup.py develop --cmake-prefix /commonroad/dist
    - python -m pytest tests/python
  dependencies:
    - build-test
  allow_failure: true

### coverage ###
coverage-analyze:
  stage: coverage
  script:
    - gcovr --version
    - gcovr
      -f src/
      -e src/commonroad_cpp/interfaces/commonroad/pugi_xml
      -e src/commonroad_cpp/interfaces/standalone/main.cpp
      -e src/commonroad_cpp/interfaces/pybind/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.xml
      --xml
  dependencies:
    - build-run-coverage
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    reports:
      cobertura: coverage.xml

coverage-report:
  stage: coverage
  script:
    - gcovr --version
    - gcovr
      -f src/
      -e src/commonroad_cpp/interfaces/commonroad/pugi_xml
      -e src/commonroad_cpp/interfaces/standalone/main.cpp
      -e src/commonroad_cpp/interfaces/pybind/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.html
      --html
      --html-details
    - mkdir coverage
    - mv coverage*.html coverage
  dependencies:
    - build-run-coverage
  artifacts:
    paths:
      - coverage
    expose_as: 'Coverage Report'
    expire_in: 20 minutes

### create documentation ###
docs:
  stage: docs
  script:
    - mkdir -p build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOXYGEN=ON  ..
    - make doc_doxygen ..
  dependencies: []
  artifacts:
    paths:
      - build/doc_doxygen/html/
    expose_as: 'Doxygen Documentation'
    expire_in: 20 minutes
