stages:
  - compile
  - python
  - test
  - static-test
  - docs
  - publish

image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci-lite:1.0

before_script:
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"

### static test ###
clang-format:
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci:1.4
  stage: static-test
  script: ./ci/clang-format.sh
  needs: []

clang-tidy:
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci:1.4
  stage: static-test
  script: ./ci/clang-tidy.sh
  needs:
    - job: build-compile-commands
      artifacts: true

cppcheck:
  stage: static-test
  script:
    cppcheck
    --project=build/compile_commands.json
    -i"$(pwd)/external"
  needs:
    - job: build-compile-commands
      artifacts: true

### build project ###
build-compile-commands:
  stage: compile
  script:
    # run CMake in order to get compile_commands.json
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  ..
    - cd ..
  needs: []
  artifacts:
    paths:
      - ./build/compile_commands.json
    expire_in: 20 minutes

build-clang:
  stage: compile
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release --target env_model
  needs: []

build-gcc:
  stage: compile
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release --target env_model
  needs: []

build-standalone:
  stage: compile
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release --target env_model_example_node
  needs: []

build-test:
  stage: compile
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Debug --target env_model_test
  needs: []
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

build-coverage:
  stage: compile
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DENV_MODEL_BUILD_CODE_COVERAGE=ON
    - cmake --build build --config Debug --target env_model_test
  needs: []
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

build-sdist:
  stage: python
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  script:
    - python3 --version
    - git describe
    - python3 -m build --sdist
  needs: []
  variables:
    # Necessary so that Git detects all tags
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    GIT_FETCH_EXTRA_FLAGS: --tags
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 30 minutes

build-wheel:
  stage: python
  # Use the privileged runner as required for Docker-in-Docker (dind)
  tags:
    - wheel
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:20.10-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    CIBW_BEFORE_ALL: "git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/\".insteadOf \"git@gitlab.lrz.de:\""
    # NOTE: The following variables correspond to the default values.
    # They are specified here so that it is possible to override them using
    # Gitlab push options or in the UI when running a manual pipeline.
    #
    # For example, use git push -o ci.variable="CIBW_BUILD_VERBOSITY=1"
    # to make cibuildwheel verbose in the pipeline created for the pushed commit.
    CIBW_BUILD_VERBOSITY: 0
    CIBW_TEST_SKIP: "*i686 *-musllinux*"
    CIBW_BUILD: "*"
  script:
    - cibuildwheel dist/*.tar.gz
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 30 minutes

upload-wheel:
  stage: python
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_REPOSITORY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
  script:
    - twine upload dist/*.tar.gz wheelhouse/*.whl
  needs:
    - job: build-sdist
      artifacts: true
    - job: build-wheel
      artifacts: true

### tests ###
test:
  stage: test
  script:
    - build/Debug/env_model_test
    - cmake --build build --config Debug --target test
  needs:
    - job: build-test
      artifacts: true
  artifacts:
    # Upload reports even if tests fail
    when: always
    reports:
      junit: build/test-reports/*.xml
    expire_in: 30 minutes

run-coverage:
  stage: test
  script:
    - cmake --build build --config Debug --target env_model_coverage
    - gcovr --version
    - gcovr
      -f src/
      -e build/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.xml
      --xml
    - mv build/env_model_coverage coverage-report
  needs:
    - job: build-coverage
      artifacts: true
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage-report
    expose_as: 'Coverage Report'
    expire_in: 30 minutes
    reports:
      coverage_report:
          coverage_format: cobertura
          path: coverage.xml

test-python-manylinux:
  image: python:${JOB_PYTHON_VERSION}-slim-bullseye
  stage: test
  before_script:
    - ls -l wheelhouse
    - pip install --no-index --find-links=wheelhouse/ commonroad_cpp
    - pip install -r test_requirements.txt
  script:
    - python -m pytest tests/python
    - python ./example.py
  needs:
    - job: build-wheel
      artifacts: true
  parallel:
    matrix:
      - JOB_PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10", "3.11"]

test-python-musllinux:
  image: python:${JOB_PYTHON_VERSION}-alpine
  stage: test
  allow_failure: true
  before_script:
    # No wheels available for NumPy on Alpine, so use the system version and only install pytest
    - apk --update --no-cache add python3-dev build-base gfortran openblas openblas-dev py3-wheel py3-pillow jpeg-dev freetype-dev
    - printf "[libs]\nsystem_freetype = true\n" > mplsetup.cfg
    - pip install numpy>=1.20.0 pytest~=7.2.0 commonroad-io>=2021.4
    - ls -l wheelhouse
    - pip install --no-index --find-links=wheelhouse/ commonroad_cpp
  script:
    - python -m pytest tests/python
    - python ./example.py
  needs:
    - job: build-wheel
      artifacts: true
  parallel:
    matrix:
      - JOB_PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10", "3.11"]

### create documentation ###
docs:
  stage: docs
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DENV_MODEL_BUILD_DOXYGEN=ON
    - cmake --build build --config Debug --target doc_doxygen
  needs: []
  artifacts:
    paths:
      - build/doc_doxygen/html/
    expose_as: 'Doxygen Documentation'
    expire_in: 30 minutes

pages:
  stage: publish
  script:
    - mv build/doc_doxygen/html public
  needs:
    - job: docs
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 20 minutes
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
