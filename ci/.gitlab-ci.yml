stages:
  - compile
  - test
  - coverage
  - static-test
  - docs
  - publish

image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci:1.4

before_script:
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"

.python-prepare: &python-prepare
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"
  - pip install -r ./requirements.txt
  - pip install -r ./test_requirements.txt

.copy-cpp-dist: &copy-cpp-dist
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"
  - mv ./dist/include/ /commonroad/dist/

### static test ###
clang-format:
  stage: static-test
  script: ./ci/clang-format.sh
  needs: []

clang-tidy:
  stage: static-test
  script: ./ci/clang-tidy.sh
  needs:
    - job: build-compile-commands
      artifacts: true

cppcheck:
  stage: static-test
  script:
    cppcheck
    --project=build/compile_commands.json
    -i"$(pwd)/external"
  needs:
    - job: build-compile-commands
      artifacts: true

### build project ###
build-compile-commands:
  stage: compile
  script:
    # run CMake in order to get compile_commands.json
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  ..
    - cd ..
  needs: []
  artifacts:
    paths:
      - ./build/compile_commands.json
    expire_in: 20 minutes

build-clang:
  stage: compile
  script:
    - export CC=clang
    - export CXX=clang++
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DENVMODEL_BUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4
  needs: []

build-gcc:
  stage: compile
  script:
    - export CC=gcc
    - export CXX=g++
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DENVMODEL_BUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release ..
    - make env_model -j4
  needs: []

build-standalone:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Release ..
    - make env_model_example_node -j4
  needs: []

build-test:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug ..
    - make env_model_test -j4
  needs: []
  artifacts:
    paths:
      - ./build/
      - ./dist/
    expire_in: 30 minutes

build-run-coverage:
  stage: compile
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DENV_MODEL_BUILD_CODE_COVERAGE=ON -DCMAKE_CXX_FLAGS=--coverage ..
    - make env_model_coverage -j4
  after_script:
    - mv /commonroad/dist/ ./
  needs: []
  artifacts:
    paths:
      - ./build/
      - ./dist/
    expire_in: 30 minutes


### tests ###
test:
  stage: test
  script:
    - build/env_model_test --gtest_output="xml:report.xml"
  needs:
    - job: build-test
      artifacts: true
  artifacts:
    reports:
      junit: ./report.xml

#build-test-python-37:
#  stage: test
#  before_script:
#    - source activate cr37
#    - *python-prepare
#  script:
#    - python setup.py install
#    - python -m pytest tests/python
#  needs: []
#
#build-test-python-38:
#  stage: test
#  before_script:
#    - source activate cr38
#    - *python-prepare
#  script:
#    - python setup.py install
#    - python -m pytest tests/python
#  needs: []
#
#build-test-python-39:
#  stage: test
#  before_script:
#    - source activate cr39
#    - *python-prepare
#  script:
#    - python setup.py install
#    - python -m pytest tests/python
#  needs: []

### coverage ###
coverage-analyze:
  stage: coverage
  before_script:
    - *copy-cpp-dist
  script:
    - gcovr --version
    - gcovr
      -f src/
      -e src/commonroad_cpp/interfaces/standalone/main.cpp
      -e src/commonroad_cpp/interfaces/commonroad/protobufFormat
      -e src/commonroad_cpp/geometry/shape.h
      -e src/commonroad_cpp/interfaces/pybind/
      -e /commonroad/dist/include/yaml-cpp/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.xml
      --xml
  needs:
    - job: build-run-coverage
      artifacts: true
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: coverage.xml

coverage-report:
  stage: coverage
  before_script:
    - *copy-cpp-dist
  script:
    - gcovr --version
    - gcovr
      -f src/
      -e src/commonroad_cpp/interfaces/standalone/main.cpp
      -e src/commonroad_cpp/interfaces/commonroad/protobufFormat
      -e src/commonroad_cpp/geometry/shape.h
      -e src/commonroad_cpp/interfaces/pybind/
      -e /commonroad/dist/include/yaml-cpp/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.html
      --html
      --html-details
    - mkdir coverage
    - mv coverage*.html coverage
  needs:
    - job: build-run-coverage
      artifacts: true
  artifacts:
    paths:
      - coverage
    expose_as: 'Coverage Report'
    expire_in: 30 minutes

### create documentation ###
docs:
  stage: docs
  script:
    - mkdir -p build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DENV_MODEL_BUILD_DOXYGEN=ON  ..
    - make doc_doxygen ..
  dependencies: []
  artifacts:
    paths:
      - build/doc_doxygen/html/
    expose_as: 'Doxygen Documentation'
    expire_in: 30 minutes

pages:
  stage: publish
  script:
    - mv build/doc_doxygen/html public
  needs:
    - job: docs
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 20 minutes
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
