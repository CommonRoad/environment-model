stages:
  - compile
  - python
  - test
  - static-test
  - publish

image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci-lite:1.0

before_script:
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de".insteadOf "ssh://git@gitlab.lrz.de"

### static test ###
clang-format:
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci:1.4
  stage: static-test
  script: ./ci/clang-format.sh
  needs: []

clang-tidy:
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/ci:1.4
  stage: static-test
  script: ./ci/clang-tidy.sh
  needs:
    - job: build-compile-commands
      artifacts: true

cppcheck:
  stage: static-test
  script:
    cppcheck
    --project=build/compile_commands.json
    -i"$(pwd)/external"
  needs:
    - job: build-compile-commands
      artifacts: true

pre_commit:
  image: python:3.11
  stage: static-test
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files --show-diff-on-failure
  needs: []

.cache-build-dir:
  cache: &cache_dependency_archives
    key: cache-dependency-archives
    paths:
      - build/_deps/*-subbuild/*-populate-prefix/src/*.{tar*,zip}
    policy: pull

generate-cache:
  stage: compile
  cache:
    <<: *cache_dependency_archives
    policy: push
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DFETCHCONTENT_QUIET:BOOL=OFF
  needs: []

### build project ###
build-compile-commands:
  stage: compile
  script:
    # run CMake in order to get compile_commands.json
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/commonroad/dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  ..
    - cd ..
  needs: []
  artifacts:
    paths:
      - ./build/compile_commands.json
    expire_in: 20 minutes

build-clang:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release
  needs: []

build-gcc:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release
  needs: []

build-standalone:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release --target env_model_example_node
  needs: []

build-test:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config RelWithDebInfo --target env_model_test
  needs: []
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

build-coverage:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DENV_MODEL_BUILD_CODE_COVERAGE=ON
    - cmake --build build --config RelWithDebInfo --target env_model_test
  needs: []
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

build-sdist:
  stage: python
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  script:
    - python3 --version
    - git describe
    - python3 -m build --sdist
  needs: []
  variables:
    # Necessary so that Git detects all tags
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    GIT_FETCH_EXTRA_FLAGS: --tags
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 60 minutes

.common-rules:
  rules:
    # Rule to disable a job for merge request pipelines (imitate default job behaviour)
    - &skip_merge_request_pipeline
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: &full_wheel_build_condition $CI_COMMIT_TAG || $CI_COMMIT_REF_PROTECTED == "true" || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^(master|develop)$/

build-wheel:
  stage: python
  # Use the privileged runner as required for Docker-in-Docker (dind)
  tags:
    - dind
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:20.10-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    CIBW_BEFORE_ALL: "git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de//\".insteadOf \"git@gitlab.lrz.de:\" && git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/\".insteadOf \"ssh://git@gitlab.lrz.de\""
    CIBW_BUILD_VERBOSITY: 1
    CIBW_TEST_SKIP: "*i686 *-musllinux*"
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - cibuildwheel dist/*.tar.gz
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 360 minutes
  rules:
    - *skip_merge_request_pipeline
    - if: *full_wheel_build_condition
      variables:
        CIBW_BUILD: "*"
    - when: on_success
      variables:
        CIBW_BUILD: "cp310-manylinux_x86_64"

upload-wheel:
  stage: publish
  only:
  - develop
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_REPOSITORY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    UPLOAD_WHEELS: "0"
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - twine upload dist/*.tar.gz wheelhouse/*.whl
  needs:
    - job: build-sdist
      artifacts: true
    - job: build-wheel
      artifacts: true

### tests ###
test:
  stage: test
  script:
    - cmake --build build --config RelWithDebInfo --target test
  needs:
    - job: build-test
      artifacts: true
  artifacts:
    # Upload reports even if tests fail
    when: always
    reports:
      junit: build/test-reports/*.xml
    expire_in: 30 minutes

run-coverage:
  stage: test
  script:
    - cmake --build build --config RelWithDebInfo --target env_model_coverage
    - gcovr --version
    - gcovr
      -f src/
      -e build/
      --print-summary
      --exclude-unreachable-branches
      --output coverage.xml
      --xml
    - mv build/env_model_coverage coverage-report
  needs:
    - job: build-coverage
      artifacts: true
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage-report
    expose_as: 'Coverage Report'
    expire_in: 30 minutes
    reports:
      coverage_report:
          coverage_format: cobertura
          path: coverage.xml

.install-python-venv: &install-python-venv
    - apt-get update && apt-get install -y --no-install-recommends git python3-venv python3-pip
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de".insteadOf "ssh://git@gitlab.lrz.de"
    - python3 -m pip config set global.disable-pip-version-check true
    - python3 -m venv test-venv
    - source test-venv/bin/activate
    - python3 -m pip install pip-tools

.test-python-common: &test-python-common
  stage: test
  image: python:${JOB_PYTHON_VERSION}-slim-bullseye
  before_script:
    - *install-python-venv
    - SETUPTOOLS_SCM_PRETEND_VERSION_FOR_COMMONROAD_CPP=1
    - python -m pip install --find-links=wheelhouse/ commonroad_cpp[test]
  script:
    - python -m pytest --junit-xml=pytest-report.xml tests/python
  needs:
    - job: build-wheel
      artifacts: true
  artifacts:
    reports:
      junit: pytest-report.xml
    expire_in: 30 minutes

.test-python-single: &test-python-single
  variables:
    JOB_PYTHON_VERSION: "3.10"
  rules:
    - *skip_merge_request_pipeline
    - if: *full_wheel_build_condition
      when: never
    - when: on_success

.test-python-matrix: &test-python-matrix
  parallel:
    matrix:
      - JOB_PYTHON_VERSION: ["3.9", "3.10", "3.11"]
  rules:
    - *skip_merge_request_pipeline
    - if: *full_wheel_build_condition
      when: on_success
    - when: never

test-python-manylinux-single:
  <<: [ *test-python-common, *test-python-single ]
  variables:
    JOB_PYTHON_VERSION: "3.10"

test-python-manylinux:
  <<: [ *test-python-common, *test-python-matrix ]


pages:
  stage: publish
  when: manual
  publish: site
  script:
    - *install-python-venv
    - pip install ".[docs]"
    - mkdocs build
  artifacts:
    paths:
      - site
  environment:
    name: Gitlab Pages
    url: https://cps.pages.gitlab.lrz.de/commonroad/environment-model/
  needs: []

build_pages:
  stage: publish
  script:
    - *install-python-venv
    - pip install ".[docs]"
    - mkdocs build
  artifacts:
    paths:
      - site
  needs: []
