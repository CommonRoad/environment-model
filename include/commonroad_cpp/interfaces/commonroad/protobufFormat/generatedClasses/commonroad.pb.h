// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonroad.proto

#ifndef PROTOBUF_INCLUDED_commonroad_2eproto
#define PROTOBUF_INCLUDED_commonroad_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
#include "scenario_tags.pb.h"
#include "location.pb.h"
#include "lanelet.pb.h"
#include "traffic_sign.pb.h"
#include "traffic_light.pb.h"
#include "intersection.pb.h"
#include "static_obstacle.pb.h"
#include "dynamic_obstacle.pb.h"
#include "environment_obstacle.pb.h"
#include "phantom_obstacle.pb.h"
#include "planning_problem.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_commonroad_2eproto 

namespace protobuf_commonroad_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_commonroad_2eproto
namespace commonroad {
class CommonRoad;
class CommonRoadDefaultTypeInternal;
extern CommonRoadDefaultTypeInternal _CommonRoad_default_instance_;
class ScenarioInformation;
class ScenarioInformationDefaultTypeInternal;
extern ScenarioInformationDefaultTypeInternal _ScenarioInformation_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::CommonRoad* Arena::CreateMaybeMessage<::commonroad::CommonRoad>(Arena*);
template<> ::commonroad::ScenarioInformation* Arena::CreateMaybeMessage<::commonroad::ScenarioInformation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

// ===================================================================

class ScenarioInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.ScenarioInformation) */ {
 public:
  ScenarioInformation();
  virtual ~ScenarioInformation();

  ScenarioInformation(const ScenarioInformation& from);

  inline ScenarioInformation& operator=(const ScenarioInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenarioInformation(ScenarioInformation&& from) noexcept
    : ScenarioInformation() {
    *this = ::std::move(from);
  }

  inline ScenarioInformation& operator=(ScenarioInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenarioInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioInformation* internal_default_instance() {
    return reinterpret_cast<const ScenarioInformation*>(
               &_ScenarioInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScenarioInformation* other);
  friend void swap(ScenarioInformation& a, ScenarioInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenarioInformation* New() const final {
    return CreateMaybeMessage<ScenarioInformation>(NULL);
  }

  ScenarioInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScenarioInformation& from);
  void MergeFrom(const ScenarioInformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string common_road_version = 1;
  bool has_common_road_version() const;
  void clear_common_road_version();
  static const int kCommonRoadVersionFieldNumber = 1;
  const ::std::string& common_road_version() const;
  void set_common_road_version(const ::std::string& value);
  #if LANG_CXX11
  void set_common_road_version(::std::string&& value);
  #endif
  void set_common_road_version(const char* value);
  void set_common_road_version(const char* value, size_t size);
  ::std::string* mutable_common_road_version();
  ::std::string* release_common_road_version();
  void set_allocated_common_road_version(::std::string* common_road_version);

  // required string benchmark_id = 2;
  bool has_benchmark_id() const;
  void clear_benchmark_id();
  static const int kBenchmarkIdFieldNumber = 2;
  const ::std::string& benchmark_id() const;
  void set_benchmark_id(const ::std::string& value);
  #if LANG_CXX11
  void set_benchmark_id(::std::string&& value);
  #endif
  void set_benchmark_id(const char* value);
  void set_benchmark_id(const char* value, size_t size);
  ::std::string* mutable_benchmark_id();
  ::std::string* release_benchmark_id();
  void set_allocated_benchmark_id(::std::string* benchmark_id);

  // required string author = 4;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 4;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // required string affiliation = 5;
  bool has_affiliation() const;
  void clear_affiliation();
  static const int kAffiliationFieldNumber = 5;
  const ::std::string& affiliation() const;
  void set_affiliation(const ::std::string& value);
  #if LANG_CXX11
  void set_affiliation(::std::string&& value);
  #endif
  void set_affiliation(const char* value);
  void set_affiliation(const char* value, size_t size);
  ::std::string* mutable_affiliation();
  ::std::string* release_affiliation();
  void set_allocated_affiliation(::std::string* affiliation);

  // required string source = 6;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 6;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // required .commonroad.TimeStamp date = 3;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 3;
  private:
  const ::commonroad::TimeStamp& _internal_date() const;
  public:
  const ::commonroad::TimeStamp& date() const;
  ::commonroad::TimeStamp* release_date();
  ::commonroad::TimeStamp* mutable_date();
  void set_allocated_date(::commonroad::TimeStamp* date);

  // required double time_step_size = 7;
  bool has_time_step_size() const;
  void clear_time_step_size();
  static const int kTimeStepSizeFieldNumber = 7;
  double time_step_size() const;
  void set_time_step_size(double value);

  // @@protoc_insertion_point(class_scope:commonroad.ScenarioInformation)
 private:
  void set_has_common_road_version();
  void clear_has_common_road_version();
  void set_has_benchmark_id();
  void clear_has_benchmark_id();
  void set_has_date();
  void clear_has_date();
  void set_has_author();
  void clear_has_author();
  void set_has_affiliation();
  void clear_has_affiliation();
  void set_has_source();
  void clear_has_source();
  void set_has_time_step_size();
  void clear_has_time_step_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr common_road_version_;
  ::google::protobuf::internal::ArenaStringPtr benchmark_id_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr affiliation_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::commonroad::TimeStamp* date_;
  double time_step_size_;
  friend struct ::protobuf_commonroad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonRoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.CommonRoad) */ {
 public:
  CommonRoad();
  virtual ~CommonRoad();

  CommonRoad(const CommonRoad& from);

  inline CommonRoad& operator=(const CommonRoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonRoad(CommonRoad&& from) noexcept
    : CommonRoad() {
    *this = ::std::move(from);
  }

  inline CommonRoad& operator=(CommonRoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonRoad* internal_default_instance() {
    return reinterpret_cast<const CommonRoad*>(
               &_CommonRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CommonRoad* other);
  friend void swap(CommonRoad& a, CommonRoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonRoad* New() const final {
    return CreateMaybeMessage<CommonRoad>(NULL);
  }

  CommonRoad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonRoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonRoad& from);
  void MergeFrom(const CommonRoad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.Lanelet lanelets = 4;
  int lanelets_size() const;
  void clear_lanelets();
  static const int kLaneletsFieldNumber = 4;
  ::commonroad::Lanelet* mutable_lanelets(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::Lanelet >*
      mutable_lanelets();
  const ::commonroad::Lanelet& lanelets(int index) const;
  ::commonroad::Lanelet* add_lanelets();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::Lanelet >&
      lanelets() const;

  // repeated .commonroad.TrafficSign traffic_signs = 5;
  int traffic_signs_size() const;
  void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 5;
  ::commonroad::TrafficSign* mutable_traffic_signs(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSign >*
      mutable_traffic_signs();
  const ::commonroad::TrafficSign& traffic_signs(int index) const;
  ::commonroad::TrafficSign* add_traffic_signs();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSign >&
      traffic_signs() const;

  // repeated .commonroad.TrafficLight traffic_lights = 6;
  int traffic_lights_size() const;
  void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 6;
  ::commonroad::TrafficLight* mutable_traffic_lights(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficLight >*
      mutable_traffic_lights();
  const ::commonroad::TrafficLight& traffic_lights(int index) const;
  ::commonroad::TrafficLight* add_traffic_lights();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficLight >&
      traffic_lights() const;

  // repeated .commonroad.Intersection intersections = 7;
  int intersections_size() const;
  void clear_intersections();
  static const int kIntersectionsFieldNumber = 7;
  ::commonroad::Intersection* mutable_intersections(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::Intersection >*
      mutable_intersections();
  const ::commonroad::Intersection& intersections(int index) const;
  ::commonroad::Intersection* add_intersections();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::Intersection >&
      intersections() const;

  // repeated .commonroad.StaticObstacle static_obstacles = 8;
  int static_obstacles_size() const;
  void clear_static_obstacles();
  static const int kStaticObstaclesFieldNumber = 8;
  ::commonroad::StaticObstacle* mutable_static_obstacles(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::StaticObstacle >*
      mutable_static_obstacles();
  const ::commonroad::StaticObstacle& static_obstacles(int index) const;
  ::commonroad::StaticObstacle* add_static_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::StaticObstacle >&
      static_obstacles() const;

  // repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
  int dynamic_obstacles_size() const;
  void clear_dynamic_obstacles();
  static const int kDynamicObstaclesFieldNumber = 9;
  ::commonroad::DynamicObstacle* mutable_dynamic_obstacles(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::DynamicObstacle >*
      mutable_dynamic_obstacles();
  const ::commonroad::DynamicObstacle& dynamic_obstacles(int index) const;
  ::commonroad::DynamicObstacle* add_dynamic_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::DynamicObstacle >&
      dynamic_obstacles() const;

  // repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
  int environment_obstacles_size() const;
  void clear_environment_obstacles();
  static const int kEnvironmentObstaclesFieldNumber = 10;
  ::commonroad::EnvironmentObstacle* mutable_environment_obstacles(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::EnvironmentObstacle >*
      mutable_environment_obstacles();
  const ::commonroad::EnvironmentObstacle& environment_obstacles(int index) const;
  ::commonroad::EnvironmentObstacle* add_environment_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::EnvironmentObstacle >&
      environment_obstacles() const;

  // repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
  int phantom_obstacles_size() const;
  void clear_phantom_obstacles();
  static const int kPhantomObstaclesFieldNumber = 11;
  ::commonroad::PhantomObstacle* mutable_phantom_obstacles(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::PhantomObstacle >*
      mutable_phantom_obstacles();
  const ::commonroad::PhantomObstacle& phantom_obstacles(int index) const;
  ::commonroad::PhantomObstacle* add_phantom_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::PhantomObstacle >&
      phantom_obstacles() const;

  // repeated .commonroad.PlanningProblem planning_problems = 12;
  int planning_problems_size() const;
  void clear_planning_problems();
  static const int kPlanningProblemsFieldNumber = 12;
  ::commonroad::PlanningProblem* mutable_planning_problems(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::PlanningProblem >*
      mutable_planning_problems();
  const ::commonroad::PlanningProblem& planning_problems(int index) const;
  ::commonroad::PlanningProblem* add_planning_problems();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::PlanningProblem >&
      planning_problems() const;

  // required .commonroad.ScenarioInformation information = 1;
  bool has_information() const;
  void clear_information();
  static const int kInformationFieldNumber = 1;
  private:
  const ::commonroad::ScenarioInformation& _internal_information() const;
  public:
  const ::commonroad::ScenarioInformation& information() const;
  ::commonroad::ScenarioInformation* release_information();
  ::commonroad::ScenarioInformation* mutable_information();
  void set_allocated_information(::commonroad::ScenarioInformation* information);

  // required .commonroad.ScenarioTags scenario_tags = 2;
  bool has_scenario_tags() const;
  void clear_scenario_tags();
  static const int kScenarioTagsFieldNumber = 2;
  private:
  const ::commonroad::ScenarioTags& _internal_scenario_tags() const;
  public:
  const ::commonroad::ScenarioTags& scenario_tags() const;
  ::commonroad::ScenarioTags* release_scenario_tags();
  ::commonroad::ScenarioTags* mutable_scenario_tags();
  void set_allocated_scenario_tags(::commonroad::ScenarioTags* scenario_tags);

  // required .commonroad.Location location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::commonroad::Location& _internal_location() const;
  public:
  const ::commonroad::Location& location() const;
  ::commonroad::Location* release_location();
  ::commonroad::Location* mutable_location();
  void set_allocated_location(::commonroad::Location* location);

  // @@protoc_insertion_point(class_scope:commonroad.CommonRoad)
 private:
  void set_has_information();
  void clear_has_information();
  void set_has_scenario_tags();
  void clear_has_scenario_tags();
  void set_has_location();
  void clear_has_location();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::Lanelet > lanelets_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSign > traffic_signs_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficLight > traffic_lights_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::Intersection > intersections_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::StaticObstacle > static_obstacles_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::DynamicObstacle > dynamic_obstacles_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::EnvironmentObstacle > environment_obstacles_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::PhantomObstacle > phantom_obstacles_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::PlanningProblem > planning_problems_;
  ::commonroad::ScenarioInformation* information_;
  ::commonroad::ScenarioTags* scenario_tags_;
  ::commonroad::Location* location_;
  friend struct ::protobuf_commonroad_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenarioInformation

// required string common_road_version = 1;
inline bool ScenarioInformation::has_common_road_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioInformation::set_has_common_road_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenarioInformation::clear_has_common_road_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenarioInformation::clear_common_road_version() {
  common_road_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_common_road_version();
}
inline const ::std::string& ScenarioInformation::common_road_version() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.common_road_version)
  return common_road_version_.GetNoArena();
}
inline void ScenarioInformation::set_common_road_version(const ::std::string& value) {
  set_has_common_road_version();
  common_road_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.common_road_version)
}
#if LANG_CXX11
inline void ScenarioInformation::set_common_road_version(::std::string&& value) {
  set_has_common_road_version();
  common_road_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonroad.ScenarioInformation.common_road_version)
}
#endif
inline void ScenarioInformation::set_common_road_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_common_road_version();
  common_road_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonroad.ScenarioInformation.common_road_version)
}
inline void ScenarioInformation::set_common_road_version(const char* value, size_t size) {
  set_has_common_road_version();
  common_road_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonroad.ScenarioInformation.common_road_version)
}
inline ::std::string* ScenarioInformation::mutable_common_road_version() {
  set_has_common_road_version();
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.common_road_version)
  return common_road_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioInformation::release_common_road_version() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.common_road_version)
  if (!has_common_road_version()) {
    return NULL;
  }
  clear_has_common_road_version();
  return common_road_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioInformation::set_allocated_common_road_version(::std::string* common_road_version) {
  if (common_road_version != NULL) {
    set_has_common_road_version();
  } else {
    clear_has_common_road_version();
  }
  common_road_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), common_road_version);
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.common_road_version)
}

// required string benchmark_id = 2;
inline bool ScenarioInformation::has_benchmark_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScenarioInformation::set_has_benchmark_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScenarioInformation::clear_has_benchmark_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScenarioInformation::clear_benchmark_id() {
  benchmark_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_benchmark_id();
}
inline const ::std::string& ScenarioInformation::benchmark_id() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.benchmark_id)
  return benchmark_id_.GetNoArena();
}
inline void ScenarioInformation::set_benchmark_id(const ::std::string& value) {
  set_has_benchmark_id();
  benchmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.benchmark_id)
}
#if LANG_CXX11
inline void ScenarioInformation::set_benchmark_id(::std::string&& value) {
  set_has_benchmark_id();
  benchmark_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonroad.ScenarioInformation.benchmark_id)
}
#endif
inline void ScenarioInformation::set_benchmark_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_benchmark_id();
  benchmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonroad.ScenarioInformation.benchmark_id)
}
inline void ScenarioInformation::set_benchmark_id(const char* value, size_t size) {
  set_has_benchmark_id();
  benchmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonroad.ScenarioInformation.benchmark_id)
}
inline ::std::string* ScenarioInformation::mutable_benchmark_id() {
  set_has_benchmark_id();
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.benchmark_id)
  return benchmark_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioInformation::release_benchmark_id() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.benchmark_id)
  if (!has_benchmark_id()) {
    return NULL;
  }
  clear_has_benchmark_id();
  return benchmark_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioInformation::set_allocated_benchmark_id(::std::string* benchmark_id) {
  if (benchmark_id != NULL) {
    set_has_benchmark_id();
  } else {
    clear_has_benchmark_id();
  }
  benchmark_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), benchmark_id);
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.benchmark_id)
}

// required .commonroad.TimeStamp date = 3;
inline bool ScenarioInformation::has_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScenarioInformation::set_has_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScenarioInformation::clear_has_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::commonroad::TimeStamp& ScenarioInformation::_internal_date() const {
  return *date_;
}
inline const ::commonroad::TimeStamp& ScenarioInformation::date() const {
  const ::commonroad::TimeStamp* p = date_;
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.date)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::TimeStamp*>(
      &::commonroad::_TimeStamp_default_instance_);
}
inline ::commonroad::TimeStamp* ScenarioInformation::release_date() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.date)
  clear_has_date();
  ::commonroad::TimeStamp* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::commonroad::TimeStamp* ScenarioInformation::mutable_date() {
  set_has_date();
  if (date_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::TimeStamp>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.date)
  return date_;
}
inline void ScenarioInformation::set_allocated_date(::commonroad::TimeStamp* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    set_has_date();
  } else {
    clear_has_date();
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.date)
}

// required string author = 4;
inline bool ScenarioInformation::has_author() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScenarioInformation::set_has_author() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScenarioInformation::clear_has_author() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScenarioInformation::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& ScenarioInformation::author() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.author)
  return author_.GetNoArena();
}
inline void ScenarioInformation::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.author)
}
#if LANG_CXX11
inline void ScenarioInformation::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonroad.ScenarioInformation.author)
}
#endif
inline void ScenarioInformation::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonroad.ScenarioInformation.author)
}
inline void ScenarioInformation::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonroad.ScenarioInformation.author)
}
inline ::std::string* ScenarioInformation::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioInformation::release_author() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.author)
  if (!has_author()) {
    return NULL;
  }
  clear_has_author();
  return author_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioInformation::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.author)
}

// required string affiliation = 5;
inline bool ScenarioInformation::has_affiliation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScenarioInformation::set_has_affiliation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScenarioInformation::clear_has_affiliation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScenarioInformation::clear_affiliation() {
  affiliation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_affiliation();
}
inline const ::std::string& ScenarioInformation::affiliation() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.affiliation)
  return affiliation_.GetNoArena();
}
inline void ScenarioInformation::set_affiliation(const ::std::string& value) {
  set_has_affiliation();
  affiliation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.affiliation)
}
#if LANG_CXX11
inline void ScenarioInformation::set_affiliation(::std::string&& value) {
  set_has_affiliation();
  affiliation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonroad.ScenarioInformation.affiliation)
}
#endif
inline void ScenarioInformation::set_affiliation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_affiliation();
  affiliation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonroad.ScenarioInformation.affiliation)
}
inline void ScenarioInformation::set_affiliation(const char* value, size_t size) {
  set_has_affiliation();
  affiliation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonroad.ScenarioInformation.affiliation)
}
inline ::std::string* ScenarioInformation::mutable_affiliation() {
  set_has_affiliation();
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.affiliation)
  return affiliation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioInformation::release_affiliation() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.affiliation)
  if (!has_affiliation()) {
    return NULL;
  }
  clear_has_affiliation();
  return affiliation_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioInformation::set_allocated_affiliation(::std::string* affiliation) {
  if (affiliation != NULL) {
    set_has_affiliation();
  } else {
    clear_has_affiliation();
  }
  affiliation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), affiliation);
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.affiliation)
}

// required string source = 6;
inline bool ScenarioInformation::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScenarioInformation::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScenarioInformation::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScenarioInformation::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ScenarioInformation::source() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.source)
  return source_.GetNoArena();
}
inline void ScenarioInformation::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.source)
}
#if LANG_CXX11
inline void ScenarioInformation::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonroad.ScenarioInformation.source)
}
#endif
inline void ScenarioInformation::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonroad.ScenarioInformation.source)
}
inline void ScenarioInformation::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonroad.ScenarioInformation.source)
}
inline ::std::string* ScenarioInformation::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:commonroad.ScenarioInformation.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioInformation::release_source() {
  // @@protoc_insertion_point(field_release:commonroad.ScenarioInformation.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioInformation::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:commonroad.ScenarioInformation.source)
}

// required double time_step_size = 7;
inline bool ScenarioInformation::has_time_step_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScenarioInformation::set_has_time_step_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ScenarioInformation::clear_has_time_step_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ScenarioInformation::clear_time_step_size() {
  time_step_size_ = 0;
  clear_has_time_step_size();
}
inline double ScenarioInformation::time_step_size() const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioInformation.time_step_size)
  return time_step_size_;
}
inline void ScenarioInformation::set_time_step_size(double value) {
  set_has_time_step_size();
  time_step_size_ = value;
  // @@protoc_insertion_point(field_set:commonroad.ScenarioInformation.time_step_size)
}

// -------------------------------------------------------------------

// CommonRoad

// required .commonroad.ScenarioInformation information = 1;
inline bool CommonRoad::has_information() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonRoad::set_has_information() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonRoad::clear_has_information() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonRoad::clear_information() {
  if (information_ != NULL) information_->Clear();
  clear_has_information();
}
inline const ::commonroad::ScenarioInformation& CommonRoad::_internal_information() const {
  return *information_;
}
inline const ::commonroad::ScenarioInformation& CommonRoad::information() const {
  const ::commonroad::ScenarioInformation* p = information_;
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.information)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::ScenarioInformation*>(
      &::commonroad::_ScenarioInformation_default_instance_);
}
inline ::commonroad::ScenarioInformation* CommonRoad::release_information() {
  // @@protoc_insertion_point(field_release:commonroad.CommonRoad.information)
  clear_has_information();
  ::commonroad::ScenarioInformation* temp = information_;
  information_ = NULL;
  return temp;
}
inline ::commonroad::ScenarioInformation* CommonRoad::mutable_information() {
  set_has_information();
  if (information_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::ScenarioInformation>(GetArenaNoVirtual());
    information_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.information)
  return information_;
}
inline void CommonRoad::set_allocated_information(::commonroad::ScenarioInformation* information) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete information_;
  }
  if (information) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      information = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, information, submessage_arena);
    }
    set_has_information();
  } else {
    clear_has_information();
  }
  information_ = information;
  // @@protoc_insertion_point(field_set_allocated:commonroad.CommonRoad.information)
}

// required .commonroad.ScenarioTags scenario_tags = 2;
inline bool CommonRoad::has_scenario_tags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonRoad::set_has_scenario_tags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonRoad::clear_has_scenario_tags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::commonroad::ScenarioTags& CommonRoad::_internal_scenario_tags() const {
  return *scenario_tags_;
}
inline const ::commonroad::ScenarioTags& CommonRoad::scenario_tags() const {
  const ::commonroad::ScenarioTags* p = scenario_tags_;
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.scenario_tags)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::ScenarioTags*>(
      &::commonroad::_ScenarioTags_default_instance_);
}
inline ::commonroad::ScenarioTags* CommonRoad::release_scenario_tags() {
  // @@protoc_insertion_point(field_release:commonroad.CommonRoad.scenario_tags)
  clear_has_scenario_tags();
  ::commonroad::ScenarioTags* temp = scenario_tags_;
  scenario_tags_ = NULL;
  return temp;
}
inline ::commonroad::ScenarioTags* CommonRoad::mutable_scenario_tags() {
  set_has_scenario_tags();
  if (scenario_tags_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::ScenarioTags>(GetArenaNoVirtual());
    scenario_tags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.scenario_tags)
  return scenario_tags_;
}
inline void CommonRoad::set_allocated_scenario_tags(::commonroad::ScenarioTags* scenario_tags) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scenario_tags_);
  }
  if (scenario_tags) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario_tags = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario_tags, submessage_arena);
    }
    set_has_scenario_tags();
  } else {
    clear_has_scenario_tags();
  }
  scenario_tags_ = scenario_tags;
  // @@protoc_insertion_point(field_set_allocated:commonroad.CommonRoad.scenario_tags)
}

// required .commonroad.Location location = 3;
inline bool CommonRoad::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonRoad::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonRoad::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::commonroad::Location& CommonRoad::_internal_location() const {
  return *location_;
}
inline const ::commonroad::Location& CommonRoad::location() const {
  const ::commonroad::Location* p = location_;
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.location)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Location*>(
      &::commonroad::_Location_default_instance_);
}
inline ::commonroad::Location* CommonRoad::release_location() {
  // @@protoc_insertion_point(field_release:commonroad.CommonRoad.location)
  clear_has_location();
  ::commonroad::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::commonroad::Location* CommonRoad::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.location)
  return location_;
}
inline void CommonRoad::set_allocated_location(::commonroad::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:commonroad.CommonRoad.location)
}

// repeated .commonroad.Lanelet lanelets = 4;
inline int CommonRoad::lanelets_size() const {
  return lanelets_.size();
}
inline ::commonroad::Lanelet* CommonRoad::mutable_lanelets(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.lanelets)
  return lanelets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::Lanelet >*
CommonRoad::mutable_lanelets() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.lanelets)
  return &lanelets_;
}
inline const ::commonroad::Lanelet& CommonRoad::lanelets(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.lanelets)
  return lanelets_.Get(index);
}
inline ::commonroad::Lanelet* CommonRoad::add_lanelets() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.lanelets)
  return lanelets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::Lanelet >&
CommonRoad::lanelets() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.lanelets)
  return lanelets_;
}

// repeated .commonroad.TrafficSign traffic_signs = 5;
inline int CommonRoad::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline ::commonroad::TrafficSign* CommonRoad::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSign >*
CommonRoad::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.traffic_signs)
  return &traffic_signs_;
}
inline const ::commonroad::TrafficSign& CommonRoad::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::commonroad::TrafficSign* CommonRoad::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSign >&
CommonRoad::traffic_signs() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.traffic_signs)
  return traffic_signs_;
}

// repeated .commonroad.TrafficLight traffic_lights = 6;
inline int CommonRoad::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline ::commonroad::TrafficLight* CommonRoad::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficLight >*
CommonRoad::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.traffic_lights)
  return &traffic_lights_;
}
inline const ::commonroad::TrafficLight& CommonRoad::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::commonroad::TrafficLight* CommonRoad::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficLight >&
CommonRoad::traffic_lights() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.traffic_lights)
  return traffic_lights_;
}

// repeated .commonroad.Intersection intersections = 7;
inline int CommonRoad::intersections_size() const {
  return intersections_.size();
}
inline ::commonroad::Intersection* CommonRoad::mutable_intersections(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.intersections)
  return intersections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::Intersection >*
CommonRoad::mutable_intersections() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.intersections)
  return &intersections_;
}
inline const ::commonroad::Intersection& CommonRoad::intersections(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.intersections)
  return intersections_.Get(index);
}
inline ::commonroad::Intersection* CommonRoad::add_intersections() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.intersections)
  return intersections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::Intersection >&
CommonRoad::intersections() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.intersections)
  return intersections_;
}

// repeated .commonroad.StaticObstacle static_obstacles = 8;
inline int CommonRoad::static_obstacles_size() const {
  return static_obstacles_.size();
}
inline ::commonroad::StaticObstacle* CommonRoad::mutable_static_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.static_obstacles)
  return static_obstacles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::StaticObstacle >*
CommonRoad::mutable_static_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.static_obstacles)
  return &static_obstacles_;
}
inline const ::commonroad::StaticObstacle& CommonRoad::static_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.static_obstacles)
  return static_obstacles_.Get(index);
}
inline ::commonroad::StaticObstacle* CommonRoad::add_static_obstacles() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.static_obstacles)
  return static_obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::StaticObstacle >&
CommonRoad::static_obstacles() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.static_obstacles)
  return static_obstacles_;
}

// repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
inline int CommonRoad::dynamic_obstacles_size() const {
  return dynamic_obstacles_.size();
}
inline ::commonroad::DynamicObstacle* CommonRoad::mutable_dynamic_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.dynamic_obstacles)
  return dynamic_obstacles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::DynamicObstacle >*
CommonRoad::mutable_dynamic_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.dynamic_obstacles)
  return &dynamic_obstacles_;
}
inline const ::commonroad::DynamicObstacle& CommonRoad::dynamic_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.dynamic_obstacles)
  return dynamic_obstacles_.Get(index);
}
inline ::commonroad::DynamicObstacle* CommonRoad::add_dynamic_obstacles() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.dynamic_obstacles)
  return dynamic_obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::DynamicObstacle >&
CommonRoad::dynamic_obstacles() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.dynamic_obstacles)
  return dynamic_obstacles_;
}

// repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
inline int CommonRoad::environment_obstacles_size() const {
  return environment_obstacles_.size();
}
inline ::commonroad::EnvironmentObstacle* CommonRoad::mutable_environment_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.environment_obstacles)
  return environment_obstacles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::EnvironmentObstacle >*
CommonRoad::mutable_environment_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.environment_obstacles)
  return &environment_obstacles_;
}
inline const ::commonroad::EnvironmentObstacle& CommonRoad::environment_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.environment_obstacles)
  return environment_obstacles_.Get(index);
}
inline ::commonroad::EnvironmentObstacle* CommonRoad::add_environment_obstacles() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.environment_obstacles)
  return environment_obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::EnvironmentObstacle >&
CommonRoad::environment_obstacles() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.environment_obstacles)
  return environment_obstacles_;
}

// repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
inline int CommonRoad::phantom_obstacles_size() const {
  return phantom_obstacles_.size();
}
inline ::commonroad::PhantomObstacle* CommonRoad::mutable_phantom_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.phantom_obstacles)
  return phantom_obstacles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::PhantomObstacle >*
CommonRoad::mutable_phantom_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.phantom_obstacles)
  return &phantom_obstacles_;
}
inline const ::commonroad::PhantomObstacle& CommonRoad::phantom_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.phantom_obstacles)
  return phantom_obstacles_.Get(index);
}
inline ::commonroad::PhantomObstacle* CommonRoad::add_phantom_obstacles() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.phantom_obstacles)
  return phantom_obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::PhantomObstacle >&
CommonRoad::phantom_obstacles() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.phantom_obstacles)
  return phantom_obstacles_;
}

// repeated .commonroad.PlanningProblem planning_problems = 12;
inline int CommonRoad::planning_problems_size() const {
  return planning_problems_.size();
}
inline ::commonroad::PlanningProblem* CommonRoad::mutable_planning_problems(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.CommonRoad.planning_problems)
  return planning_problems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::PlanningProblem >*
CommonRoad::mutable_planning_problems() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.CommonRoad.planning_problems)
  return &planning_problems_;
}
inline const ::commonroad::PlanningProblem& CommonRoad::planning_problems(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.CommonRoad.planning_problems)
  return planning_problems_.Get(index);
}
inline ::commonroad::PlanningProblem* CommonRoad::add_planning_problems() {
  // @@protoc_insertion_point(field_add:commonroad.CommonRoad.planning_problems)
  return planning_problems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::PlanningProblem >&
CommonRoad::planning_problems() const {
  // @@protoc_insertion_point(field_list:commonroad.CommonRoad.planning_problems)
  return planning_problems_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_commonroad_2eproto
