// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle.proto

#ifndef PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "obstacle.pb.h"
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dynamic_5fobstacle_2eproto 

namespace protobuf_dynamic_5fobstacle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dynamic_5fobstacle_2eproto
namespace commonroad {
class DynamicObstacle;
class DynamicObstacleDefaultTypeInternal;
extern DynamicObstacleDefaultTypeInternal _DynamicObstacle_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::DynamicObstacle* Arena::CreateMaybeMessage<::commonroad::DynamicObstacle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

// ===================================================================

class DynamicObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.DynamicObstacle) */ {
 public:
  DynamicObstacle();
  virtual ~DynamicObstacle();

  DynamicObstacle(const DynamicObstacle& from);

  inline DynamicObstacle& operator=(const DynamicObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynamicObstacle(DynamicObstacle&& from) noexcept
    : DynamicObstacle() {
    *this = ::std::move(from);
  }

  inline DynamicObstacle& operator=(DynamicObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicObstacle& default_instance();

  enum PredictionCase {
    kTrajectoryPrediction = 5,
    kSetBasedPrediction = 6,
    PREDICTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacle* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacle*>(
               &_DynamicObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DynamicObstacle* other);
  friend void swap(DynamicObstacle& a, DynamicObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacle* New() const final {
    return CreateMaybeMessage<DynamicObstacle>(NULL);
  }

  DynamicObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynamicObstacle& from);
  void MergeFrom(const DynamicObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.SignalState signal_series = 8;
  int signal_series_size() const;
  void clear_signal_series();
  static const int kSignalSeriesFieldNumber = 8;
  ::commonroad::SignalState* mutable_signal_series(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >*
      mutable_signal_series();
  const ::commonroad::SignalState& signal_series(int index) const;
  ::commonroad::SignalState* add_signal_series();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >&
      signal_series() const;

  // required .commonroad.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  private:
  const ::commonroad::Shape& _internal_shape() const;
  public:
  const ::commonroad::Shape& shape() const;
  ::commonroad::Shape* release_shape();
  ::commonroad::Shape* mutable_shape();
  void set_allocated_shape(::commonroad::Shape* shape);

  // required .commonroad.State initial_state = 4;
  bool has_initial_state() const;
  void clear_initial_state();
  static const int kInitialStateFieldNumber = 4;
  private:
  const ::commonroad::State& _internal_initial_state() const;
  public:
  const ::commonroad::State& initial_state() const;
  ::commonroad::State* release_initial_state();
  ::commonroad::State* mutable_initial_state();
  void set_allocated_initial_state(::commonroad::State* initial_state);

  // optional .commonroad.SignalState initial_signal_state = 7;
  bool has_initial_signal_state() const;
  void clear_initial_signal_state();
  static const int kInitialSignalStateFieldNumber = 7;
  private:
  const ::commonroad::SignalState& _internal_initial_signal_state() const;
  public:
  const ::commonroad::SignalState& initial_signal_state() const;
  ::commonroad::SignalState* release_initial_signal_state();
  ::commonroad::SignalState* mutable_initial_signal_state();
  void set_allocated_initial_signal_state(::commonroad::SignalState* initial_signal_state);

  // required uint32 dynamic_obstacle_id = 1;
  bool has_dynamic_obstacle_id() const;
  void clear_dynamic_obstacle_id();
  static const int kDynamicObstacleIdFieldNumber = 1;
  ::google::protobuf::uint32 dynamic_obstacle_id() const;
  void set_dynamic_obstacle_id(::google::protobuf::uint32 value);

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  bool has_obstacle_type() const;
  void clear_obstacle_type();
  static const int kObstacleTypeFieldNumber = 2;
  ::commonroad::ObstacleTypeEnum_ObstacleType obstacle_type() const;
  void set_obstacle_type(::commonroad::ObstacleTypeEnum_ObstacleType value);

  // optional .commonroad.TrajectoryPrediction trajectory_prediction = 5;
  bool has_trajectory_prediction() const;
  void clear_trajectory_prediction();
  static const int kTrajectoryPredictionFieldNumber = 5;
  private:
  const ::commonroad::TrajectoryPrediction& _internal_trajectory_prediction() const;
  public:
  const ::commonroad::TrajectoryPrediction& trajectory_prediction() const;
  ::commonroad::TrajectoryPrediction* release_trajectory_prediction();
  ::commonroad::TrajectoryPrediction* mutable_trajectory_prediction();
  void set_allocated_trajectory_prediction(::commonroad::TrajectoryPrediction* trajectory_prediction);

  // optional .commonroad.SetBasedPrediction set_based_prediction = 6;
  bool has_set_based_prediction() const;
  void clear_set_based_prediction();
  static const int kSetBasedPredictionFieldNumber = 6;
  private:
  const ::commonroad::SetBasedPrediction& _internal_set_based_prediction() const;
  public:
  const ::commonroad::SetBasedPrediction& set_based_prediction() const;
  ::commonroad::SetBasedPrediction* release_set_based_prediction();
  ::commonroad::SetBasedPrediction* mutable_set_based_prediction();
  void set_allocated_set_based_prediction(::commonroad::SetBasedPrediction* set_based_prediction);

  void clear_prediction();
  PredictionCase prediction_case() const;
  // @@protoc_insertion_point(class_scope:commonroad.DynamicObstacle)
 private:
  void set_has_dynamic_obstacle_id();
  void clear_has_dynamic_obstacle_id();
  void set_has_obstacle_type();
  void clear_has_obstacle_type();
  void set_has_shape();
  void clear_has_shape();
  void set_has_initial_state();
  void clear_has_initial_state();
  void set_has_trajectory_prediction();
  void set_has_set_based_prediction();
  void set_has_initial_signal_state();
  void clear_has_initial_signal_state();

  inline bool has_prediction() const;
  inline void clear_has_prediction();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState > signal_series_;
  ::commonroad::Shape* shape_;
  ::commonroad::State* initial_state_;
  ::commonroad::SignalState* initial_signal_state_;
  ::google::protobuf::uint32 dynamic_obstacle_id_;
  int obstacle_type_;
  union PredictionUnion {
    PredictionUnion() {}
    ::commonroad::TrajectoryPrediction* trajectory_prediction_;
    ::commonroad::SetBasedPrediction* set_based_prediction_;
  } prediction_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_dynamic_5fobstacle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicObstacle

// required uint32 dynamic_obstacle_id = 1;
inline bool DynamicObstacle::has_dynamic_obstacle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DynamicObstacle::set_has_dynamic_obstacle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DynamicObstacle::clear_has_dynamic_obstacle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DynamicObstacle::clear_dynamic_obstacle_id() {
  dynamic_obstacle_id_ = 0u;
  clear_has_dynamic_obstacle_id();
}
inline ::google::protobuf::uint32 DynamicObstacle::dynamic_obstacle_id() const {
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.dynamic_obstacle_id)
  return dynamic_obstacle_id_;
}
inline void DynamicObstacle::set_dynamic_obstacle_id(::google::protobuf::uint32 value) {
  set_has_dynamic_obstacle_id();
  dynamic_obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.DynamicObstacle.dynamic_obstacle_id)
}

// required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
inline bool DynamicObstacle::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DynamicObstacle::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DynamicObstacle::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DynamicObstacle::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
inline ::commonroad::ObstacleTypeEnum_ObstacleType DynamicObstacle::obstacle_type() const {
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.obstacle_type)
  return static_cast< ::commonroad::ObstacleTypeEnum_ObstacleType >(obstacle_type_);
}
inline void DynamicObstacle::set_obstacle_type(::commonroad::ObstacleTypeEnum_ObstacleType value) {
  assert(::commonroad::ObstacleTypeEnum_ObstacleType_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:commonroad.DynamicObstacle.obstacle_type)
}

// required .commonroad.Shape shape = 3;
inline bool DynamicObstacle::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DynamicObstacle::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DynamicObstacle::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::Shape& DynamicObstacle::_internal_shape() const {
  return *shape_;
}
inline const ::commonroad::Shape& DynamicObstacle::shape() const {
  const ::commonroad::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Shape*>(
      &::commonroad::_Shape_default_instance_);
}
inline ::commonroad::Shape* DynamicObstacle::release_shape() {
  // @@protoc_insertion_point(field_release:commonroad.DynamicObstacle.shape)
  clear_has_shape();
  ::commonroad::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::commonroad::Shape* DynamicObstacle::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.shape)
  return shape_;
}
inline void DynamicObstacle::set_allocated_shape(::commonroad::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:commonroad.DynamicObstacle.shape)
}

// required .commonroad.State initial_state = 4;
inline bool DynamicObstacle::has_initial_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DynamicObstacle::set_has_initial_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DynamicObstacle::clear_has_initial_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::commonroad::State& DynamicObstacle::_internal_initial_state() const {
  return *initial_state_;
}
inline const ::commonroad::State& DynamicObstacle::initial_state() const {
  const ::commonroad::State* p = initial_state_;
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.initial_state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::State*>(
      &::commonroad::_State_default_instance_);
}
inline ::commonroad::State* DynamicObstacle::release_initial_state() {
  // @@protoc_insertion_point(field_release:commonroad.DynamicObstacle.initial_state)
  clear_has_initial_state();
  ::commonroad::State* temp = initial_state_;
  initial_state_ = NULL;
  return temp;
}
inline ::commonroad::State* DynamicObstacle::mutable_initial_state() {
  set_has_initial_state();
  if (initial_state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::State>(GetArenaNoVirtual());
    initial_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.initial_state)
  return initial_state_;
}
inline void DynamicObstacle::set_allocated_initial_state(::commonroad::State* initial_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(initial_state_);
  }
  if (initial_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initial_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initial_state, submessage_arena);
    }
    set_has_initial_state();
  } else {
    clear_has_initial_state();
  }
  initial_state_ = initial_state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.DynamicObstacle.initial_state)
}

// optional .commonroad.TrajectoryPrediction trajectory_prediction = 5;
inline bool DynamicObstacle::has_trajectory_prediction() const {
  return prediction_case() == kTrajectoryPrediction;
}
inline void DynamicObstacle::set_has_trajectory_prediction() {
  _oneof_case_[0] = kTrajectoryPrediction;
}
inline const ::commonroad::TrajectoryPrediction& DynamicObstacle::_internal_trajectory_prediction() const {
  return *prediction_.trajectory_prediction_;
}
inline ::commonroad::TrajectoryPrediction* DynamicObstacle::release_trajectory_prediction() {
  // @@protoc_insertion_point(field_release:commonroad.DynamicObstacle.trajectory_prediction)
  if (has_trajectory_prediction()) {
    clear_has_prediction();
      ::commonroad::TrajectoryPrediction* temp = prediction_.trajectory_prediction_;
    prediction_.trajectory_prediction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::commonroad::TrajectoryPrediction& DynamicObstacle::trajectory_prediction() const {
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.trajectory_prediction)
  return has_trajectory_prediction()
      ? *prediction_.trajectory_prediction_
      : *reinterpret_cast< ::commonroad::TrajectoryPrediction*>(&::commonroad::_TrajectoryPrediction_default_instance_);
}
inline ::commonroad::TrajectoryPrediction* DynamicObstacle::mutable_trajectory_prediction() {
  if (!has_trajectory_prediction()) {
    clear_prediction();
    set_has_trajectory_prediction();
    prediction_.trajectory_prediction_ = CreateMaybeMessage< ::commonroad::TrajectoryPrediction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.trajectory_prediction)
  return prediction_.trajectory_prediction_;
}

// optional .commonroad.SetBasedPrediction set_based_prediction = 6;
inline bool DynamicObstacle::has_set_based_prediction() const {
  return prediction_case() == kSetBasedPrediction;
}
inline void DynamicObstacle::set_has_set_based_prediction() {
  _oneof_case_[0] = kSetBasedPrediction;
}
inline const ::commonroad::SetBasedPrediction& DynamicObstacle::_internal_set_based_prediction() const {
  return *prediction_.set_based_prediction_;
}
inline ::commonroad::SetBasedPrediction* DynamicObstacle::release_set_based_prediction() {
  // @@protoc_insertion_point(field_release:commonroad.DynamicObstacle.set_based_prediction)
  if (has_set_based_prediction()) {
    clear_has_prediction();
      ::commonroad::SetBasedPrediction* temp = prediction_.set_based_prediction_;
    prediction_.set_based_prediction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::commonroad::SetBasedPrediction& DynamicObstacle::set_based_prediction() const {
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.set_based_prediction)
  return has_set_based_prediction()
      ? *prediction_.set_based_prediction_
      : *reinterpret_cast< ::commonroad::SetBasedPrediction*>(&::commonroad::_SetBasedPrediction_default_instance_);
}
inline ::commonroad::SetBasedPrediction* DynamicObstacle::mutable_set_based_prediction() {
  if (!has_set_based_prediction()) {
    clear_prediction();
    set_has_set_based_prediction();
    prediction_.set_based_prediction_ = CreateMaybeMessage< ::commonroad::SetBasedPrediction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.set_based_prediction)
  return prediction_.set_based_prediction_;
}

// optional .commonroad.SignalState initial_signal_state = 7;
inline bool DynamicObstacle::has_initial_signal_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DynamicObstacle::set_has_initial_signal_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DynamicObstacle::clear_has_initial_signal_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::commonroad::SignalState& DynamicObstacle::_internal_initial_signal_state() const {
  return *initial_signal_state_;
}
inline const ::commonroad::SignalState& DynamicObstacle::initial_signal_state() const {
  const ::commonroad::SignalState* p = initial_signal_state_;
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.initial_signal_state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::SignalState*>(
      &::commonroad::_SignalState_default_instance_);
}
inline ::commonroad::SignalState* DynamicObstacle::release_initial_signal_state() {
  // @@protoc_insertion_point(field_release:commonroad.DynamicObstacle.initial_signal_state)
  clear_has_initial_signal_state();
  ::commonroad::SignalState* temp = initial_signal_state_;
  initial_signal_state_ = NULL;
  return temp;
}
inline ::commonroad::SignalState* DynamicObstacle::mutable_initial_signal_state() {
  set_has_initial_signal_state();
  if (initial_signal_state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::SignalState>(GetArenaNoVirtual());
    initial_signal_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.initial_signal_state)
  return initial_signal_state_;
}
inline void DynamicObstacle::set_allocated_initial_signal_state(::commonroad::SignalState* initial_signal_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(initial_signal_state_);
  }
  if (initial_signal_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initial_signal_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initial_signal_state, submessage_arena);
    }
    set_has_initial_signal_state();
  } else {
    clear_has_initial_signal_state();
  }
  initial_signal_state_ = initial_signal_state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.DynamicObstacle.initial_signal_state)
}

// repeated .commonroad.SignalState signal_series = 8;
inline int DynamicObstacle::signal_series_size() const {
  return signal_series_.size();
}
inline ::commonroad::SignalState* DynamicObstacle::mutable_signal_series(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.DynamicObstacle.signal_series)
  return signal_series_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >*
DynamicObstacle::mutable_signal_series() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.DynamicObstacle.signal_series)
  return &signal_series_;
}
inline const ::commonroad::SignalState& DynamicObstacle::signal_series(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.DynamicObstacle.signal_series)
  return signal_series_.Get(index);
}
inline ::commonroad::SignalState* DynamicObstacle::add_signal_series() {
  // @@protoc_insertion_point(field_add:commonroad.DynamicObstacle.signal_series)
  return signal_series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >&
DynamicObstacle::signal_series() const {
  // @@protoc_insertion_point(field_list:commonroad.DynamicObstacle.signal_series)
  return signal_series_;
}

inline bool DynamicObstacle::has_prediction() const {
  return prediction_case() != PREDICTION_NOT_SET;
}
inline void DynamicObstacle::clear_has_prediction() {
  _oneof_case_[0] = PREDICTION_NOT_SET;
}
inline DynamicObstacle::PredictionCase DynamicObstacle::prediction_case() const {
  return DynamicObstacle::PredictionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto
