// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lanelet.proto

#ifndef PROTOBUF_INCLUDED_lanelet_2eproto
#define PROTOBUF_INCLUDED_lanelet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_lanelet_2eproto 

namespace protobuf_lanelet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_lanelet_2eproto
namespace commonroad {
class Bound;
class BoundDefaultTypeInternal;
extern BoundDefaultTypeInternal _Bound_default_instance_;
class DrivingDirEnum;
class DrivingDirEnumDefaultTypeInternal;
extern DrivingDirEnumDefaultTypeInternal _DrivingDirEnum_default_instance_;
class Lanelet;
class LaneletDefaultTypeInternal;
extern LaneletDefaultTypeInternal _Lanelet_default_instance_;
class LaneletTypeEnum;
class LaneletTypeEnumDefaultTypeInternal;
extern LaneletTypeEnumDefaultTypeInternal _LaneletTypeEnum_default_instance_;
class LineMarkingEnum;
class LineMarkingEnumDefaultTypeInternal;
extern LineMarkingEnumDefaultTypeInternal _LineMarkingEnum_default_instance_;
class RoadUserEnum;
class RoadUserEnumDefaultTypeInternal;
extern RoadUserEnumDefaultTypeInternal _RoadUserEnum_default_instance_;
class StopLine;
class StopLineDefaultTypeInternal;
extern StopLineDefaultTypeInternal _StopLine_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::Bound* Arena::CreateMaybeMessage<::commonroad::Bound>(Arena*);
template<> ::commonroad::DrivingDirEnum* Arena::CreateMaybeMessage<::commonroad::DrivingDirEnum>(Arena*);
template<> ::commonroad::Lanelet* Arena::CreateMaybeMessage<::commonroad::Lanelet>(Arena*);
template<> ::commonroad::LaneletTypeEnum* Arena::CreateMaybeMessage<::commonroad::LaneletTypeEnum>(Arena*);
template<> ::commonroad::LineMarkingEnum* Arena::CreateMaybeMessage<::commonroad::LineMarkingEnum>(Arena*);
template<> ::commonroad::RoadUserEnum* Arena::CreateMaybeMessage<::commonroad::RoadUserEnum>(Arena*);
template<> ::commonroad::StopLine* Arena::CreateMaybeMessage<::commonroad::StopLine>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

enum LineMarkingEnum_LineMarking {
  LineMarkingEnum_LineMarking_DASHED = 0,
  LineMarkingEnum_LineMarking_SOLID = 1,
  LineMarkingEnum_LineMarking_BROAD_DASHED = 2,
  LineMarkingEnum_LineMarking_BROAD_SOLID = 3,
  LineMarkingEnum_LineMarking_UNKNOWN = 4,
  LineMarkingEnum_LineMarking_NO_MARKING = 5
};
bool LineMarkingEnum_LineMarking_IsValid(int value);
const LineMarkingEnum_LineMarking LineMarkingEnum_LineMarking_LineMarking_MIN = LineMarkingEnum_LineMarking_DASHED;
const LineMarkingEnum_LineMarking LineMarkingEnum_LineMarking_LineMarking_MAX = LineMarkingEnum_LineMarking_NO_MARKING;
const int LineMarkingEnum_LineMarking_LineMarking_ARRAYSIZE = LineMarkingEnum_LineMarking_LineMarking_MAX + 1;

const ::google::protobuf::EnumDescriptor* LineMarkingEnum_LineMarking_descriptor();
inline const ::std::string& LineMarkingEnum_LineMarking_Name(LineMarkingEnum_LineMarking value) {
  return ::google::protobuf::internal::NameOfEnum(
    LineMarkingEnum_LineMarking_descriptor(), value);
}
inline bool LineMarkingEnum_LineMarking_Parse(
    const ::std::string& name, LineMarkingEnum_LineMarking* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineMarkingEnum_LineMarking>(
    LineMarkingEnum_LineMarking_descriptor(), name, value);
}
enum DrivingDirEnum_DrivingDir {
  DrivingDirEnum_DrivingDir_SAME = 0,
  DrivingDirEnum_DrivingDir_OPPOSITE = 1
};
bool DrivingDirEnum_DrivingDir_IsValid(int value);
const DrivingDirEnum_DrivingDir DrivingDirEnum_DrivingDir_DrivingDir_MIN = DrivingDirEnum_DrivingDir_SAME;
const DrivingDirEnum_DrivingDir DrivingDirEnum_DrivingDir_DrivingDir_MAX = DrivingDirEnum_DrivingDir_OPPOSITE;
const int DrivingDirEnum_DrivingDir_DrivingDir_ARRAYSIZE = DrivingDirEnum_DrivingDir_DrivingDir_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrivingDirEnum_DrivingDir_descriptor();
inline const ::std::string& DrivingDirEnum_DrivingDir_Name(DrivingDirEnum_DrivingDir value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrivingDirEnum_DrivingDir_descriptor(), value);
}
inline bool DrivingDirEnum_DrivingDir_Parse(
    const ::std::string& name, DrivingDirEnum_DrivingDir* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrivingDirEnum_DrivingDir>(
    DrivingDirEnum_DrivingDir_descriptor(), name, value);
}
enum LaneletTypeEnum_LaneletType {
  LaneletTypeEnum_LaneletType_URBAN = 0,
  LaneletTypeEnum_LaneletType_COUNTRY = 1,
  LaneletTypeEnum_LaneletType_HIGHWAY = 2,
  LaneletTypeEnum_LaneletType_DRIVE_WAY = 3,
  LaneletTypeEnum_LaneletType_MAIN_CARRIAGE_WAY = 4,
  LaneletTypeEnum_LaneletType_ACCESS_RAMP = 5,
  LaneletTypeEnum_LaneletType_EXIT_RAMP = 6,
  LaneletTypeEnum_LaneletType_SHOULDER = 7,
  LaneletTypeEnum_LaneletType_BUS_LANE = 8,
  LaneletTypeEnum_LaneletType_BUS_STOP = 9,
  LaneletTypeEnum_LaneletType_BICYCLE_LANE = 10,
  LaneletTypeEnum_LaneletType_SIDEWALK = 11,
  LaneletTypeEnum_LaneletType_CROSSWALK = 12,
  LaneletTypeEnum_LaneletType_INTERSTATE = 13,
  LaneletTypeEnum_LaneletType_INTERSECTION = 14,
  LaneletTypeEnum_LaneletType_UNKNOWN = 15
};
bool LaneletTypeEnum_LaneletType_IsValid(int value);
const LaneletTypeEnum_LaneletType LaneletTypeEnum_LaneletType_LaneletType_MIN = LaneletTypeEnum_LaneletType_URBAN;
const LaneletTypeEnum_LaneletType LaneletTypeEnum_LaneletType_LaneletType_MAX = LaneletTypeEnum_LaneletType_UNKNOWN;
const int LaneletTypeEnum_LaneletType_LaneletType_ARRAYSIZE = LaneletTypeEnum_LaneletType_LaneletType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneletTypeEnum_LaneletType_descriptor();
inline const ::std::string& LaneletTypeEnum_LaneletType_Name(LaneletTypeEnum_LaneletType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneletTypeEnum_LaneletType_descriptor(), value);
}
inline bool LaneletTypeEnum_LaneletType_Parse(
    const ::std::string& name, LaneletTypeEnum_LaneletType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneletTypeEnum_LaneletType>(
    LaneletTypeEnum_LaneletType_descriptor(), name, value);
}
enum RoadUserEnum_RoadUser {
  RoadUserEnum_RoadUser_VEHICLE = 0,
  RoadUserEnum_RoadUser_CAR = 1,
  RoadUserEnum_RoadUser_TRUCK = 2,
  RoadUserEnum_RoadUser_BUS = 3,
  RoadUserEnum_RoadUser_PRIORITY_VEHICLE = 4,
  RoadUserEnum_RoadUser_MOTORCYCLE = 5,
  RoadUserEnum_RoadUser_BICYCLE = 6,
  RoadUserEnum_RoadUser_PEDESTRIAN = 7,
  RoadUserEnum_RoadUser_TRAIN = 8,
  RoadUserEnum_RoadUser_TAXI = 9
};
bool RoadUserEnum_RoadUser_IsValid(int value);
const RoadUserEnum_RoadUser RoadUserEnum_RoadUser_RoadUser_MIN = RoadUserEnum_RoadUser_VEHICLE;
const RoadUserEnum_RoadUser RoadUserEnum_RoadUser_RoadUser_MAX = RoadUserEnum_RoadUser_TAXI;
const int RoadUserEnum_RoadUser_RoadUser_ARRAYSIZE = RoadUserEnum_RoadUser_RoadUser_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadUserEnum_RoadUser_descriptor();
inline const ::std::string& RoadUserEnum_RoadUser_Name(RoadUserEnum_RoadUser value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadUserEnum_RoadUser_descriptor(), value);
}
inline bool RoadUserEnum_RoadUser_Parse(
    const ::std::string& name, RoadUserEnum_RoadUser* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadUserEnum_RoadUser>(
    RoadUserEnum_RoadUser_descriptor(), name, value);
}
// ===================================================================

class LineMarkingEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.LineMarkingEnum) */ {
 public:
  LineMarkingEnum();
  virtual ~LineMarkingEnum();

  LineMarkingEnum(const LineMarkingEnum& from);

  inline LineMarkingEnum& operator=(const LineMarkingEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineMarkingEnum(LineMarkingEnum&& from) noexcept
    : LineMarkingEnum() {
    *this = ::std::move(from);
  }

  inline LineMarkingEnum& operator=(LineMarkingEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineMarkingEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineMarkingEnum* internal_default_instance() {
    return reinterpret_cast<const LineMarkingEnum*>(
               &_LineMarkingEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LineMarkingEnum* other);
  friend void swap(LineMarkingEnum& a, LineMarkingEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineMarkingEnum* New() const final {
    return CreateMaybeMessage<LineMarkingEnum>(NULL);
  }

  LineMarkingEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LineMarkingEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LineMarkingEnum& from);
  void MergeFrom(const LineMarkingEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineMarkingEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LineMarkingEnum_LineMarking LineMarking;
  static const LineMarking DASHED =
    LineMarkingEnum_LineMarking_DASHED;
  static const LineMarking SOLID =
    LineMarkingEnum_LineMarking_SOLID;
  static const LineMarking BROAD_DASHED =
    LineMarkingEnum_LineMarking_BROAD_DASHED;
  static const LineMarking BROAD_SOLID =
    LineMarkingEnum_LineMarking_BROAD_SOLID;
  static const LineMarking UNKNOWN =
    LineMarkingEnum_LineMarking_UNKNOWN;
  static const LineMarking NO_MARKING =
    LineMarkingEnum_LineMarking_NO_MARKING;
  static inline bool LineMarking_IsValid(int value) {
    return LineMarkingEnum_LineMarking_IsValid(value);
  }
  static const LineMarking LineMarking_MIN =
    LineMarkingEnum_LineMarking_LineMarking_MIN;
  static const LineMarking LineMarking_MAX =
    LineMarkingEnum_LineMarking_LineMarking_MAX;
  static const int LineMarking_ARRAYSIZE =
    LineMarkingEnum_LineMarking_LineMarking_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LineMarking_descriptor() {
    return LineMarkingEnum_LineMarking_descriptor();
  }
  static inline const ::std::string& LineMarking_Name(LineMarking value) {
    return LineMarkingEnum_LineMarking_Name(value);
  }
  static inline bool LineMarking_Parse(const ::std::string& name,
      LineMarking* value) {
    return LineMarkingEnum_LineMarking_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.LineMarkingEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrivingDirEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.DrivingDirEnum) */ {
 public:
  DrivingDirEnum();
  virtual ~DrivingDirEnum();

  DrivingDirEnum(const DrivingDirEnum& from);

  inline DrivingDirEnum& operator=(const DrivingDirEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DrivingDirEnum(DrivingDirEnum&& from) noexcept
    : DrivingDirEnum() {
    *this = ::std::move(from);
  }

  inline DrivingDirEnum& operator=(DrivingDirEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrivingDirEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingDirEnum* internal_default_instance() {
    return reinterpret_cast<const DrivingDirEnum*>(
               &_DrivingDirEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DrivingDirEnum* other);
  friend void swap(DrivingDirEnum& a, DrivingDirEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrivingDirEnum* New() const final {
    return CreateMaybeMessage<DrivingDirEnum>(NULL);
  }

  DrivingDirEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DrivingDirEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DrivingDirEnum& from);
  void MergeFrom(const DrivingDirEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrivingDirEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DrivingDirEnum_DrivingDir DrivingDir;
  static const DrivingDir SAME =
    DrivingDirEnum_DrivingDir_SAME;
  static const DrivingDir OPPOSITE =
    DrivingDirEnum_DrivingDir_OPPOSITE;
  static inline bool DrivingDir_IsValid(int value) {
    return DrivingDirEnum_DrivingDir_IsValid(value);
  }
  static const DrivingDir DrivingDir_MIN =
    DrivingDirEnum_DrivingDir_DrivingDir_MIN;
  static const DrivingDir DrivingDir_MAX =
    DrivingDirEnum_DrivingDir_DrivingDir_MAX;
  static const int DrivingDir_ARRAYSIZE =
    DrivingDirEnum_DrivingDir_DrivingDir_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingDir_descriptor() {
    return DrivingDirEnum_DrivingDir_descriptor();
  }
  static inline const ::std::string& DrivingDir_Name(DrivingDir value) {
    return DrivingDirEnum_DrivingDir_Name(value);
  }
  static inline bool DrivingDir_Parse(const ::std::string& name,
      DrivingDir* value) {
    return DrivingDirEnum_DrivingDir_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.DrivingDirEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneletTypeEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.LaneletTypeEnum) */ {
 public:
  LaneletTypeEnum();
  virtual ~LaneletTypeEnum();

  LaneletTypeEnum(const LaneletTypeEnum& from);

  inline LaneletTypeEnum& operator=(const LaneletTypeEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneletTypeEnum(LaneletTypeEnum&& from) noexcept
    : LaneletTypeEnum() {
    *this = ::std::move(from);
  }

  inline LaneletTypeEnum& operator=(LaneletTypeEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneletTypeEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneletTypeEnum* internal_default_instance() {
    return reinterpret_cast<const LaneletTypeEnum*>(
               &_LaneletTypeEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaneletTypeEnum* other);
  friend void swap(LaneletTypeEnum& a, LaneletTypeEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneletTypeEnum* New() const final {
    return CreateMaybeMessage<LaneletTypeEnum>(NULL);
  }

  LaneletTypeEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneletTypeEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneletTypeEnum& from);
  void MergeFrom(const LaneletTypeEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneletTypeEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneletTypeEnum_LaneletType LaneletType;
  static const LaneletType URBAN =
    LaneletTypeEnum_LaneletType_URBAN;
  static const LaneletType COUNTRY =
    LaneletTypeEnum_LaneletType_COUNTRY;
  static const LaneletType HIGHWAY =
    LaneletTypeEnum_LaneletType_HIGHWAY;
  static const LaneletType DRIVE_WAY =
    LaneletTypeEnum_LaneletType_DRIVE_WAY;
  static const LaneletType MAIN_CARRIAGE_WAY =
    LaneletTypeEnum_LaneletType_MAIN_CARRIAGE_WAY;
  static const LaneletType ACCESS_RAMP =
    LaneletTypeEnum_LaneletType_ACCESS_RAMP;
  static const LaneletType EXIT_RAMP =
    LaneletTypeEnum_LaneletType_EXIT_RAMP;
  static const LaneletType SHOULDER =
    LaneletTypeEnum_LaneletType_SHOULDER;
  static const LaneletType BUS_LANE =
    LaneletTypeEnum_LaneletType_BUS_LANE;
  static const LaneletType BUS_STOP =
    LaneletTypeEnum_LaneletType_BUS_STOP;
  static const LaneletType BICYCLE_LANE =
    LaneletTypeEnum_LaneletType_BICYCLE_LANE;
  static const LaneletType SIDEWALK =
    LaneletTypeEnum_LaneletType_SIDEWALK;
  static const LaneletType CROSSWALK =
    LaneletTypeEnum_LaneletType_CROSSWALK;
  static const LaneletType INTERSTATE =
    LaneletTypeEnum_LaneletType_INTERSTATE;
  static const LaneletType INTERSECTION =
    LaneletTypeEnum_LaneletType_INTERSECTION;
  static const LaneletType UNKNOWN =
    LaneletTypeEnum_LaneletType_UNKNOWN;
  static inline bool LaneletType_IsValid(int value) {
    return LaneletTypeEnum_LaneletType_IsValid(value);
  }
  static const LaneletType LaneletType_MIN =
    LaneletTypeEnum_LaneletType_LaneletType_MIN;
  static const LaneletType LaneletType_MAX =
    LaneletTypeEnum_LaneletType_LaneletType_MAX;
  static const int LaneletType_ARRAYSIZE =
    LaneletTypeEnum_LaneletType_LaneletType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneletType_descriptor() {
    return LaneletTypeEnum_LaneletType_descriptor();
  }
  static inline const ::std::string& LaneletType_Name(LaneletType value) {
    return LaneletTypeEnum_LaneletType_Name(value);
  }
  static inline bool LaneletType_Parse(const ::std::string& name,
      LaneletType* value) {
    return LaneletTypeEnum_LaneletType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.LaneletTypeEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadUserEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.RoadUserEnum) */ {
 public:
  RoadUserEnum();
  virtual ~RoadUserEnum();

  RoadUserEnum(const RoadUserEnum& from);

  inline RoadUserEnum& operator=(const RoadUserEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadUserEnum(RoadUserEnum&& from) noexcept
    : RoadUserEnum() {
    *this = ::std::move(from);
  }

  inline RoadUserEnum& operator=(RoadUserEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadUserEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadUserEnum* internal_default_instance() {
    return reinterpret_cast<const RoadUserEnum*>(
               &_RoadUserEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RoadUserEnum* other);
  friend void swap(RoadUserEnum& a, RoadUserEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadUserEnum* New() const final {
    return CreateMaybeMessage<RoadUserEnum>(NULL);
  }

  RoadUserEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoadUserEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoadUserEnum& from);
  void MergeFrom(const RoadUserEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadUserEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoadUserEnum_RoadUser RoadUser;
  static const RoadUser VEHICLE =
    RoadUserEnum_RoadUser_VEHICLE;
  static const RoadUser CAR =
    RoadUserEnum_RoadUser_CAR;
  static const RoadUser TRUCK =
    RoadUserEnum_RoadUser_TRUCK;
  static const RoadUser BUS =
    RoadUserEnum_RoadUser_BUS;
  static const RoadUser PRIORITY_VEHICLE =
    RoadUserEnum_RoadUser_PRIORITY_VEHICLE;
  static const RoadUser MOTORCYCLE =
    RoadUserEnum_RoadUser_MOTORCYCLE;
  static const RoadUser BICYCLE =
    RoadUserEnum_RoadUser_BICYCLE;
  static const RoadUser PEDESTRIAN =
    RoadUserEnum_RoadUser_PEDESTRIAN;
  static const RoadUser TRAIN =
    RoadUserEnum_RoadUser_TRAIN;
  static const RoadUser TAXI =
    RoadUserEnum_RoadUser_TAXI;
  static inline bool RoadUser_IsValid(int value) {
    return RoadUserEnum_RoadUser_IsValid(value);
  }
  static const RoadUser RoadUser_MIN =
    RoadUserEnum_RoadUser_RoadUser_MIN;
  static const RoadUser RoadUser_MAX =
    RoadUserEnum_RoadUser_RoadUser_MAX;
  static const int RoadUser_ARRAYSIZE =
    RoadUserEnum_RoadUser_RoadUser_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadUser_descriptor() {
    return RoadUserEnum_RoadUser_descriptor();
  }
  static inline const ::std::string& RoadUser_Name(RoadUser value) {
    return RoadUserEnum_RoadUser_Name(value);
  }
  static inline bool RoadUser_Parse(const ::std::string& name,
      RoadUser* value) {
    return RoadUserEnum_RoadUser_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.RoadUserEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.Bound) */ {
 public:
  Bound();
  virtual ~Bound();

  Bound(const Bound& from);

  inline Bound& operator=(const Bound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bound(Bound&& from) noexcept
    : Bound() {
    *this = ::std::move(from);
  }

  inline Bound& operator=(Bound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bound* internal_default_instance() {
    return reinterpret_cast<const Bound*>(
               &_Bound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Bound* other);
  friend void swap(Bound& a, Bound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bound* New() const final {
    return CreateMaybeMessage<Bound>(NULL);
  }

  Bound* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bound>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bound& from);
  void MergeFrom(const Bound& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::commonroad::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::Point >*
      mutable_points();
  const ::commonroad::Point& points(int index) const;
  ::commonroad::Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::Point >&
      points() const;

  // optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  bool has_line_marking() const;
  void clear_line_marking();
  static const int kLineMarkingFieldNumber = 2;
  ::commonroad::LineMarkingEnum_LineMarking line_marking() const;
  void set_line_marking(::commonroad::LineMarkingEnum_LineMarking value);

  // @@protoc_insertion_point(class_scope:commonroad.Bound)
 private:
  void set_has_line_marking();
  void clear_has_line_marking();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::Point > points_;
  int line_marking_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.StopLine) */ {
 public:
  StopLine();
  virtual ~StopLine();

  StopLine(const StopLine& from);

  inline StopLine& operator=(const StopLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopLine(StopLine&& from) noexcept
    : StopLine() {
    *this = ::std::move(from);
  }

  inline StopLine& operator=(StopLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopLine* internal_default_instance() {
    return reinterpret_cast<const StopLine*>(
               &_StopLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopLine* other);
  friend void swap(StopLine& a, StopLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopLine* New() const final {
    return CreateMaybeMessage<StopLine>(NULL);
  }

  StopLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopLine& from);
  void MergeFrom(const StopLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::commonroad::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::Point >*
      mutable_points();
  const ::commonroad::Point& points(int index) const;
  ::commonroad::Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::Point >&
      points() const;

  // repeated uint32 traffic_sign_refs = 3;
  int traffic_sign_refs_size() const;
  void clear_traffic_sign_refs();
  static const int kTrafficSignRefsFieldNumber = 3;
  ::google::protobuf::uint32 traffic_sign_refs(int index) const;
  void set_traffic_sign_refs(int index, ::google::protobuf::uint32 value);
  void add_traffic_sign_refs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      traffic_sign_refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_traffic_sign_refs();

  // repeated uint32 traffic_light_refs = 4;
  int traffic_light_refs_size() const;
  void clear_traffic_light_refs();
  static const int kTrafficLightRefsFieldNumber = 4;
  ::google::protobuf::uint32 traffic_light_refs(int index) const;
  void set_traffic_light_refs(int index, ::google::protobuf::uint32 value);
  void add_traffic_light_refs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      traffic_light_refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_traffic_light_refs();

  // required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  bool has_line_marking() const;
  void clear_line_marking();
  static const int kLineMarkingFieldNumber = 2;
  ::commonroad::LineMarkingEnum_LineMarking line_marking() const;
  void set_line_marking(::commonroad::LineMarkingEnum_LineMarking value);

  // @@protoc_insertion_point(class_scope:commonroad.StopLine)
 private:
  void set_has_line_marking();
  void clear_has_line_marking();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::Point > points_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > traffic_sign_refs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > traffic_light_refs_;
  int line_marking_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lanelet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.Lanelet) */ {
 public:
  Lanelet();
  virtual ~Lanelet();

  Lanelet(const Lanelet& from);

  inline Lanelet& operator=(const Lanelet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lanelet(Lanelet&& from) noexcept
    : Lanelet() {
    *this = ::std::move(from);
  }

  inline Lanelet& operator=(Lanelet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lanelet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lanelet* internal_default_instance() {
    return reinterpret_cast<const Lanelet*>(
               &_Lanelet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Lanelet* other);
  friend void swap(Lanelet& a, Lanelet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lanelet* New() const final {
    return CreateMaybeMessage<Lanelet>(NULL);
  }

  Lanelet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lanelet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lanelet& from);
  void MergeFrom(const Lanelet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lanelet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 predecessors = 4;
  int predecessors_size() const;
  void clear_predecessors();
  static const int kPredecessorsFieldNumber = 4;
  ::google::protobuf::uint32 predecessors(int index) const;
  void set_predecessors(int index, ::google::protobuf::uint32 value);
  void add_predecessors(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      predecessors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_predecessors();

  // repeated uint32 successors = 5;
  int successors_size() const;
  void clear_successors();
  static const int kSuccessorsFieldNumber = 5;
  ::google::protobuf::uint32 successors(int index) const;
  void set_successors(int index, ::google::protobuf::uint32 value);
  void add_successors(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      successors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_successors();

  // repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
  int lanelet_types_size() const;
  void clear_lanelet_types();
  static const int kLaneletTypesFieldNumber = 11;
  ::commonroad::LaneletTypeEnum_LaneletType lanelet_types(int index) const;
  void set_lanelet_types(int index, ::commonroad::LaneletTypeEnum_LaneletType value);
  void add_lanelet_types(::commonroad::LaneletTypeEnum_LaneletType value);
  const ::google::protobuf::RepeatedField<int>& lanelet_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_lanelet_types();

  // repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
  int user_one_way_size() const;
  void clear_user_one_way();
  static const int kUserOneWayFieldNumber = 12;
  ::commonroad::RoadUserEnum_RoadUser user_one_way(int index) const;
  void set_user_one_way(int index, ::commonroad::RoadUserEnum_RoadUser value);
  void add_user_one_way(::commonroad::RoadUserEnum_RoadUser value);
  const ::google::protobuf::RepeatedField<int>& user_one_way() const;
  ::google::protobuf::RepeatedField<int>* mutable_user_one_way();

  // repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
  int user_bidirectional_size() const;
  void clear_user_bidirectional();
  static const int kUserBidirectionalFieldNumber = 13;
  ::commonroad::RoadUserEnum_RoadUser user_bidirectional(int index) const;
  void set_user_bidirectional(int index, ::commonroad::RoadUserEnum_RoadUser value);
  void add_user_bidirectional(::commonroad::RoadUserEnum_RoadUser value);
  const ::google::protobuf::RepeatedField<int>& user_bidirectional() const;
  ::google::protobuf::RepeatedField<int>* mutable_user_bidirectional();

  // repeated uint32 traffic_sign_refs = 14;
  int traffic_sign_refs_size() const;
  void clear_traffic_sign_refs();
  static const int kTrafficSignRefsFieldNumber = 14;
  ::google::protobuf::uint32 traffic_sign_refs(int index) const;
  void set_traffic_sign_refs(int index, ::google::protobuf::uint32 value);
  void add_traffic_sign_refs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      traffic_sign_refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_traffic_sign_refs();

  // repeated uint32 traffic_light_refs = 15;
  int traffic_light_refs_size() const;
  void clear_traffic_light_refs();
  static const int kTrafficLightRefsFieldNumber = 15;
  ::google::protobuf::uint32 traffic_light_refs(int index) const;
  void set_traffic_light_refs(int index, ::google::protobuf::uint32 value);
  void add_traffic_light_refs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      traffic_light_refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_traffic_light_refs();

  // required .commonroad.Bound left_bound = 2;
  bool has_left_bound() const;
  void clear_left_bound();
  static const int kLeftBoundFieldNumber = 2;
  private:
  const ::commonroad::Bound& _internal_left_bound() const;
  public:
  const ::commonroad::Bound& left_bound() const;
  ::commonroad::Bound* release_left_bound();
  ::commonroad::Bound* mutable_left_bound();
  void set_allocated_left_bound(::commonroad::Bound* left_bound);

  // required .commonroad.Bound right_bound = 3;
  bool has_right_bound() const;
  void clear_right_bound();
  static const int kRightBoundFieldNumber = 3;
  private:
  const ::commonroad::Bound& _internal_right_bound() const;
  public:
  const ::commonroad::Bound& right_bound() const;
  ::commonroad::Bound* release_right_bound();
  ::commonroad::Bound* mutable_right_bound();
  void set_allocated_right_bound(::commonroad::Bound* right_bound);

  // optional .commonroad.StopLine stop_line = 10;
  bool has_stop_line() const;
  void clear_stop_line();
  static const int kStopLineFieldNumber = 10;
  private:
  const ::commonroad::StopLine& _internal_stop_line() const;
  public:
  const ::commonroad::StopLine& stop_line() const;
  ::commonroad::StopLine* release_stop_line();
  ::commonroad::StopLine* mutable_stop_line();
  void set_allocated_stop_line(::commonroad::StopLine* stop_line);

  // required uint32 lanelet_id = 1;
  bool has_lanelet_id() const;
  void clear_lanelet_id();
  static const int kLaneletIdFieldNumber = 1;
  ::google::protobuf::uint32 lanelet_id() const;
  void set_lanelet_id(::google::protobuf::uint32 value);

  // optional uint32 adjacent_left = 6;
  bool has_adjacent_left() const;
  void clear_adjacent_left();
  static const int kAdjacentLeftFieldNumber = 6;
  ::google::protobuf::uint32 adjacent_left() const;
  void set_adjacent_left(::google::protobuf::uint32 value);

  // optional uint32 adjacent_right = 7;
  bool has_adjacent_right() const;
  void clear_adjacent_right();
  static const int kAdjacentRightFieldNumber = 7;
  ::google::protobuf::uint32 adjacent_right() const;
  void set_adjacent_right(::google::protobuf::uint32 value);

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
  bool has_adjacent_left_dir() const;
  void clear_adjacent_left_dir();
  static const int kAdjacentLeftDirFieldNumber = 8;
  ::commonroad::DrivingDirEnum_DrivingDir adjacent_left_dir() const;
  void set_adjacent_left_dir(::commonroad::DrivingDirEnum_DrivingDir value);

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
  bool has_adjacent_right_dir() const;
  void clear_adjacent_right_dir();
  static const int kAdjacentRightDirFieldNumber = 9;
  ::commonroad::DrivingDirEnum_DrivingDir adjacent_right_dir() const;
  void set_adjacent_right_dir(::commonroad::DrivingDirEnum_DrivingDir value);

  // @@protoc_insertion_point(class_scope:commonroad.Lanelet)
 private:
  void set_has_lanelet_id();
  void clear_has_lanelet_id();
  void set_has_left_bound();
  void clear_has_left_bound();
  void set_has_right_bound();
  void clear_has_right_bound();
  void set_has_adjacent_left();
  void clear_has_adjacent_left();
  void set_has_adjacent_right();
  void clear_has_adjacent_right();
  void set_has_adjacent_left_dir();
  void clear_has_adjacent_left_dir();
  void set_has_adjacent_right_dir();
  void clear_has_adjacent_right_dir();
  void set_has_stop_line();
  void clear_has_stop_line();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > predecessors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > successors_;
  ::google::protobuf::RepeatedField<int> lanelet_types_;
  ::google::protobuf::RepeatedField<int> user_one_way_;
  ::google::protobuf::RepeatedField<int> user_bidirectional_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > traffic_sign_refs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > traffic_light_refs_;
  ::commonroad::Bound* left_bound_;
  ::commonroad::Bound* right_bound_;
  ::commonroad::StopLine* stop_line_;
  ::google::protobuf::uint32 lanelet_id_;
  ::google::protobuf::uint32 adjacent_left_;
  ::google::protobuf::uint32 adjacent_right_;
  int adjacent_left_dir_;
  int adjacent_right_dir_;
  friend struct ::protobuf_lanelet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LineMarkingEnum

// -------------------------------------------------------------------

// DrivingDirEnum

// -------------------------------------------------------------------

// LaneletTypeEnum

// -------------------------------------------------------------------

// RoadUserEnum

// -------------------------------------------------------------------

// Bound

// repeated .commonroad.Point points = 1;
inline int Bound::points_size() const {
  return points_.size();
}
inline ::commonroad::Point* Bound::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.Bound.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::Point >*
Bound::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Bound.points)
  return &points_;
}
inline const ::commonroad::Point& Bound::points(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Bound.points)
  return points_.Get(index);
}
inline ::commonroad::Point* Bound::add_points() {
  // @@protoc_insertion_point(field_add:commonroad.Bound.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::Point >&
Bound::points() const {
  // @@protoc_insertion_point(field_list:commonroad.Bound.points)
  return points_;
}

// optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
inline bool Bound::has_line_marking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bound::set_has_line_marking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bound::clear_has_line_marking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bound::clear_line_marking() {
  line_marking_ = 0;
  clear_has_line_marking();
}
inline ::commonroad::LineMarkingEnum_LineMarking Bound::line_marking() const {
  // @@protoc_insertion_point(field_get:commonroad.Bound.line_marking)
  return static_cast< ::commonroad::LineMarkingEnum_LineMarking >(line_marking_);
}
inline void Bound::set_line_marking(::commonroad::LineMarkingEnum_LineMarking value) {
  assert(::commonroad::LineMarkingEnum_LineMarking_IsValid(value));
  set_has_line_marking();
  line_marking_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Bound.line_marking)
}

// -------------------------------------------------------------------

// StopLine

// repeated .commonroad.Point points = 1;
inline int StopLine::points_size() const {
  return points_.size();
}
inline ::commonroad::Point* StopLine::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.StopLine.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::Point >*
StopLine::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.StopLine.points)
  return &points_;
}
inline const ::commonroad::Point& StopLine::points(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.StopLine.points)
  return points_.Get(index);
}
inline ::commonroad::Point* StopLine::add_points() {
  // @@protoc_insertion_point(field_add:commonroad.StopLine.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::Point >&
StopLine::points() const {
  // @@protoc_insertion_point(field_list:commonroad.StopLine.points)
  return points_;
}

// required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
inline bool StopLine::has_line_marking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopLine::set_has_line_marking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopLine::clear_has_line_marking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopLine::clear_line_marking() {
  line_marking_ = 0;
  clear_has_line_marking();
}
inline ::commonroad::LineMarkingEnum_LineMarking StopLine::line_marking() const {
  // @@protoc_insertion_point(field_get:commonroad.StopLine.line_marking)
  return static_cast< ::commonroad::LineMarkingEnum_LineMarking >(line_marking_);
}
inline void StopLine::set_line_marking(::commonroad::LineMarkingEnum_LineMarking value) {
  assert(::commonroad::LineMarkingEnum_LineMarking_IsValid(value));
  set_has_line_marking();
  line_marking_ = value;
  // @@protoc_insertion_point(field_set:commonroad.StopLine.line_marking)
}

// repeated uint32 traffic_sign_refs = 3;
inline int StopLine::traffic_sign_refs_size() const {
  return traffic_sign_refs_.size();
}
inline void StopLine::clear_traffic_sign_refs() {
  traffic_sign_refs_.Clear();
}
inline ::google::protobuf::uint32 StopLine::traffic_sign_refs(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.StopLine.traffic_sign_refs)
  return traffic_sign_refs_.Get(index);
}
inline void StopLine::set_traffic_sign_refs(int index, ::google::protobuf::uint32 value) {
  traffic_sign_refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.StopLine.traffic_sign_refs)
}
inline void StopLine::add_traffic_sign_refs(::google::protobuf::uint32 value) {
  traffic_sign_refs_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.StopLine.traffic_sign_refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StopLine::traffic_sign_refs() const {
  // @@protoc_insertion_point(field_list:commonroad.StopLine.traffic_sign_refs)
  return traffic_sign_refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StopLine::mutable_traffic_sign_refs() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.StopLine.traffic_sign_refs)
  return &traffic_sign_refs_;
}

// repeated uint32 traffic_light_refs = 4;
inline int StopLine::traffic_light_refs_size() const {
  return traffic_light_refs_.size();
}
inline void StopLine::clear_traffic_light_refs() {
  traffic_light_refs_.Clear();
}
inline ::google::protobuf::uint32 StopLine::traffic_light_refs(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.StopLine.traffic_light_refs)
  return traffic_light_refs_.Get(index);
}
inline void StopLine::set_traffic_light_refs(int index, ::google::protobuf::uint32 value) {
  traffic_light_refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.StopLine.traffic_light_refs)
}
inline void StopLine::add_traffic_light_refs(::google::protobuf::uint32 value) {
  traffic_light_refs_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.StopLine.traffic_light_refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StopLine::traffic_light_refs() const {
  // @@protoc_insertion_point(field_list:commonroad.StopLine.traffic_light_refs)
  return traffic_light_refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StopLine::mutable_traffic_light_refs() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.StopLine.traffic_light_refs)
  return &traffic_light_refs_;
}

// -------------------------------------------------------------------

// Lanelet

// required uint32 lanelet_id = 1;
inline bool Lanelet::has_lanelet_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lanelet::set_has_lanelet_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lanelet::clear_has_lanelet_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lanelet::clear_lanelet_id() {
  lanelet_id_ = 0u;
  clear_has_lanelet_id();
}
inline ::google::protobuf::uint32 Lanelet::lanelet_id() const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.lanelet_id)
  return lanelet_id_;
}
inline void Lanelet::set_lanelet_id(::google::protobuf::uint32 value) {
  set_has_lanelet_id();
  lanelet_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.lanelet_id)
}

// required .commonroad.Bound left_bound = 2;
inline bool Lanelet::has_left_bound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lanelet::set_has_left_bound() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lanelet::clear_has_left_bound() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lanelet::clear_left_bound() {
  if (left_bound_ != NULL) left_bound_->Clear();
  clear_has_left_bound();
}
inline const ::commonroad::Bound& Lanelet::_internal_left_bound() const {
  return *left_bound_;
}
inline const ::commonroad::Bound& Lanelet::left_bound() const {
  const ::commonroad::Bound* p = left_bound_;
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.left_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Bound*>(
      &::commonroad::_Bound_default_instance_);
}
inline ::commonroad::Bound* Lanelet::release_left_bound() {
  // @@protoc_insertion_point(field_release:commonroad.Lanelet.left_bound)
  clear_has_left_bound();
  ::commonroad::Bound* temp = left_bound_;
  left_bound_ = NULL;
  return temp;
}
inline ::commonroad::Bound* Lanelet::mutable_left_bound() {
  set_has_left_bound();
  if (left_bound_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Bound>(GetArenaNoVirtual());
    left_bound_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.Lanelet.left_bound)
  return left_bound_;
}
inline void Lanelet::set_allocated_left_bound(::commonroad::Bound* left_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_bound_;
  }
  if (left_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_bound, submessage_arena);
    }
    set_has_left_bound();
  } else {
    clear_has_left_bound();
  }
  left_bound_ = left_bound;
  // @@protoc_insertion_point(field_set_allocated:commonroad.Lanelet.left_bound)
}

// required .commonroad.Bound right_bound = 3;
inline bool Lanelet::has_right_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lanelet::set_has_right_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lanelet::clear_has_right_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lanelet::clear_right_bound() {
  if (right_bound_ != NULL) right_bound_->Clear();
  clear_has_right_bound();
}
inline const ::commonroad::Bound& Lanelet::_internal_right_bound() const {
  return *right_bound_;
}
inline const ::commonroad::Bound& Lanelet::right_bound() const {
  const ::commonroad::Bound* p = right_bound_;
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.right_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Bound*>(
      &::commonroad::_Bound_default_instance_);
}
inline ::commonroad::Bound* Lanelet::release_right_bound() {
  // @@protoc_insertion_point(field_release:commonroad.Lanelet.right_bound)
  clear_has_right_bound();
  ::commonroad::Bound* temp = right_bound_;
  right_bound_ = NULL;
  return temp;
}
inline ::commonroad::Bound* Lanelet::mutable_right_bound() {
  set_has_right_bound();
  if (right_bound_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Bound>(GetArenaNoVirtual());
    right_bound_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.Lanelet.right_bound)
  return right_bound_;
}
inline void Lanelet::set_allocated_right_bound(::commonroad::Bound* right_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_bound_;
  }
  if (right_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_bound, submessage_arena);
    }
    set_has_right_bound();
  } else {
    clear_has_right_bound();
  }
  right_bound_ = right_bound;
  // @@protoc_insertion_point(field_set_allocated:commonroad.Lanelet.right_bound)
}

// repeated uint32 predecessors = 4;
inline int Lanelet::predecessors_size() const {
  return predecessors_.size();
}
inline void Lanelet::clear_predecessors() {
  predecessors_.Clear();
}
inline ::google::protobuf::uint32 Lanelet::predecessors(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.predecessors)
  return predecessors_.Get(index);
}
inline void Lanelet::set_predecessors(int index, ::google::protobuf::uint32 value) {
  predecessors_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.predecessors)
}
inline void Lanelet::add_predecessors(::google::protobuf::uint32 value) {
  predecessors_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.predecessors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lanelet::predecessors() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.predecessors)
  return predecessors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lanelet::mutable_predecessors() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.predecessors)
  return &predecessors_;
}

// repeated uint32 successors = 5;
inline int Lanelet::successors_size() const {
  return successors_.size();
}
inline void Lanelet::clear_successors() {
  successors_.Clear();
}
inline ::google::protobuf::uint32 Lanelet::successors(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.successors)
  return successors_.Get(index);
}
inline void Lanelet::set_successors(int index, ::google::protobuf::uint32 value) {
  successors_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.successors)
}
inline void Lanelet::add_successors(::google::protobuf::uint32 value) {
  successors_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.successors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lanelet::successors() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.successors)
  return successors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lanelet::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.successors)
  return &successors_;
}

// optional uint32 adjacent_left = 6;
inline bool Lanelet::has_adjacent_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lanelet::set_has_adjacent_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lanelet::clear_has_adjacent_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lanelet::clear_adjacent_left() {
  adjacent_left_ = 0u;
  clear_has_adjacent_left();
}
inline ::google::protobuf::uint32 Lanelet::adjacent_left() const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.adjacent_left)
  return adjacent_left_;
}
inline void Lanelet::set_adjacent_left(::google::protobuf::uint32 value) {
  set_has_adjacent_left();
  adjacent_left_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.adjacent_left)
}

// optional uint32 adjacent_right = 7;
inline bool Lanelet::has_adjacent_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lanelet::set_has_adjacent_right() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lanelet::clear_has_adjacent_right() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lanelet::clear_adjacent_right() {
  adjacent_right_ = 0u;
  clear_has_adjacent_right();
}
inline ::google::protobuf::uint32 Lanelet::adjacent_right() const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.adjacent_right)
  return adjacent_right_;
}
inline void Lanelet::set_adjacent_right(::google::protobuf::uint32 value) {
  set_has_adjacent_right();
  adjacent_right_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.adjacent_right)
}

// optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
inline bool Lanelet::has_adjacent_left_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lanelet::set_has_adjacent_left_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lanelet::clear_has_adjacent_left_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lanelet::clear_adjacent_left_dir() {
  adjacent_left_dir_ = 0;
  clear_has_adjacent_left_dir();
}
inline ::commonroad::DrivingDirEnum_DrivingDir Lanelet::adjacent_left_dir() const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.adjacent_left_dir)
  return static_cast< ::commonroad::DrivingDirEnum_DrivingDir >(adjacent_left_dir_);
}
inline void Lanelet::set_adjacent_left_dir(::commonroad::DrivingDirEnum_DrivingDir value) {
  assert(::commonroad::DrivingDirEnum_DrivingDir_IsValid(value));
  set_has_adjacent_left_dir();
  adjacent_left_dir_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.adjacent_left_dir)
}

// optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
inline bool Lanelet::has_adjacent_right_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lanelet::set_has_adjacent_right_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lanelet::clear_has_adjacent_right_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lanelet::clear_adjacent_right_dir() {
  adjacent_right_dir_ = 0;
  clear_has_adjacent_right_dir();
}
inline ::commonroad::DrivingDirEnum_DrivingDir Lanelet::adjacent_right_dir() const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.adjacent_right_dir)
  return static_cast< ::commonroad::DrivingDirEnum_DrivingDir >(adjacent_right_dir_);
}
inline void Lanelet::set_adjacent_right_dir(::commonroad::DrivingDirEnum_DrivingDir value) {
  assert(::commonroad::DrivingDirEnum_DrivingDir_IsValid(value));
  set_has_adjacent_right_dir();
  adjacent_right_dir_ = value;
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.adjacent_right_dir)
}

// optional .commonroad.StopLine stop_line = 10;
inline bool Lanelet::has_stop_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lanelet::set_has_stop_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lanelet::clear_has_stop_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lanelet::clear_stop_line() {
  if (stop_line_ != NULL) stop_line_->Clear();
  clear_has_stop_line();
}
inline const ::commonroad::StopLine& Lanelet::_internal_stop_line() const {
  return *stop_line_;
}
inline const ::commonroad::StopLine& Lanelet::stop_line() const {
  const ::commonroad::StopLine* p = stop_line_;
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.stop_line)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::StopLine*>(
      &::commonroad::_StopLine_default_instance_);
}
inline ::commonroad::StopLine* Lanelet::release_stop_line() {
  // @@protoc_insertion_point(field_release:commonroad.Lanelet.stop_line)
  clear_has_stop_line();
  ::commonroad::StopLine* temp = stop_line_;
  stop_line_ = NULL;
  return temp;
}
inline ::commonroad::StopLine* Lanelet::mutable_stop_line() {
  set_has_stop_line();
  if (stop_line_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::StopLine>(GetArenaNoVirtual());
    stop_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.Lanelet.stop_line)
  return stop_line_;
}
inline void Lanelet::set_allocated_stop_line(::commonroad::StopLine* stop_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stop_line_;
  }
  if (stop_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_line, submessage_arena);
    }
    set_has_stop_line();
  } else {
    clear_has_stop_line();
  }
  stop_line_ = stop_line;
  // @@protoc_insertion_point(field_set_allocated:commonroad.Lanelet.stop_line)
}

// repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
inline int Lanelet::lanelet_types_size() const {
  return lanelet_types_.size();
}
inline void Lanelet::clear_lanelet_types() {
  lanelet_types_.Clear();
}
inline ::commonroad::LaneletTypeEnum_LaneletType Lanelet::lanelet_types(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.lanelet_types)
  return static_cast< ::commonroad::LaneletTypeEnum_LaneletType >(lanelet_types_.Get(index));
}
inline void Lanelet::set_lanelet_types(int index, ::commonroad::LaneletTypeEnum_LaneletType value) {
  assert(::commonroad::LaneletTypeEnum_LaneletType_IsValid(value));
  lanelet_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.lanelet_types)
}
inline void Lanelet::add_lanelet_types(::commonroad::LaneletTypeEnum_LaneletType value) {
  assert(::commonroad::LaneletTypeEnum_LaneletType_IsValid(value));
  lanelet_types_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.lanelet_types)
}
inline const ::google::protobuf::RepeatedField<int>&
Lanelet::lanelet_types() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.lanelet_types)
  return lanelet_types_;
}
inline ::google::protobuf::RepeatedField<int>*
Lanelet::mutable_lanelet_types() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.lanelet_types)
  return &lanelet_types_;
}

// repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
inline int Lanelet::user_one_way_size() const {
  return user_one_way_.size();
}
inline void Lanelet::clear_user_one_way() {
  user_one_way_.Clear();
}
inline ::commonroad::RoadUserEnum_RoadUser Lanelet::user_one_way(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.user_one_way)
  return static_cast< ::commonroad::RoadUserEnum_RoadUser >(user_one_way_.Get(index));
}
inline void Lanelet::set_user_one_way(int index, ::commonroad::RoadUserEnum_RoadUser value) {
  assert(::commonroad::RoadUserEnum_RoadUser_IsValid(value));
  user_one_way_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.user_one_way)
}
inline void Lanelet::add_user_one_way(::commonroad::RoadUserEnum_RoadUser value) {
  assert(::commonroad::RoadUserEnum_RoadUser_IsValid(value));
  user_one_way_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.user_one_way)
}
inline const ::google::protobuf::RepeatedField<int>&
Lanelet::user_one_way() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.user_one_way)
  return user_one_way_;
}
inline ::google::protobuf::RepeatedField<int>*
Lanelet::mutable_user_one_way() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.user_one_way)
  return &user_one_way_;
}

// repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
inline int Lanelet::user_bidirectional_size() const {
  return user_bidirectional_.size();
}
inline void Lanelet::clear_user_bidirectional() {
  user_bidirectional_.Clear();
}
inline ::commonroad::RoadUserEnum_RoadUser Lanelet::user_bidirectional(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.user_bidirectional)
  return static_cast< ::commonroad::RoadUserEnum_RoadUser >(user_bidirectional_.Get(index));
}
inline void Lanelet::set_user_bidirectional(int index, ::commonroad::RoadUserEnum_RoadUser value) {
  assert(::commonroad::RoadUserEnum_RoadUser_IsValid(value));
  user_bidirectional_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.user_bidirectional)
}
inline void Lanelet::add_user_bidirectional(::commonroad::RoadUserEnum_RoadUser value) {
  assert(::commonroad::RoadUserEnum_RoadUser_IsValid(value));
  user_bidirectional_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.user_bidirectional)
}
inline const ::google::protobuf::RepeatedField<int>&
Lanelet::user_bidirectional() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.user_bidirectional)
  return user_bidirectional_;
}
inline ::google::protobuf::RepeatedField<int>*
Lanelet::mutable_user_bidirectional() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.user_bidirectional)
  return &user_bidirectional_;
}

// repeated uint32 traffic_sign_refs = 14;
inline int Lanelet::traffic_sign_refs_size() const {
  return traffic_sign_refs_.size();
}
inline void Lanelet::clear_traffic_sign_refs() {
  traffic_sign_refs_.Clear();
}
inline ::google::protobuf::uint32 Lanelet::traffic_sign_refs(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.traffic_sign_refs)
  return traffic_sign_refs_.Get(index);
}
inline void Lanelet::set_traffic_sign_refs(int index, ::google::protobuf::uint32 value) {
  traffic_sign_refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.traffic_sign_refs)
}
inline void Lanelet::add_traffic_sign_refs(::google::protobuf::uint32 value) {
  traffic_sign_refs_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.traffic_sign_refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lanelet::traffic_sign_refs() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.traffic_sign_refs)
  return traffic_sign_refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lanelet::mutable_traffic_sign_refs() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.traffic_sign_refs)
  return &traffic_sign_refs_;
}

// repeated uint32 traffic_light_refs = 15;
inline int Lanelet::traffic_light_refs_size() const {
  return traffic_light_refs_.size();
}
inline void Lanelet::clear_traffic_light_refs() {
  traffic_light_refs_.Clear();
}
inline ::google::protobuf::uint32 Lanelet::traffic_light_refs(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.Lanelet.traffic_light_refs)
  return traffic_light_refs_.Get(index);
}
inline void Lanelet::set_traffic_light_refs(int index, ::google::protobuf::uint32 value) {
  traffic_light_refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.Lanelet.traffic_light_refs)
}
inline void Lanelet::add_traffic_light_refs(::google::protobuf::uint32 value) {
  traffic_light_refs_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.Lanelet.traffic_light_refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lanelet::traffic_light_refs() const {
  // @@protoc_insertion_point(field_list:commonroad.Lanelet.traffic_light_refs)
  return traffic_light_refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lanelet::mutable_traffic_light_refs() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.Lanelet.traffic_light_refs)
  return &traffic_light_refs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::commonroad::LineMarkingEnum_LineMarking> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::LineMarkingEnum_LineMarking>() {
  return ::commonroad::LineMarkingEnum_LineMarking_descriptor();
}
template <> struct is_proto_enum< ::commonroad::DrivingDirEnum_DrivingDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::DrivingDirEnum_DrivingDir>() {
  return ::commonroad::DrivingDirEnum_DrivingDir_descriptor();
}
template <> struct is_proto_enum< ::commonroad::LaneletTypeEnum_LaneletType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::LaneletTypeEnum_LaneletType>() {
  return ::commonroad::LaneletTypeEnum_LaneletType_descriptor();
}
template <> struct is_proto_enum< ::commonroad::RoadUserEnum_RoadUser> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::RoadUserEnum_RoadUser>() {
  return ::commonroad::RoadUserEnum_RoadUser_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_lanelet_2eproto
