// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_problem.proto

#ifndef PROTOBUF_INCLUDED_planning_5fproblem_2eproto
#define PROTOBUF_INCLUDED_planning_5fproblem_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "obstacle.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fproblem_2eproto 

namespace protobuf_planning_5fproblem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planning_5fproblem_2eproto
namespace commonroad {
class GoalState;
class GoalStateDefaultTypeInternal;
extern GoalStateDefaultTypeInternal _GoalState_default_instance_;
class PlanningProblem;
class PlanningProblemDefaultTypeInternal;
extern PlanningProblemDefaultTypeInternal _PlanningProblem_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::GoalState* Arena::CreateMaybeMessage<::commonroad::GoalState>(Arena*);
template<> ::commonroad::PlanningProblem* Arena::CreateMaybeMessage<::commonroad::PlanningProblem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

// ===================================================================

class GoalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.GoalState) */ {
 public:
  GoalState();
  virtual ~GoalState();

  GoalState(const GoalState& from);

  inline GoalState& operator=(const GoalState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalState(GoalState&& from) noexcept
    : GoalState() {
    *this = ::std::move(from);
  }

  inline GoalState& operator=(GoalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalState* internal_default_instance() {
    return reinterpret_cast<const GoalState*>(
               &_GoalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GoalState* other);
  friend void swap(GoalState& a, GoalState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalState* New() const final {
    return CreateMaybeMessage<GoalState>(NULL);
  }

  GoalState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoalState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoalState& from);
  void MergeFrom(const GoalState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 goal_position_lanelets = 2;
  int goal_position_lanelets_size() const;
  void clear_goal_position_lanelets();
  static const int kGoalPositionLaneletsFieldNumber = 2;
  ::google::protobuf::uint32 goal_position_lanelets(int index) const;
  void set_goal_position_lanelets(int index, ::google::protobuf::uint32 value);
  void add_goal_position_lanelets(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      goal_position_lanelets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_goal_position_lanelets();

  // required .commonroad.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  private:
  const ::commonroad::State& _internal_state() const;
  public:
  const ::commonroad::State& state() const;
  ::commonroad::State* release_state();
  ::commonroad::State* mutable_state();
  void set_allocated_state(::commonroad::State* state);

  // @@protoc_insertion_point(class_scope:commonroad.GoalState)
 private:
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > goal_position_lanelets_;
  ::commonroad::State* state_;
  friend struct ::protobuf_planning_5fproblem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanningProblem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.PlanningProblem) */ {
 public:
  PlanningProblem();
  virtual ~PlanningProblem();

  PlanningProblem(const PlanningProblem& from);

  inline PlanningProblem& operator=(const PlanningProblem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanningProblem(PlanningProblem&& from) noexcept
    : PlanningProblem() {
    *this = ::std::move(from);
  }

  inline PlanningProblem& operator=(PlanningProblem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningProblem* internal_default_instance() {
    return reinterpret_cast<const PlanningProblem*>(
               &_PlanningProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlanningProblem* other);
  friend void swap(PlanningProblem& a, PlanningProblem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanningProblem* New() const final {
    return CreateMaybeMessage<PlanningProblem>(NULL);
  }

  PlanningProblem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanningProblem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanningProblem& from);
  void MergeFrom(const PlanningProblem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningProblem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.GoalState goal_states = 3;
  int goal_states_size() const;
  void clear_goal_states();
  static const int kGoalStatesFieldNumber = 3;
  ::commonroad::GoalState* mutable_goal_states(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::GoalState >*
      mutable_goal_states();
  const ::commonroad::GoalState& goal_states(int index) const;
  ::commonroad::GoalState* add_goal_states();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::GoalState >&
      goal_states() const;

  // required .commonroad.State initial_state = 2;
  bool has_initial_state() const;
  void clear_initial_state();
  static const int kInitialStateFieldNumber = 2;
  private:
  const ::commonroad::State& _internal_initial_state() const;
  public:
  const ::commonroad::State& initial_state() const;
  ::commonroad::State* release_initial_state();
  ::commonroad::State* mutable_initial_state();
  void set_allocated_initial_state(::commonroad::State* initial_state);

  // required uint32 planning_problem_id = 1;
  bool has_planning_problem_id() const;
  void clear_planning_problem_id();
  static const int kPlanningProblemIdFieldNumber = 1;
  ::google::protobuf::uint32 planning_problem_id() const;
  void set_planning_problem_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:commonroad.PlanningProblem)
 private:
  void set_has_planning_problem_id();
  void clear_has_planning_problem_id();
  void set_has_initial_state();
  void clear_has_initial_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::GoalState > goal_states_;
  ::commonroad::State* initial_state_;
  ::google::protobuf::uint32 planning_problem_id_;
  friend struct ::protobuf_planning_5fproblem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GoalState

// required .commonroad.State state = 1;
inline bool GoalState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoalState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoalState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::State& GoalState::_internal_state() const {
  return *state_;
}
inline const ::commonroad::State& GoalState::state() const {
  const ::commonroad::State* p = state_;
  // @@protoc_insertion_point(field_get:commonroad.GoalState.state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::State*>(
      &::commonroad::_State_default_instance_);
}
inline ::commonroad::State* GoalState::release_state() {
  // @@protoc_insertion_point(field_release:commonroad.GoalState.state)
  clear_has_state();
  ::commonroad::State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::commonroad::State* GoalState::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::State>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.GoalState.state)
  return state_;
}
inline void GoalState::set_allocated_state(::commonroad::State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.GoalState.state)
}

// repeated uint32 goal_position_lanelets = 2;
inline int GoalState::goal_position_lanelets_size() const {
  return goal_position_lanelets_.size();
}
inline void GoalState::clear_goal_position_lanelets() {
  goal_position_lanelets_.Clear();
}
inline ::google::protobuf::uint32 GoalState::goal_position_lanelets(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.GoalState.goal_position_lanelets)
  return goal_position_lanelets_.Get(index);
}
inline void GoalState::set_goal_position_lanelets(int index, ::google::protobuf::uint32 value) {
  goal_position_lanelets_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.GoalState.goal_position_lanelets)
}
inline void GoalState::add_goal_position_lanelets(::google::protobuf::uint32 value) {
  goal_position_lanelets_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.GoalState.goal_position_lanelets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GoalState::goal_position_lanelets() const {
  // @@protoc_insertion_point(field_list:commonroad.GoalState.goal_position_lanelets)
  return goal_position_lanelets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GoalState::mutable_goal_position_lanelets() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.GoalState.goal_position_lanelets)
  return &goal_position_lanelets_;
}

// -------------------------------------------------------------------

// PlanningProblem

// required uint32 planning_problem_id = 1;
inline bool PlanningProblem::has_planning_problem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningProblem::set_has_planning_problem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningProblem::clear_has_planning_problem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningProblem::clear_planning_problem_id() {
  planning_problem_id_ = 0u;
  clear_has_planning_problem_id();
}
inline ::google::protobuf::uint32 PlanningProblem::planning_problem_id() const {
  // @@protoc_insertion_point(field_get:commonroad.PlanningProblem.planning_problem_id)
  return planning_problem_id_;
}
inline void PlanningProblem::set_planning_problem_id(::google::protobuf::uint32 value) {
  set_has_planning_problem_id();
  planning_problem_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.PlanningProblem.planning_problem_id)
}

// required .commonroad.State initial_state = 2;
inline bool PlanningProblem::has_initial_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningProblem::set_has_initial_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningProblem::clear_has_initial_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::State& PlanningProblem::_internal_initial_state() const {
  return *initial_state_;
}
inline const ::commonroad::State& PlanningProblem::initial_state() const {
  const ::commonroad::State* p = initial_state_;
  // @@protoc_insertion_point(field_get:commonroad.PlanningProblem.initial_state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::State*>(
      &::commonroad::_State_default_instance_);
}
inline ::commonroad::State* PlanningProblem::release_initial_state() {
  // @@protoc_insertion_point(field_release:commonroad.PlanningProblem.initial_state)
  clear_has_initial_state();
  ::commonroad::State* temp = initial_state_;
  initial_state_ = NULL;
  return temp;
}
inline ::commonroad::State* PlanningProblem::mutable_initial_state() {
  set_has_initial_state();
  if (initial_state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::State>(GetArenaNoVirtual());
    initial_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.PlanningProblem.initial_state)
  return initial_state_;
}
inline void PlanningProblem::set_allocated_initial_state(::commonroad::State* initial_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(initial_state_);
  }
  if (initial_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initial_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initial_state, submessage_arena);
    }
    set_has_initial_state();
  } else {
    clear_has_initial_state();
  }
  initial_state_ = initial_state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.PlanningProblem.initial_state)
}

// repeated .commonroad.GoalState goal_states = 3;
inline int PlanningProblem::goal_states_size() const {
  return goal_states_.size();
}
inline void PlanningProblem::clear_goal_states() {
  goal_states_.Clear();
}
inline ::commonroad::GoalState* PlanningProblem::mutable_goal_states(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.PlanningProblem.goal_states)
  return goal_states_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::GoalState >*
PlanningProblem::mutable_goal_states() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.PlanningProblem.goal_states)
  return &goal_states_;
}
inline const ::commonroad::GoalState& PlanningProblem::goal_states(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.PlanningProblem.goal_states)
  return goal_states_.Get(index);
}
inline ::commonroad::GoalState* PlanningProblem::add_goal_states() {
  // @@protoc_insertion_point(field_add:commonroad.PlanningProblem.goal_states)
  return goal_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::GoalState >&
PlanningProblem::goal_states() const {
  // @@protoc_insertion_point(field_list:commonroad.PlanningProblem.goal_states)
  return goal_states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planning_5fproblem_2eproto
