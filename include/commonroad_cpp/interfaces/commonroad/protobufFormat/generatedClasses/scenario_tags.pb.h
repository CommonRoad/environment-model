// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario_tags.proto

#ifndef PROTOBUF_INCLUDED_scenario_5ftags_2eproto
#define PROTOBUF_INCLUDED_scenario_5ftags_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_scenario_5ftags_2eproto 

namespace protobuf_scenario_5ftags_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_scenario_5ftags_2eproto
namespace commonroad {
class ScenarioTags;
class ScenarioTagsDefaultTypeInternal;
extern ScenarioTagsDefaultTypeInternal _ScenarioTags_default_instance_;
class TagEnum;
class TagEnumDefaultTypeInternal;
extern TagEnumDefaultTypeInternal _TagEnum_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::ScenarioTags* Arena::CreateMaybeMessage<::commonroad::ScenarioTags>(Arena*);
template<> ::commonroad::TagEnum* Arena::CreateMaybeMessage<::commonroad::TagEnum>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

enum TagEnum_Tag {
  TagEnum_Tag_INTERSTATE = 0,
  TagEnum_Tag_URBAN = 1,
  TagEnum_Tag_HIGHWAY = 2,
  TagEnum_Tag_COMFORT = 3,
  TagEnum_Tag_CRITICAL = 4,
  TagEnum_Tag_EVASIVE = 5,
  TagEnum_Tag_CUT_IN = 6,
  TagEnum_Tag_ILLEGAL_CUTIN = 7,
  TagEnum_Tag_INTERSECTION = 8,
  TagEnum_Tag_LANE_CHANGE = 9,
  TagEnum_Tag_LANE_FOLLOWING = 10,
  TagEnum_Tag_MERGING_LANES = 11,
  TagEnum_Tag_MULTI_LANE = 12,
  TagEnum_Tag_ONCOMING_TRAFFIC = 13,
  TagEnum_Tag_NO_ONCOMING_TRAFFIC = 14,
  TagEnum_Tag_PARALLEL_LANES = 15,
  TagEnum_Tag_RACE_TRACK = 16,
  TagEnum_Tag_ROUNDABOUT = 17,
  TagEnum_Tag_RURAL = 18,
  TagEnum_Tag_SIMULATED = 19,
  TagEnum_Tag_SINGLE_LANE = 20,
  TagEnum_Tag_SLIP_ROAD = 21,
  TagEnum_Tag_SPEED_LIMIT = 22,
  TagEnum_Tag_TRAFFIC_JAM = 23,
  TagEnum_Tag_TURN_LEFT = 24,
  TagEnum_Tag_TURN_RIGHT = 25,
  TagEnum_Tag_TWO_LANE = 26,
  TagEnum_Tag_EMERGENCY_BRAKING = 27
};
bool TagEnum_Tag_IsValid(int value);
const TagEnum_Tag TagEnum_Tag_Tag_MIN = TagEnum_Tag_INTERSTATE;
const TagEnum_Tag TagEnum_Tag_Tag_MAX = TagEnum_Tag_EMERGENCY_BRAKING;
const int TagEnum_Tag_Tag_ARRAYSIZE = TagEnum_Tag_Tag_MAX + 1;

const ::google::protobuf::EnumDescriptor* TagEnum_Tag_descriptor();
inline const ::std::string& TagEnum_Tag_Name(TagEnum_Tag value) {
  return ::google::protobuf::internal::NameOfEnum(
    TagEnum_Tag_descriptor(), value);
}
inline bool TagEnum_Tag_Parse(
    const ::std::string& name, TagEnum_Tag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TagEnum_Tag>(
    TagEnum_Tag_descriptor(), name, value);
}
// ===================================================================

class TagEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TagEnum) */ {
 public:
  TagEnum();
  virtual ~TagEnum();

  TagEnum(const TagEnum& from);

  inline TagEnum& operator=(const TagEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TagEnum(TagEnum&& from) noexcept
    : TagEnum() {
    *this = ::std::move(from);
  }

  inline TagEnum& operator=(TagEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagEnum* internal_default_instance() {
    return reinterpret_cast<const TagEnum*>(
               &_TagEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TagEnum* other);
  friend void swap(TagEnum& a, TagEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TagEnum* New() const final {
    return CreateMaybeMessage<TagEnum>(NULL);
  }

  TagEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TagEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TagEnum& from);
  void MergeFrom(const TagEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TagEnum_Tag Tag;
  static const Tag INTERSTATE =
    TagEnum_Tag_INTERSTATE;
  static const Tag URBAN =
    TagEnum_Tag_URBAN;
  static const Tag HIGHWAY =
    TagEnum_Tag_HIGHWAY;
  static const Tag COMFORT =
    TagEnum_Tag_COMFORT;
  static const Tag CRITICAL =
    TagEnum_Tag_CRITICAL;
  static const Tag EVASIVE =
    TagEnum_Tag_EVASIVE;
  static const Tag CUT_IN =
    TagEnum_Tag_CUT_IN;
  static const Tag ILLEGAL_CUTIN =
    TagEnum_Tag_ILLEGAL_CUTIN;
  static const Tag INTERSECTION =
    TagEnum_Tag_INTERSECTION;
  static const Tag LANE_CHANGE =
    TagEnum_Tag_LANE_CHANGE;
  static const Tag LANE_FOLLOWING =
    TagEnum_Tag_LANE_FOLLOWING;
  static const Tag MERGING_LANES =
    TagEnum_Tag_MERGING_LANES;
  static const Tag MULTI_LANE =
    TagEnum_Tag_MULTI_LANE;
  static const Tag ONCOMING_TRAFFIC =
    TagEnum_Tag_ONCOMING_TRAFFIC;
  static const Tag NO_ONCOMING_TRAFFIC =
    TagEnum_Tag_NO_ONCOMING_TRAFFIC;
  static const Tag PARALLEL_LANES =
    TagEnum_Tag_PARALLEL_LANES;
  static const Tag RACE_TRACK =
    TagEnum_Tag_RACE_TRACK;
  static const Tag ROUNDABOUT =
    TagEnum_Tag_ROUNDABOUT;
  static const Tag RURAL =
    TagEnum_Tag_RURAL;
  static const Tag SIMULATED =
    TagEnum_Tag_SIMULATED;
  static const Tag SINGLE_LANE =
    TagEnum_Tag_SINGLE_LANE;
  static const Tag SLIP_ROAD =
    TagEnum_Tag_SLIP_ROAD;
  static const Tag SPEED_LIMIT =
    TagEnum_Tag_SPEED_LIMIT;
  static const Tag TRAFFIC_JAM =
    TagEnum_Tag_TRAFFIC_JAM;
  static const Tag TURN_LEFT =
    TagEnum_Tag_TURN_LEFT;
  static const Tag TURN_RIGHT =
    TagEnum_Tag_TURN_RIGHT;
  static const Tag TWO_LANE =
    TagEnum_Tag_TWO_LANE;
  static const Tag EMERGENCY_BRAKING =
    TagEnum_Tag_EMERGENCY_BRAKING;
  static inline bool Tag_IsValid(int value) {
    return TagEnum_Tag_IsValid(value);
  }
  static const Tag Tag_MIN =
    TagEnum_Tag_Tag_MIN;
  static const Tag Tag_MAX =
    TagEnum_Tag_Tag_MAX;
  static const int Tag_ARRAYSIZE =
    TagEnum_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tag_descriptor() {
    return TagEnum_Tag_descriptor();
  }
  static inline const ::std::string& Tag_Name(Tag value) {
    return TagEnum_Tag_Name(value);
  }
  static inline bool Tag_Parse(const ::std::string& name,
      Tag* value) {
    return TagEnum_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TagEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_scenario_5ftags_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenarioTags : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.ScenarioTags) */ {
 public:
  ScenarioTags();
  virtual ~ScenarioTags();

  ScenarioTags(const ScenarioTags& from);

  inline ScenarioTags& operator=(const ScenarioTags& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenarioTags(ScenarioTags&& from) noexcept
    : ScenarioTags() {
    *this = ::std::move(from);
  }

  inline ScenarioTags& operator=(ScenarioTags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenarioTags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioTags* internal_default_instance() {
    return reinterpret_cast<const ScenarioTags*>(
               &_ScenarioTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScenarioTags* other);
  friend void swap(ScenarioTags& a, ScenarioTags& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenarioTags* New() const final {
    return CreateMaybeMessage<ScenarioTags>(NULL);
  }

  ScenarioTags* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioTags>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScenarioTags& from);
  void MergeFrom(const ScenarioTags& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioTags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.TagEnum.Tag tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  ::commonroad::TagEnum_Tag tags(int index) const;
  void set_tags(int index, ::commonroad::TagEnum_Tag value);
  void add_tags(::commonroad::TagEnum_Tag value);
  const ::google::protobuf::RepeatedField<int>& tags() const;
  ::google::protobuf::RepeatedField<int>* mutable_tags();

  // @@protoc_insertion_point(class_scope:commonroad.ScenarioTags)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> tags_;
  friend struct ::protobuf_scenario_5ftags_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TagEnum

// -------------------------------------------------------------------

// ScenarioTags

// repeated .commonroad.TagEnum.Tag tags = 1;
inline int ScenarioTags::tags_size() const {
  return tags_.size();
}
inline void ScenarioTags::clear_tags() {
  tags_.Clear();
}
inline ::commonroad::TagEnum_Tag ScenarioTags::tags(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.ScenarioTags.tags)
  return static_cast< ::commonroad::TagEnum_Tag >(tags_.Get(index));
}
inline void ScenarioTags::set_tags(int index, ::commonroad::TagEnum_Tag value) {
  assert(::commonroad::TagEnum_Tag_IsValid(value));
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.ScenarioTags.tags)
}
inline void ScenarioTags::add_tags(::commonroad::TagEnum_Tag value) {
  assert(::commonroad::TagEnum_Tag_IsValid(value));
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.ScenarioTags.tags)
}
inline const ::google::protobuf::RepeatedField<int>&
ScenarioTags::tags() const {
  // @@protoc_insertion_point(field_list:commonroad.ScenarioTags.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedField<int>*
ScenarioTags::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.ScenarioTags.tags)
  return &tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::commonroad::TagEnum_Tag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TagEnum_Tag>() {
  return ::commonroad::TagEnum_Tag_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_scenario_5ftags_2eproto
