// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: static_obstacle.proto

#ifndef PROTOBUF_INCLUDED_static_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_static_5fobstacle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "obstacle.pb.h"
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_static_5fobstacle_2eproto 

namespace protobuf_static_5fobstacle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_static_5fobstacle_2eproto
namespace commonroad {
class StaticObstacle;
class StaticObstacleDefaultTypeInternal;
extern StaticObstacleDefaultTypeInternal _StaticObstacle_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::StaticObstacle* Arena::CreateMaybeMessage<::commonroad::StaticObstacle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

// ===================================================================

class StaticObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.StaticObstacle) */ {
 public:
  StaticObstacle();
  virtual ~StaticObstacle();

  StaticObstacle(const StaticObstacle& from);

  inline StaticObstacle& operator=(const StaticObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObstacle(StaticObstacle&& from) noexcept
    : StaticObstacle() {
    *this = ::std::move(from);
  }

  inline StaticObstacle& operator=(StaticObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObstacle* internal_default_instance() {
    return reinterpret_cast<const StaticObstacle*>(
               &_StaticObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StaticObstacle* other);
  friend void swap(StaticObstacle& a, StaticObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObstacle* New() const final {
    return CreateMaybeMessage<StaticObstacle>(NULL);
  }

  StaticObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObstacle& from);
  void MergeFrom(const StaticObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.SignalState signal_series = 6;
  int signal_series_size() const;
  void clear_signal_series();
  static const int kSignalSeriesFieldNumber = 6;
  ::commonroad::SignalState* mutable_signal_series(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >*
      mutable_signal_series();
  const ::commonroad::SignalState& signal_series(int index) const;
  ::commonroad::SignalState* add_signal_series();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >&
      signal_series() const;

  // required .commonroad.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  private:
  const ::commonroad::Shape& _internal_shape() const;
  public:
  const ::commonroad::Shape& shape() const;
  ::commonroad::Shape* release_shape();
  ::commonroad::Shape* mutable_shape();
  void set_allocated_shape(::commonroad::Shape* shape);

  // required .commonroad.State initial_state = 4;
  bool has_initial_state() const;
  void clear_initial_state();
  static const int kInitialStateFieldNumber = 4;
  private:
  const ::commonroad::State& _internal_initial_state() const;
  public:
  const ::commonroad::State& initial_state() const;
  ::commonroad::State* release_initial_state();
  ::commonroad::State* mutable_initial_state();
  void set_allocated_initial_state(::commonroad::State* initial_state);

  // optional .commonroad.SignalState initial_signal_state = 5;
  bool has_initial_signal_state() const;
  void clear_initial_signal_state();
  static const int kInitialSignalStateFieldNumber = 5;
  private:
  const ::commonroad::SignalState& _internal_initial_signal_state() const;
  public:
  const ::commonroad::SignalState& initial_signal_state() const;
  ::commonroad::SignalState* release_initial_signal_state();
  ::commonroad::SignalState* mutable_initial_signal_state();
  void set_allocated_initial_signal_state(::commonroad::SignalState* initial_signal_state);

  // required uint32 static_obstacle_id = 1;
  bool has_static_obstacle_id() const;
  void clear_static_obstacle_id();
  static const int kStaticObstacleIdFieldNumber = 1;
  ::google::protobuf::uint32 static_obstacle_id() const;
  void set_static_obstacle_id(::google::protobuf::uint32 value);

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  bool has_obstacle_type() const;
  void clear_obstacle_type();
  static const int kObstacleTypeFieldNumber = 2;
  ::commonroad::ObstacleTypeEnum_ObstacleType obstacle_type() const;
  void set_obstacle_type(::commonroad::ObstacleTypeEnum_ObstacleType value);

  // @@protoc_insertion_point(class_scope:commonroad.StaticObstacle)
 private:
  void set_has_static_obstacle_id();
  void clear_has_static_obstacle_id();
  void set_has_obstacle_type();
  void clear_has_obstacle_type();
  void set_has_shape();
  void clear_has_shape();
  void set_has_initial_state();
  void clear_has_initial_state();
  void set_has_initial_signal_state();
  void clear_has_initial_signal_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState > signal_series_;
  ::commonroad::Shape* shape_;
  ::commonroad::State* initial_state_;
  ::commonroad::SignalState* initial_signal_state_;
  ::google::protobuf::uint32 static_obstacle_id_;
  int obstacle_type_;
  friend struct ::protobuf_static_5fobstacle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StaticObstacle

// required uint32 static_obstacle_id = 1;
inline bool StaticObstacle::has_static_obstacle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StaticObstacle::set_has_static_obstacle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StaticObstacle::clear_has_static_obstacle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StaticObstacle::clear_static_obstacle_id() {
  static_obstacle_id_ = 0u;
  clear_has_static_obstacle_id();
}
inline ::google::protobuf::uint32 StaticObstacle::static_obstacle_id() const {
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.static_obstacle_id)
  return static_obstacle_id_;
}
inline void StaticObstacle::set_static_obstacle_id(::google::protobuf::uint32 value) {
  set_has_static_obstacle_id();
  static_obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.StaticObstacle.static_obstacle_id)
}

// required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
inline bool StaticObstacle::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StaticObstacle::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StaticObstacle::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StaticObstacle::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
inline ::commonroad::ObstacleTypeEnum_ObstacleType StaticObstacle::obstacle_type() const {
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.obstacle_type)
  return static_cast< ::commonroad::ObstacleTypeEnum_ObstacleType >(obstacle_type_);
}
inline void StaticObstacle::set_obstacle_type(::commonroad::ObstacleTypeEnum_ObstacleType value) {
  assert(::commonroad::ObstacleTypeEnum_ObstacleType_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:commonroad.StaticObstacle.obstacle_type)
}

// required .commonroad.Shape shape = 3;
inline bool StaticObstacle::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticObstacle::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticObstacle::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::Shape& StaticObstacle::_internal_shape() const {
  return *shape_;
}
inline const ::commonroad::Shape& StaticObstacle::shape() const {
  const ::commonroad::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Shape*>(
      &::commonroad::_Shape_default_instance_);
}
inline ::commonroad::Shape* StaticObstacle::release_shape() {
  // @@protoc_insertion_point(field_release:commonroad.StaticObstacle.shape)
  clear_has_shape();
  ::commonroad::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::commonroad::Shape* StaticObstacle::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.StaticObstacle.shape)
  return shape_;
}
inline void StaticObstacle::set_allocated_shape(::commonroad::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:commonroad.StaticObstacle.shape)
}

// required .commonroad.State initial_state = 4;
inline bool StaticObstacle::has_initial_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticObstacle::set_has_initial_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticObstacle::clear_has_initial_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::commonroad::State& StaticObstacle::_internal_initial_state() const {
  return *initial_state_;
}
inline const ::commonroad::State& StaticObstacle::initial_state() const {
  const ::commonroad::State* p = initial_state_;
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.initial_state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::State*>(
      &::commonroad::_State_default_instance_);
}
inline ::commonroad::State* StaticObstacle::release_initial_state() {
  // @@protoc_insertion_point(field_release:commonroad.StaticObstacle.initial_state)
  clear_has_initial_state();
  ::commonroad::State* temp = initial_state_;
  initial_state_ = NULL;
  return temp;
}
inline ::commonroad::State* StaticObstacle::mutable_initial_state() {
  set_has_initial_state();
  if (initial_state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::State>(GetArenaNoVirtual());
    initial_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.StaticObstacle.initial_state)
  return initial_state_;
}
inline void StaticObstacle::set_allocated_initial_state(::commonroad::State* initial_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(initial_state_);
  }
  if (initial_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initial_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initial_state, submessage_arena);
    }
    set_has_initial_state();
  } else {
    clear_has_initial_state();
  }
  initial_state_ = initial_state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.StaticObstacle.initial_state)
}

// optional .commonroad.SignalState initial_signal_state = 5;
inline bool StaticObstacle::has_initial_signal_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StaticObstacle::set_has_initial_signal_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StaticObstacle::clear_has_initial_signal_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::commonroad::SignalState& StaticObstacle::_internal_initial_signal_state() const {
  return *initial_signal_state_;
}
inline const ::commonroad::SignalState& StaticObstacle::initial_signal_state() const {
  const ::commonroad::SignalState* p = initial_signal_state_;
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.initial_signal_state)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::SignalState*>(
      &::commonroad::_SignalState_default_instance_);
}
inline ::commonroad::SignalState* StaticObstacle::release_initial_signal_state() {
  // @@protoc_insertion_point(field_release:commonroad.StaticObstacle.initial_signal_state)
  clear_has_initial_signal_state();
  ::commonroad::SignalState* temp = initial_signal_state_;
  initial_signal_state_ = NULL;
  return temp;
}
inline ::commonroad::SignalState* StaticObstacle::mutable_initial_signal_state() {
  set_has_initial_signal_state();
  if (initial_signal_state_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::SignalState>(GetArenaNoVirtual());
    initial_signal_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.StaticObstacle.initial_signal_state)
  return initial_signal_state_;
}
inline void StaticObstacle::set_allocated_initial_signal_state(::commonroad::SignalState* initial_signal_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(initial_signal_state_);
  }
  if (initial_signal_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initial_signal_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initial_signal_state, submessage_arena);
    }
    set_has_initial_signal_state();
  } else {
    clear_has_initial_signal_state();
  }
  initial_signal_state_ = initial_signal_state;
  // @@protoc_insertion_point(field_set_allocated:commonroad.StaticObstacle.initial_signal_state)
}

// repeated .commonroad.SignalState signal_series = 6;
inline int StaticObstacle::signal_series_size() const {
  return signal_series_.size();
}
inline ::commonroad::SignalState* StaticObstacle::mutable_signal_series(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.StaticObstacle.signal_series)
  return signal_series_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >*
StaticObstacle::mutable_signal_series() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.StaticObstacle.signal_series)
  return &signal_series_;
}
inline const ::commonroad::SignalState& StaticObstacle::signal_series(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.StaticObstacle.signal_series)
  return signal_series_.Get(index);
}
inline ::commonroad::SignalState* StaticObstacle::add_signal_series() {
  // @@protoc_insertion_point(field_add:commonroad.StaticObstacle.signal_series)
  return signal_series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::SignalState >&
StaticObstacle::signal_series() const {
  // @@protoc_insertion_point(field_list:commonroad.StaticObstacle.signal_series)
  return signal_series_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_static_5fobstacle_2eproto
