// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#ifndef PROTOBUF_INCLUDED_traffic_5flight_2eproto
#define PROTOBUF_INCLUDED_traffic_5flight_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5flight_2eproto 

namespace protobuf_traffic_5flight_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_traffic_5flight_2eproto
namespace commonroad {
class CycleElement;
class CycleElementDefaultTypeInternal;
extern CycleElementDefaultTypeInternal _CycleElement_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightDirectionEnum;
class TrafficLightDirectionEnumDefaultTypeInternal;
extern TrafficLightDirectionEnumDefaultTypeInternal _TrafficLightDirectionEnum_default_instance_;
class TrafficLightStateEnum;
class TrafficLightStateEnumDefaultTypeInternal;
extern TrafficLightStateEnumDefaultTypeInternal _TrafficLightStateEnum_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::CycleElement* Arena::CreateMaybeMessage<::commonroad::CycleElement>(Arena*);
template<> ::commonroad::TrafficLight* Arena::CreateMaybeMessage<::commonroad::TrafficLight>(Arena*);
template<> ::commonroad::TrafficLightDirectionEnum* Arena::CreateMaybeMessage<::commonroad::TrafficLightDirectionEnum>(Arena*);
template<> ::commonroad::TrafficLightStateEnum* Arena::CreateMaybeMessage<::commonroad::TrafficLightStateEnum>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

enum TrafficLightStateEnum_TrafficLightState {
  TrafficLightStateEnum_TrafficLightState_RED = 0,
  TrafficLightStateEnum_TrafficLightState_RED_YELLOW = 1,
  TrafficLightStateEnum_TrafficLightState_GREEN = 2,
  TrafficLightStateEnum_TrafficLightState_YELLOW = 3,
  TrafficLightStateEnum_TrafficLightState_INACTIVE = 4
};
bool TrafficLightStateEnum_TrafficLightState_IsValid(int value);
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum_TrafficLightState_TrafficLightState_MIN = TrafficLightStateEnum_TrafficLightState_RED;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum_TrafficLightState_TrafficLightState_MAX = TrafficLightStateEnum_TrafficLightState_INACTIVE;
const int TrafficLightStateEnum_TrafficLightState_TrafficLightState_ARRAYSIZE = TrafficLightStateEnum_TrafficLightState_TrafficLightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightStateEnum_TrafficLightState_descriptor();
inline const ::std::string& TrafficLightStateEnum_TrafficLightState_Name(TrafficLightStateEnum_TrafficLightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightStateEnum_TrafficLightState_descriptor(), value);
}
inline bool TrafficLightStateEnum_TrafficLightState_Parse(
    const ::std::string& name, TrafficLightStateEnum_TrafficLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightStateEnum_TrafficLightState>(
    TrafficLightStateEnum_TrafficLightState_descriptor(), name, value);
}
enum TrafficLightDirectionEnum_TrafficLightDirection {
  TrafficLightDirectionEnum_TrafficLightDirection_RIGHT = 0,
  TrafficLightDirectionEnum_TrafficLightDirection_STRAIGHT = 1,
  TrafficLightDirectionEnum_TrafficLightDirection_LEFT = 2,
  TrafficLightDirectionEnum_TrafficLightDirection_LEFT_STRAIGHT = 3,
  TrafficLightDirectionEnum_TrafficLightDirection_STRAIGHT_RIGHT = 4,
  TrafficLightDirectionEnum_TrafficLightDirection_LEFT_RIGHT = 5,
  TrafficLightDirectionEnum_TrafficLightDirection_ALL = 6
};
bool TrafficLightDirectionEnum_TrafficLightDirection_IsValid(int value);
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_MIN = TrafficLightDirectionEnum_TrafficLightDirection_RIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_MAX = TrafficLightDirectionEnum_TrafficLightDirection_ALL;
const int TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_ARRAYSIZE = TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightDirectionEnum_TrafficLightDirection_descriptor();
inline const ::std::string& TrafficLightDirectionEnum_TrafficLightDirection_Name(TrafficLightDirectionEnum_TrafficLightDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightDirectionEnum_TrafficLightDirection_descriptor(), value);
}
inline bool TrafficLightDirectionEnum_TrafficLightDirection_Parse(
    const ::std::string& name, TrafficLightDirectionEnum_TrafficLightDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightDirectionEnum_TrafficLightDirection>(
    TrafficLightDirectionEnum_TrafficLightDirection_descriptor(), name, value);
}
// ===================================================================

class TrafficLightStateEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficLightStateEnum) */ {
 public:
  TrafficLightStateEnum();
  virtual ~TrafficLightStateEnum();

  TrafficLightStateEnum(const TrafficLightStateEnum& from);

  inline TrafficLightStateEnum& operator=(const TrafficLightStateEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightStateEnum(TrafficLightStateEnum&& from) noexcept
    : TrafficLightStateEnum() {
    *this = ::std::move(from);
  }

  inline TrafficLightStateEnum& operator=(TrafficLightStateEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightStateEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightStateEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficLightStateEnum*>(
               &_TrafficLightStateEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrafficLightStateEnum* other);
  friend void swap(TrafficLightStateEnum& a, TrafficLightStateEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightStateEnum* New() const final {
    return CreateMaybeMessage<TrafficLightStateEnum>(NULL);
  }

  TrafficLightStateEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightStateEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficLightStateEnum& from);
  void MergeFrom(const TrafficLightStateEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightStateEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficLightStateEnum_TrafficLightState TrafficLightState;
  static const TrafficLightState RED =
    TrafficLightStateEnum_TrafficLightState_RED;
  static const TrafficLightState RED_YELLOW =
    TrafficLightStateEnum_TrafficLightState_RED_YELLOW;
  static const TrafficLightState GREEN =
    TrafficLightStateEnum_TrafficLightState_GREEN;
  static const TrafficLightState YELLOW =
    TrafficLightStateEnum_TrafficLightState_YELLOW;
  static const TrafficLightState INACTIVE =
    TrafficLightStateEnum_TrafficLightState_INACTIVE;
  static inline bool TrafficLightState_IsValid(int value) {
    return TrafficLightStateEnum_TrafficLightState_IsValid(value);
  }
  static const TrafficLightState TrafficLightState_MIN =
    TrafficLightStateEnum_TrafficLightState_TrafficLightState_MIN;
  static const TrafficLightState TrafficLightState_MAX =
    TrafficLightStateEnum_TrafficLightState_TrafficLightState_MAX;
  static const int TrafficLightState_ARRAYSIZE =
    TrafficLightStateEnum_TrafficLightState_TrafficLightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightState_descriptor() {
    return TrafficLightStateEnum_TrafficLightState_descriptor();
  }
  static inline const ::std::string& TrafficLightState_Name(TrafficLightState value) {
    return TrafficLightStateEnum_TrafficLightState_Name(value);
  }
  static inline bool TrafficLightState_Parse(const ::std::string& name,
      TrafficLightState* value) {
    return TrafficLightStateEnum_TrafficLightState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficLightStateEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5flight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficLightDirectionEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficLightDirectionEnum) */ {
 public:
  TrafficLightDirectionEnum();
  virtual ~TrafficLightDirectionEnum();

  TrafficLightDirectionEnum(const TrafficLightDirectionEnum& from);

  inline TrafficLightDirectionEnum& operator=(const TrafficLightDirectionEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightDirectionEnum(TrafficLightDirectionEnum&& from) noexcept
    : TrafficLightDirectionEnum() {
    *this = ::std::move(from);
  }

  inline TrafficLightDirectionEnum& operator=(TrafficLightDirectionEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightDirectionEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightDirectionEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficLightDirectionEnum*>(
               &_TrafficLightDirectionEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrafficLightDirectionEnum* other);
  friend void swap(TrafficLightDirectionEnum& a, TrafficLightDirectionEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightDirectionEnum* New() const final {
    return CreateMaybeMessage<TrafficLightDirectionEnum>(NULL);
  }

  TrafficLightDirectionEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightDirectionEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficLightDirectionEnum& from);
  void MergeFrom(const TrafficLightDirectionEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightDirectionEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirection;
  static const TrafficLightDirection RIGHT =
    TrafficLightDirectionEnum_TrafficLightDirection_RIGHT;
  static const TrafficLightDirection STRAIGHT =
    TrafficLightDirectionEnum_TrafficLightDirection_STRAIGHT;
  static const TrafficLightDirection LEFT =
    TrafficLightDirectionEnum_TrafficLightDirection_LEFT;
  static const TrafficLightDirection LEFT_STRAIGHT =
    TrafficLightDirectionEnum_TrafficLightDirection_LEFT_STRAIGHT;
  static const TrafficLightDirection STRAIGHT_RIGHT =
    TrafficLightDirectionEnum_TrafficLightDirection_STRAIGHT_RIGHT;
  static const TrafficLightDirection LEFT_RIGHT =
    TrafficLightDirectionEnum_TrafficLightDirection_LEFT_RIGHT;
  static const TrafficLightDirection ALL =
    TrafficLightDirectionEnum_TrafficLightDirection_ALL;
  static inline bool TrafficLightDirection_IsValid(int value) {
    return TrafficLightDirectionEnum_TrafficLightDirection_IsValid(value);
  }
  static const TrafficLightDirection TrafficLightDirection_MIN =
    TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_MIN;
  static const TrafficLightDirection TrafficLightDirection_MAX =
    TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_MAX;
  static const int TrafficLightDirection_ARRAYSIZE =
    TrafficLightDirectionEnum_TrafficLightDirection_TrafficLightDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightDirection_descriptor() {
    return TrafficLightDirectionEnum_TrafficLightDirection_descriptor();
  }
  static inline const ::std::string& TrafficLightDirection_Name(TrafficLightDirection value) {
    return TrafficLightDirectionEnum_TrafficLightDirection_Name(value);
  }
  static inline bool TrafficLightDirection_Parse(const ::std::string& name,
      TrafficLightDirection* value) {
    return TrafficLightDirectionEnum_TrafficLightDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficLightDirectionEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5flight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CycleElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.CycleElement) */ {
 public:
  CycleElement();
  virtual ~CycleElement();

  CycleElement(const CycleElement& from);

  inline CycleElement& operator=(const CycleElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CycleElement(CycleElement&& from) noexcept
    : CycleElement() {
    *this = ::std::move(from);
  }

  inline CycleElement& operator=(CycleElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CycleElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleElement* internal_default_instance() {
    return reinterpret_cast<const CycleElement*>(
               &_CycleElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CycleElement* other);
  friend void swap(CycleElement& a, CycleElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CycleElement* New() const final {
    return CreateMaybeMessage<CycleElement>(NULL);
  }

  CycleElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CycleElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CycleElement& from);
  void MergeFrom(const CycleElement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::commonroad::TrafficLightStateEnum_TrafficLightState color() const;
  void set_color(::commonroad::TrafficLightStateEnum_TrafficLightState value);

  // @@protoc_insertion_point(class_scope:commonroad.CycleElement)
 private:
  void set_has_duration();
  void clear_has_duration();
  void set_has_color();
  void clear_has_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 duration_;
  int color_;
  friend struct ::protobuf_traffic_5flight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TrafficLight* other);
  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(NULL);
  }

  TrafficLight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.CycleElement cycle_elements = 2;
  int cycle_elements_size() const;
  void clear_cycle_elements();
  static const int kCycleElementsFieldNumber = 2;
  ::commonroad::CycleElement* mutable_cycle_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::CycleElement >*
      mutable_cycle_elements();
  const ::commonroad::CycleElement& cycle_elements(int index) const;
  ::commonroad::CycleElement* add_cycle_elements();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::CycleElement >&
      cycle_elements() const;

  // optional .commonroad.Point position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::commonroad::Point& _internal_position() const;
  public:
  const ::commonroad::Point& position() const;
  ::commonroad::Point* release_position();
  ::commonroad::Point* mutable_position();
  void set_allocated_position(::commonroad::Point* position);

  // required uint32 traffic_light_id = 1;
  bool has_traffic_light_id() const;
  void clear_traffic_light_id();
  static const int kTrafficLightIdFieldNumber = 1;
  ::google::protobuf::uint32 traffic_light_id() const;
  void set_traffic_light_id(::google::protobuf::uint32 value);

  // optional uint32 time_offset = 4;
  bool has_time_offset() const;
  void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 4;
  ::google::protobuf::uint32 time_offset() const;
  void set_time_offset(::google::protobuf::uint32 value);

  // optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection direction() const;
  void set_direction(::commonroad::TrafficLightDirectionEnum_TrafficLightDirection value);

  // optional bool active = 6;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 6;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:commonroad.TrafficLight)
 private:
  void set_has_traffic_light_id();
  void clear_has_traffic_light_id();
  void set_has_position();
  void clear_has_position();
  void set_has_time_offset();
  void clear_has_time_offset();
  void set_has_direction();
  void clear_has_direction();
  void set_has_active();
  void clear_has_active();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::CycleElement > cycle_elements_;
  ::commonroad::Point* position_;
  ::google::protobuf::uint32 traffic_light_id_;
  ::google::protobuf::uint32 time_offset_;
  int direction_;
  bool active_;
  friend struct ::protobuf_traffic_5flight_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLightStateEnum

// -------------------------------------------------------------------

// TrafficLightDirectionEnum

// -------------------------------------------------------------------

// CycleElement

// required uint32 duration = 1;
inline bool CycleElement::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CycleElement::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CycleElement::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CycleElement::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CycleElement::duration() const {
  // @@protoc_insertion_point(field_get:commonroad.CycleElement.duration)
  return duration_;
}
inline void CycleElement::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:commonroad.CycleElement.duration)
}

// required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
inline bool CycleElement::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CycleElement::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CycleElement::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CycleElement::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::commonroad::TrafficLightStateEnum_TrafficLightState CycleElement::color() const {
  // @@protoc_insertion_point(field_get:commonroad.CycleElement.color)
  return static_cast< ::commonroad::TrafficLightStateEnum_TrafficLightState >(color_);
}
inline void CycleElement::set_color(::commonroad::TrafficLightStateEnum_TrafficLightState value) {
  assert(::commonroad::TrafficLightStateEnum_TrafficLightState_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:commonroad.CycleElement.color)
}

// -------------------------------------------------------------------

// TrafficLight

// required uint32 traffic_light_id = 1;
inline bool TrafficLight::has_traffic_light_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight::set_has_traffic_light_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLight::clear_has_traffic_light_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLight::clear_traffic_light_id() {
  traffic_light_id_ = 0u;
  clear_has_traffic_light_id();
}
inline ::google::protobuf::uint32 TrafficLight::traffic_light_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.traffic_light_id)
  return traffic_light_id_;
}
inline void TrafficLight::set_traffic_light_id(::google::protobuf::uint32 value) {
  set_has_traffic_light_id();
  traffic_light_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficLight.traffic_light_id)
}

// repeated .commonroad.CycleElement cycle_elements = 2;
inline int TrafficLight::cycle_elements_size() const {
  return cycle_elements_.size();
}
inline void TrafficLight::clear_cycle_elements() {
  cycle_elements_.Clear();
}
inline ::commonroad::CycleElement* TrafficLight::mutable_cycle_elements(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.TrafficLight.cycle_elements)
  return cycle_elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::CycleElement >*
TrafficLight::mutable_cycle_elements() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.TrafficLight.cycle_elements)
  return &cycle_elements_;
}
inline const ::commonroad::CycleElement& TrafficLight::cycle_elements(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.cycle_elements)
  return cycle_elements_.Get(index);
}
inline ::commonroad::CycleElement* TrafficLight::add_cycle_elements() {
  // @@protoc_insertion_point(field_add:commonroad.TrafficLight.cycle_elements)
  return cycle_elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::CycleElement >&
TrafficLight::cycle_elements() const {
  // @@protoc_insertion_point(field_list:commonroad.TrafficLight.cycle_elements)
  return cycle_elements_;
}

// optional .commonroad.Point position = 3;
inline bool TrafficLight::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLight::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::Point& TrafficLight::_internal_position() const {
  return *position_;
}
inline const ::commonroad::Point& TrafficLight::position() const {
  const ::commonroad::Point* p = position_;
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.position)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Point*>(
      &::commonroad::_Point_default_instance_);
}
inline ::commonroad::Point* TrafficLight::release_position() {
  // @@protoc_insertion_point(field_release:commonroad.TrafficLight.position)
  clear_has_position();
  ::commonroad::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::commonroad::Point* TrafficLight::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Point>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.TrafficLight.position)
  return position_;
}
inline void TrafficLight::set_allocated_position(::commonroad::Point* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:commonroad.TrafficLight.position)
}

// optional uint32 time_offset = 4;
inline bool TrafficLight::has_time_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight::set_has_time_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLight::clear_has_time_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLight::clear_time_offset() {
  time_offset_ = 0u;
  clear_has_time_offset();
}
inline ::google::protobuf::uint32 TrafficLight::time_offset() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.time_offset)
  return time_offset_;
}
inline void TrafficLight::set_time_offset(::google::protobuf::uint32 value) {
  set_has_time_offset();
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficLight.time_offset)
}

// optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
inline bool TrafficLight::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLight::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLight::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection TrafficLight::direction() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.direction)
  return static_cast< ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection >(direction_);
}
inline void TrafficLight::set_direction(::commonroad::TrafficLightDirectionEnum_TrafficLightDirection value) {
  assert(::commonroad::TrafficLightDirectionEnum_TrafficLightDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficLight.direction)
}

// optional bool active = 6;
inline bool TrafficLight::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLight::set_has_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLight::clear_has_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLight::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool TrafficLight::active() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficLight.active)
  return active_;
}
inline void TrafficLight::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficLight.active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::commonroad::TrafficLightStateEnum_TrafficLightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficLightStateEnum_TrafficLightState>() {
  return ::commonroad::TrafficLightStateEnum_TrafficLightState_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection>() {
  return ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_traffic_5flight_2eproto
