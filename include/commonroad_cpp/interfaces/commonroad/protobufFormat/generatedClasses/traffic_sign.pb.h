// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_sign.proto

#ifndef PROTOBUF_INCLUDED_traffic_5fsign_2eproto
#define PROTOBUF_INCLUDED_traffic_5fsign_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5fsign_2eproto 

namespace protobuf_traffic_5fsign_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_traffic_5fsign_2eproto
namespace commonroad {
class TrafficSign;
class TrafficSignDefaultTypeInternal;
extern TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
class TrafficSignElement;
class TrafficSignElementDefaultTypeInternal;
extern TrafficSignElementDefaultTypeInternal _TrafficSignElement_default_instance_;
class TrafficSignIDArgentinaEnum;
class TrafficSignIDArgentinaEnumDefaultTypeInternal;
extern TrafficSignIDArgentinaEnumDefaultTypeInternal _TrafficSignIDArgentinaEnum_default_instance_;
class TrafficSignIDBelgiumEnum;
class TrafficSignIDBelgiumEnumDefaultTypeInternal;
extern TrafficSignIDBelgiumEnumDefaultTypeInternal _TrafficSignIDBelgiumEnum_default_instance_;
class TrafficSignIDChinaEnum;
class TrafficSignIDChinaEnumDefaultTypeInternal;
extern TrafficSignIDChinaEnumDefaultTypeInternal _TrafficSignIDChinaEnum_default_instance_;
class TrafficSignIDCroatiaEnum;
class TrafficSignIDCroatiaEnumDefaultTypeInternal;
extern TrafficSignIDCroatiaEnumDefaultTypeInternal _TrafficSignIDCroatiaEnum_default_instance_;
class TrafficSignIDFranceEnum;
class TrafficSignIDFranceEnumDefaultTypeInternal;
extern TrafficSignIDFranceEnumDefaultTypeInternal _TrafficSignIDFranceEnum_default_instance_;
class TrafficSignIDGermanyEnum;
class TrafficSignIDGermanyEnumDefaultTypeInternal;
extern TrafficSignIDGermanyEnumDefaultTypeInternal _TrafficSignIDGermanyEnum_default_instance_;
class TrafficSignIDGreeceEnum;
class TrafficSignIDGreeceEnumDefaultTypeInternal;
extern TrafficSignIDGreeceEnumDefaultTypeInternal _TrafficSignIDGreeceEnum_default_instance_;
class TrafficSignIDItalyEnum;
class TrafficSignIDItalyEnumDefaultTypeInternal;
extern TrafficSignIDItalyEnumDefaultTypeInternal _TrafficSignIDItalyEnum_default_instance_;
class TrafficSignIDPuertoRicoEnum;
class TrafficSignIDPuertoRicoEnumDefaultTypeInternal;
extern TrafficSignIDPuertoRicoEnumDefaultTypeInternal _TrafficSignIDPuertoRicoEnum_default_instance_;
class TrafficSignIDRussiaEnum;
class TrafficSignIDRussiaEnumDefaultTypeInternal;
extern TrafficSignIDRussiaEnumDefaultTypeInternal _TrafficSignIDRussiaEnum_default_instance_;
class TrafficSignIDSpainEnum;
class TrafficSignIDSpainEnumDefaultTypeInternal;
extern TrafficSignIDSpainEnumDefaultTypeInternal _TrafficSignIDSpainEnum_default_instance_;
class TrafficSignIDUsaEnum;
class TrafficSignIDUsaEnumDefaultTypeInternal;
extern TrafficSignIDUsaEnumDefaultTypeInternal _TrafficSignIDUsaEnum_default_instance_;
class TrafficSignIDZamundaEnum;
class TrafficSignIDZamundaEnumDefaultTypeInternal;
extern TrafficSignIDZamundaEnumDefaultTypeInternal _TrafficSignIDZamundaEnum_default_instance_;
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> ::commonroad::TrafficSign* Arena::CreateMaybeMessage<::commonroad::TrafficSign>(Arena*);
template<> ::commonroad::TrafficSignElement* Arena::CreateMaybeMessage<::commonroad::TrafficSignElement>(Arena*);
template<> ::commonroad::TrafficSignIDArgentinaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDArgentinaEnum>(Arena*);
template<> ::commonroad::TrafficSignIDBelgiumEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDBelgiumEnum>(Arena*);
template<> ::commonroad::TrafficSignIDChinaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDChinaEnum>(Arena*);
template<> ::commonroad::TrafficSignIDCroatiaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDCroatiaEnum>(Arena*);
template<> ::commonroad::TrafficSignIDFranceEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDFranceEnum>(Arena*);
template<> ::commonroad::TrafficSignIDGermanyEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDGermanyEnum>(Arena*);
template<> ::commonroad::TrafficSignIDGreeceEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDGreeceEnum>(Arena*);
template<> ::commonroad::TrafficSignIDItalyEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDItalyEnum>(Arena*);
template<> ::commonroad::TrafficSignIDPuertoRicoEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDPuertoRicoEnum>(Arena*);
template<> ::commonroad::TrafficSignIDRussiaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDRussiaEnum>(Arena*);
template<> ::commonroad::TrafficSignIDSpainEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDSpainEnum>(Arena*);
template<> ::commonroad::TrafficSignIDUsaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDUsaEnum>(Arena*);
template<> ::commonroad::TrafficSignIDZamundaEnum* Arena::CreateMaybeMessage<::commonroad::TrafficSignIDZamundaEnum>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonroad {

enum TrafficSignIDGermanyEnum_TrafficSignIDGermany {
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_DANGER_SPOT = 0,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_RIGHT_BEFORE_LEFT = 1,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_LEFT_CURVE = 2,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_RIGHT_CURVE = 3,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_STEEP_HILL_DOWNWARDS = 4,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_SLIPPERY_ROAD = 5,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_CONSTRUCTION_SITE = 6,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_TRAFFIC_QUEUES_LIKELY = 7,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_ONCOMING_TRAFFIC = 8,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_TRAFFIC_LIGHTS_AHEAD = 9,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PEDESTRIANS_RIGHT = 10,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PEDESTRIANS_LEFT = 11,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_CROSSING_CYCLIST = 12,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_ANIMAL_CROSSING_RIGHT = 13,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_LOOSE_GRAVEL = 14,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_RAILWAY = 15,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_YIELD = 16,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_STOP = 17,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY_OPPOSITE_DIRECTION = 18,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TURN_RIGHT_AHEAD = 19,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TURN_LEFT_AHEAD = 20,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_KEEP_STRAIGHT_AHEAD = 21,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_DIRECTION_RIGHT = 22,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROUNDABOUT = 23,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ONEWAY_RIGHT = 24,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ONEWAY_LEFT = 25,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_PASSING_LEFT = 26,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_PASSING_RIGHT = 27,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE = 28,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE = 29,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE = 30,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BUS_STOP = 31,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BIKEWAY = 32,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_SIDEWALK = 33,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_AND_BICYCLE_ROAD = 34,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_ZONE_START = 35,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_ZONE_END = 36,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BICYCLE_ROAD_START = 37,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BICYCLE_ROAD_END = 38,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BUSLANE = 39,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_ALL_VEHICLES = 40,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_CARS = 41,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_TRUCKS = 42,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_BICYCLE = 43,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_MOTORCYCLE = 44,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_BUS = 45,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_PEDESTRIAN = 46,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_CAR_TRUCK_BUS_MOTORCYCLE = 47,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_VEHICLES_CARRYING_DANGEROUS_GOODS = 48,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_WEIGHT = 49,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_WIDTH = 50,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_HEIGHT = 51,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_LENGTH = 52,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_ENTRY = 53,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ENVIRONMENTAL_ZONE_START = 54,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ENVIRONMENTAL_ZONE_END = 55,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_U_TURN = 56,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED = 57,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_ZONE_START = 58,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_ZONE_END = 59,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MIN_SPEED = 60,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_START = 61,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_TRUCKS_START = 62,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_END = 63,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_END = 64,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_TRUCKS_END = 65,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ALL_MAX_SPEED_AND_OVERTAKING_END = 66,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_STOP_START_RIGHT = 67,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_STOP_CENTER_RIGHT = 68,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_RESTRICTED_STOP_CENTER_RIGHT = 69,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_RIGHT_OF_WAY = 70,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY = 71,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY_OVER_ONCOMING = 72,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOWN_SIGN = 73,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOWN_SIGN_BACK = 74,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA = 75,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_LEFT = 76,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_RIGHT = 77,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_RIGHT_LEFT = 78,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_CALMED_AREA_START = 79,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_CALMED_AREA_END = 80,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TUNNEL = 81,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EMERYGECNY_STOP = 82,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_START = 83,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_END = 84,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_START = 85,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_END = 86,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_WITH_PLACE_NAME = 87,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_ROUTE = 88,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT = 89,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_BUILT_UP = 90,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_GENERAL = 91,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIANS_CROSSING = 92,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WATER_PROTECTION_ZONE = 93,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_ASSISTANTS = 94,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DEAD_END = 95,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_POLICE = 96,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EMERGENCY_CALL_STATION = 97,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GAS_STATION = 98,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_CAMP_AND_CARAVAN_SITE = 99,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ATTRACTION_POINT = 100,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOURISTIC_ROUTE = 101,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NEARBY_ATTRACTION_POINT = 102,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_INTERSECTION = 103,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_ARROW_SIGN_MULTI = 104,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_ARROW_SIGN_SINGLE = 105,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_CONSOLIDATED = 106,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_ARROW_DIRECTION = 107,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT = 108,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_STATION = 109,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_SIGN_TABLE = 110,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADVANCE_DIRECTION = 111,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTIONS_SIGN = 112,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_ENTRANCE_DIRECTIONS = 113,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_ANNOUNCEMENT = 114,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_ADVANCE_DIRECTION = 115,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_100_METER = 116,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_200_METER = 117,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_300_METER = 118,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_100_METRES = 119,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_200_METRES = 120,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_300_METRES = 121,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_DISTANCE = 122,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_SKETCH = 123,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_STRAIGHT = 124,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_LEFT = 125,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_GET_IN_LEFT_LANE = 126,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT = 127,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_RIGHT = 128,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE = 129,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_STRAIGHTFORWARD = 130,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_3_LEFT_2_TRANSITIONED = 131,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_1_LEFT_1_STRAIGHT = 132,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_3_RIGHT = 133,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_LANE_BOARD_NO_OPPOSITE_TWO_LANES = 134,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_THREE_LANES_NO_ONCOMING_LANES = 135,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_FOUR_LANES_NO_ONCOMING_LANES = 136,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_FIVE_LANES_NO_ONCOMING_LANES = 137,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS = 138,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_1_LANE_FROM_RIGHT = 139,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_1_LANE_FROM_LEFT = 140,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_2_LANES_PLUS_1_LEFT = 141,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT = 142,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT = 143,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER = 144,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_800 = 145,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_1200 = 146,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_1600 = 147,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_250_1600 = 148,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE = 149,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT = 150,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_ARROW_BEACON_RIGHT = 151,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_LEFT = 152,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT = 153,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS = 154,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_SINGLE = 155,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_SMALL = 156,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_MEDIUM = 157,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_LARGE = 158,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_SINGLE = 159,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_SMALL = 160,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_MEDIUM = 161,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_LARGE = 162,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_RIGHT = 163,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_LEFT = 164,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_STRAIGHT_BROAD = 165,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_STRAIGHT_HIGH = 166,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT = 167,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT = 168,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT = 169,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_GREEN_ARROW = 170,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION = 171,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION_1 = 172,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION_DANGER_POINT = 173,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_DIRECTION_1 = 174,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_DIRECTION_DANGER_POINT = 175,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BOTH_DIRECTIONS_HORIZONTAL = 176,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BOTH_DIRECTIONS_VERTICAL = 177,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_FOR_X_METERS = 178,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_FOR_X_KILOMETERS = 179,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD = 180,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD = 181,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD = 182,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD = 183,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD = 184,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD = 185,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD = 186,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD = 187,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD = 188,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD = 189,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_X_METERS = 190,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_X_KILOMETERS = 191,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_200_KILOMETERS = 192,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_400_METRES = 193,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_600_METRES = 194,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_2_KILOMETERS = 195,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_OIL_ON_ROAD = 196,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SMOKE = 197,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LOOSE_GRAVEL = 198,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BUILDING_SITE_EXIT = 199,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DAMAGED_ROAD = 201,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DIRTY_ROAD = 202,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DANGER_OF_COLLISION = 203,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TOAD_MIGRATION = 204,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DANGER_OF_CONGESTION = 205,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RESTRICTED_VIEW_DUE_TO_TREES = 206,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_DANGER_INDICATION_SMOKE = 207,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CHILDREN_PLAYING_ON_ROAD = 208,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_WINTER_SPORTS_ALLOWED = 209,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS = 210,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS = 211,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_ROLLING_HIGHWAY = 212,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LOADING_AREA = 213,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_END = 214,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GET_OFF_BICYCLES = 215,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NO_MOPEDS = 216,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GREEN_WAVE_AT_KM_H = 217,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_STOP_HERE_AT_RED = 218,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NOISE_CONTROL = 219,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_INFLOW_REGULATION = 220,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SECONDARY_LANE = 221,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SCHOOL = 222,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_KINDERGARTEN = 223,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RETIREMENT_HOME = 224,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_HOSPITAL = 225,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RESIDENTS_PERMITTED = 226,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BICYCLES_PERMITTED = 227,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CARS_PERMITTED = 228,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_AGRICULTURE_PERMITTED = 229,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_FOREST_PERMITTED = 230,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_AGRICULTURE_FOREST_PERMITTED = 231,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GREEN_STICKER_PERMITTED = 232,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TIME_PERIOD_PERMITTED = 233,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS = 234,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_MIN_MASS_3_5_TONS = 235,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NO_WATER_POLLUTANTS_LOADED = 236,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ALLOWED_MASS_7_5_TONS = 237,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_ON_SHOULDER = 238,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_WHEN_WET = 239,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_LINE_MARKING_MISSING = 240,
  TrafficSignIDGermanyEnum_TrafficSignIDGermany_UNKNOWN = 241
};
bool TrafficSignIDGermanyEnum_TrafficSignIDGermany_IsValid(int value);
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_MIN = TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_DANGER_SPOT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_MAX = TrafficSignIDGermanyEnum_TrafficSignIDGermany_UNKNOWN;
const int TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_ARRAYSIZE = TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor();
inline const ::std::string& TrafficSignIDGermanyEnum_TrafficSignIDGermany_Name(TrafficSignIDGermanyEnum_TrafficSignIDGermany value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor(), value);
}
inline bool TrafficSignIDGermanyEnum_TrafficSignIDGermany_Parse(
    const ::std::string& name, TrafficSignIDGermanyEnum_TrafficSignIDGermany* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDGermanyEnum_TrafficSignIDGermany>(
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor(), name, value);
}
enum TrafficSignIDZamundaEnum_TrafficSignIDZamunda {
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_DANGER_SPOT = 0,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_RIGHT_BEFORE_LEFT = 1,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_LEFT_CURVE = 2,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_RIGHT_CURVE = 3,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_STEEP_HILL_DOWNWARDS = 4,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_SLIPPERY_ROAD = 5,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_CONSTRUCTION_SITE = 6,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_TRAFFIC_QUEUES_LIKELY = 7,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_ONCOMING_TRAFFIC = 8,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_TRAFFIC_LIGHTS_AHEAD = 9,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PEDESTRIANS_RIGHT = 10,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PEDESTRIANS_LEFT = 11,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_CROSSING_CYCLIST = 12,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_ANIMAL_CROSSING_RIGHT = 13,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_LOOSE_GRAVEL = 14,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RAILWAY = 15,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_YIELD = 16,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_STOP = 17,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY_OPPOSITE_DIRECTION = 18,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TURN_RIGHT_AHEAD = 19,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TURN_LEFT_AHEAD = 20,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_KEEP_STRAIGHT_AHEAD = 21,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_DIRECTION_RIGHT = 22,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROUNDABOUT = 23,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ONEWAY_RIGHT = 24,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ONEWAY_LEFT = 25,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_PASSING_LEFT = 26,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_PASSING_RIGHT = 27,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE = 28,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE = 29,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE = 30,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BUS_STOP = 31,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BIKEWAY = 32,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_SIDEWALK = 33,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_AND_BICYCLE_ROAD = 34,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_ZONE_START = 35,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_ZONE_END = 36,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BICYCLE_ROAD_START = 37,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BICYCLE_ROAD_END = 38,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BUSLANE = 39,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_ALL_VEHICLES = 40,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_CARS = 41,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_TRUCKS = 42,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_BICYCLE = 43,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_MOTORCYCLE = 44,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_BUS = 45,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_PEDESTRIAN = 46,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_CAR_TRUCK_BUS_MOTORCYCLE = 47,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_VEHICLES_CARRYING_DANGEROUS_GOODS = 48,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_WEIGHT = 49,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_WIDTH = 50,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_HEIGHT = 51,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_LENGTH = 52,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_ENTRY = 53,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ENVIRONMENTAL_ZONE_START = 54,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ENVIRONMENTAL_ZONE_END = 55,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_U_TURN = 56,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED = 57,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_ZONE_START = 58,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_ZONE_END = 59,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MIN_SPEED = 60,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_START = 61,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_TRUCKS_START = 62,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_END = 63,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_END = 64,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_TRUCKS_END = 65,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ALL_MAX_SPEED_AND_OVERTAKING_END = 66,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_STOP_START_RIGHT = 67,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_STOP_CENTER_RIGHT = 68,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RESTRICTED_STOP_CENTER_RIGHT = 69,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RIGHT_OF_WAY = 70,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY = 71,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY_OVER_ONCOMING = 72,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOWN_SIGN = 73,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOWN_SIGN_BACK = 74,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA = 75,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_LEFT = 76,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_RIGHT = 77,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_RIGHT_LEFT = 78,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_CALMED_AREA_START = 79,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_CALMED_AREA_END = 80,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TUNNEL = 81,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EMERGENCY_STOP = 82,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_START = 83,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_END = 84,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_START = 85,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_END = 86,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_WITH_PLACE_NAME = 87,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_ROUTE = 88,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT = 89,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_BUILT_UP = 90,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_GENERAL = 91,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIANS_CROSSING = 92,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WATER_PROTECTION_ZONE = 93,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_ASSISTANTS = 94,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DEAD_END = 95,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_POLICE = 96,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EMERGENCY_CALL_STATION = 97,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GAS_STATION = 98,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_CAMP_AND_CARAVAN_SITE = 99,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ATTRACTION_POINT = 100,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOURISTIC_ROUTE = 101,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NEARBY_ATTRACTION_POINT = 102,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_INTERSECTION = 103,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_ARROW_SIGN_MULTI = 104,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_ARROW_SIGN_SINGLE = 105,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_CONSOLIDATED = 106,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_ARROW_DIRECTION = 107,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT = 108,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_STATION = 109,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_SIGN_TABLE = 110,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADVANCE_DIRECTION = 111,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTIONS_SIGN = 112,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_ENTRANCE_DIRECTIONS = 113,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_ANNOUNCEMENT = 114,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_ADVANCE_DIRECTION = 115,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_100_METER = 116,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_200_METER = 117,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_300_METER = 118,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_100_METRES = 119,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_200_METRES = 120,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_300_METRES = 121,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_DISTANCE = 122,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_SKETCH = 123,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_STRAIGHT = 124,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_LEFT = 125,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_GET_IN_LEFT_LANE = 126,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT = 127,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_RIGHT = 128,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE = 129,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_STRAIGHTFORWARD = 130,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_3_LEFT_2_TRANSITIONED = 131,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_1_LEFT_1_STRAIGHT = 132,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_3_RIGHT = 133,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LANE_BOARD_NO_OPPOSITE_TWO_LANES = 134,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_THREE_LANES_NO_ONCOMING_LANES = 135,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FOUR_LANES_NO_ONCOMING_LANES = 136,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FIVE_LANES_NO_ONCOMING_LANES = 137,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS = 138,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_1_LANE_FROM_RIGHT = 139,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_1_LANE_FROM_LEFT = 140,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_2_LANES_PLUS_1_LEFT = 141,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT = 142,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT = 143,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER = 144,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_800 = 145,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_1200 = 146,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_1600 = 147,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_250_1600 = 148,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE = 149,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT = 150,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_ARROW_BEACON_RIGHT = 151,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_LEFT = 152,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT = 153,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS = 154,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_SINGLE = 155,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_SMALL = 156,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_MEDIUM = 157,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_LARGE = 158,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_SINGLE = 159,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_SMALL = 160,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_MEDIUM = 161,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_LARGE = 162,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_RIGHT = 163,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_LEFT = 164,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_STRAIGHT_BROAD = 165,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_STRAIGHT_HIGH = 166,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT = 167,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT = 168,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT = 169,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GREEN_ARROW = 170,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION = 171,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION_1 = 172,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION_DANGER_POINT = 173,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_DIRECTION_1 = 174,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_DIRECTION_DANGER_POINT = 175,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BOTH_DIRECTIONS_HORIZONTAL = 176,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BOTH_DIRECTIONS_VERTICAL = 177,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_FOR_X_METERS = 178,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_FOR_X_KILOMETERS = 179,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD = 180,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD = 181,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD = 182,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD = 183,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD = 184,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD = 185,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD = 186,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD = 187,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD = 188,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD = 189,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_X_METERS = 190,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_X_KILOMETERS = 191,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_200_KILOMETERS = 192,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_400_METRES = 193,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_600_METRES = 194,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_2_KILOMETERS = 195,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_OIL_ON_ROAD = 196,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SMOKE = 197,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LOOSE_GRAVEL = 198,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BUILDING_SITE_EXIT = 199,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DAMAGED_ROAD = 201,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DIRTY_ROAD = 202,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DANGER_OF_COLLISION = 203,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TOAD_MIGRATION = 204,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DANGER_OF_CONGESTION = 205,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RESTRICTED_VIEW_DUE_TO_TREES = 206,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DANGER_INDICATION_SMOKE = 207,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CHILDREN_PLAYING_ON_ROAD = 208,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_WINTER_SPORTS_ALLOWED = 209,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS = 210,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS = 211,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_ROLLING_HIGHWAY = 212,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LOADING_AREA = 213,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_END = 214,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GET_OFF_BICYCLES = 215,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NO_MOPEDS = 216,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GREEN_WAVE_AT_KM_H = 217,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_STOP_HERE_AT_RED = 218,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NOISE_CONTROL = 219,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_INFLOW_REGULATION = 220,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SECONDARY_LANE = 221,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SCHOOL = 222,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_KINDERGARTEN = 223,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RETIREMENT_HOME = 224,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_HOSPITAL = 225,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RESIDENTS_PERMITTED = 226,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BICYCLES_PERMITTED = 227,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CARS_PERMITTED = 228,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_AGRICULTURE_PERMITTED = 229,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_FOREST_PERMITTED = 230,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_AGRICULTURE_FOREST_PERMITTED = 231,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GREEN_STICKER_PERMITTED = 232,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TIME_PERIOD_PERMITTED = 233,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS = 234,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_MIN_MASS_3_5_TONS = 235,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NO_WATER_POLLUTANTS_LOADED = 236,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ALLOWED_MASS_7_5_TONS = 237,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_ON_SHOULDER = 238,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_WHEN_WET = 239,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LINE_MARKING_MISSING = 240,
  TrafficSignIDZamundaEnum_TrafficSignIDZamunda_UNKNOWN = 241
};
bool TrafficSignIDZamundaEnum_TrafficSignIDZamunda_IsValid(int value);
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_MIN = TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_DANGER_SPOT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_MAX = TrafficSignIDZamundaEnum_TrafficSignIDZamunda_UNKNOWN;
const int TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_ARRAYSIZE = TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor();
inline const ::std::string& TrafficSignIDZamundaEnum_TrafficSignIDZamunda_Name(TrafficSignIDZamundaEnum_TrafficSignIDZamunda value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor(), value);
}
inline bool TrafficSignIDZamundaEnum_TrafficSignIDZamunda_Parse(
    const ::std::string& name, TrafficSignIDZamundaEnum_TrafficSignIDZamunda* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDZamundaEnum_TrafficSignIDZamunda>(
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor(), name, value);
}
enum TrafficSignIDUsaEnum_TrafficSignIDUsa {
  TrafficSignIDUsaEnum_TrafficSignIDUsa_MAX_SPEED = 0,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_U_TURN = 1,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_ROAD_WORK_AHEAD = 2,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING_ANY_TIME = 3,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_STANDING = 4,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_TOW_AWAY_ZONE = 5,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_ONE_WAY_LEFT = 6,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_ONE_WAY_RIGHT = 7,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_DO_NOT_ENTER = 8,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_LEFT_TURN = 9,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_RIGHT_TURN_ONLY = 10,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_TURN_ONLY_LANES = 11,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_RIGHT_TURN = 12,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_KEEP_RIGHT = 13,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_SIGNAL_AHEAD = 14,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_LOADING_ZONE = 15,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING = 16,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_LEFT_TURN_ONLY = 17,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_STRAIGHT_THROUGH = 18,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_LEFT_REVERSE_TURN = 19,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_PEDESTRIAN_WARNING = 20,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_DIAGONAL_DOWNWARD_LEFT_ARROW = 21,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_RIGHT_LANE_ENDS = 22,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_RESERVED_HANDICAP_PARKING = 23,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING_BUS_STOP = 24,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_ON_PAVEMENT = 25,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_DO_NOT_BLOCK_INTERSECTION = 26,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_WARNING_ARROW_LEFT = 27,
  TrafficSignIDUsaEnum_TrafficSignIDUsa_UNKNOWN = 28
};
bool TrafficSignIDUsaEnum_TrafficSignIDUsa_IsValid(int value);
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_MIN = TrafficSignIDUsaEnum_TrafficSignIDUsa_MAX_SPEED;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_MAX = TrafficSignIDUsaEnum_TrafficSignIDUsa_UNKNOWN;
const int TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_ARRAYSIZE = TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor();
inline const ::std::string& TrafficSignIDUsaEnum_TrafficSignIDUsa_Name(TrafficSignIDUsaEnum_TrafficSignIDUsa value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor(), value);
}
inline bool TrafficSignIDUsaEnum_TrafficSignIDUsa_Parse(
    const ::std::string& name, TrafficSignIDUsaEnum_TrafficSignIDUsa* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDUsaEnum_TrafficSignIDUsa>(
    TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor(), name, value);
}
enum TrafficSignIDChinaEnum_TrafficSignIDChina {
  TrafficSignIDChinaEnum_TrafficSignIDChina_MAX_SPEED = 0,
  TrafficSignIDChinaEnum_TrafficSignIDChina_UNKNOWN = 1
};
bool TrafficSignIDChinaEnum_TrafficSignIDChina_IsValid(int value);
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_MIN = TrafficSignIDChinaEnum_TrafficSignIDChina_MAX_SPEED;
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_MAX = TrafficSignIDChinaEnum_TrafficSignIDChina_UNKNOWN;
const int TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_ARRAYSIZE = TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor();
inline const ::std::string& TrafficSignIDChinaEnum_TrafficSignIDChina_Name(TrafficSignIDChinaEnum_TrafficSignIDChina value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor(), value);
}
inline bool TrafficSignIDChinaEnum_TrafficSignIDChina_Parse(
    const ::std::string& name, TrafficSignIDChinaEnum_TrafficSignIDChina* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDChinaEnum_TrafficSignIDChina>(
    TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor(), name, value);
}
enum TrafficSignIDSpainEnum_TrafficSignIDSpain {
  TrafficSignIDSpainEnum_TrafficSignIDSpain_YIELD = 0,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_STOP = 1,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_BAN_ALL_VEHICLES = 2,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_ENTRY = 3,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_BAN_TRUCKS = 4,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_WEIGHT = 5,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_HEIGHT = 6,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_SPEED = 7,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_OVERTAKING_START = 8,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_STOPPING = 9,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_WAITING = 10,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_PEDESTRIANS_CROSSING = 11,
  TrafficSignIDSpainEnum_TrafficSignIDSpain_UNKNOWN = 12
};
bool TrafficSignIDSpainEnum_TrafficSignIDSpain_IsValid(int value);
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_MIN = TrafficSignIDSpainEnum_TrafficSignIDSpain_YIELD;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_MAX = TrafficSignIDSpainEnum_TrafficSignIDSpain_UNKNOWN;
const int TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_ARRAYSIZE = TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor();
inline const ::std::string& TrafficSignIDSpainEnum_TrafficSignIDSpain_Name(TrafficSignIDSpainEnum_TrafficSignIDSpain value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor(), value);
}
inline bool TrafficSignIDSpainEnum_TrafficSignIDSpain_Parse(
    const ::std::string& name, TrafficSignIDSpainEnum_TrafficSignIDSpain* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDSpainEnum_TrafficSignIDSpain>(
    TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor(), name, value);
}
enum TrafficSignIDRussiaEnum_TrafficSignIDRussia {
  TrafficSignIDRussiaEnum_TrafficSignIDRussia_MAX_SPEED = 0,
  TrafficSignIDRussiaEnum_TrafficSignIDRussia_UNKNOWN = 1
};
bool TrafficSignIDRussiaEnum_TrafficSignIDRussia_IsValid(int value);
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_MIN = TrafficSignIDRussiaEnum_TrafficSignIDRussia_MAX_SPEED;
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_MAX = TrafficSignIDRussiaEnum_TrafficSignIDRussia_UNKNOWN;
const int TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_ARRAYSIZE = TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor();
inline const ::std::string& TrafficSignIDRussiaEnum_TrafficSignIDRussia_Name(TrafficSignIDRussiaEnum_TrafficSignIDRussia value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor(), value);
}
inline bool TrafficSignIDRussiaEnum_TrafficSignIDRussia_Parse(
    const ::std::string& name, TrafficSignIDRussiaEnum_TrafficSignIDRussia* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDRussiaEnum_TrafficSignIDRussia>(
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor(), name, value);
}
enum TrafficSignIDArgentinaEnum_TrafficSignIDArgentina {
  TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_MAX_SPEED = 0,
  TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_UNKNOWN = 1
};
bool TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_IsValid(int value);
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_MIN = TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_MAX_SPEED;
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_MAX = TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_UNKNOWN;
const int TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_ARRAYSIZE = TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor();
inline const ::std::string& TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_Name(TrafficSignIDArgentinaEnum_TrafficSignIDArgentina value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor(), value);
}
inline bool TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_Parse(
    const ::std::string& name, TrafficSignIDArgentinaEnum_TrafficSignIDArgentina* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDArgentinaEnum_TrafficSignIDArgentina>(
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor(), name, value);
}
enum TrafficSignIDBelgiumEnum_TrafficSignIDBelgium {
  TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_MAX_SPEED = 0,
  TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_UNKNOWN = 1
};
bool TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_IsValid(int value);
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_MIN = TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_MAX_SPEED;
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_MAX = TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_UNKNOWN;
const int TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_ARRAYSIZE = TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor();
inline const ::std::string& TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_Name(TrafficSignIDBelgiumEnum_TrafficSignIDBelgium value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor(), value);
}
inline bool TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_Parse(
    const ::std::string& name, TrafficSignIDBelgiumEnum_TrafficSignIDBelgium* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDBelgiumEnum_TrafficSignIDBelgium>(
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor(), name, value);
}
enum TrafficSignIDFranceEnum_TrafficSignIDFrance {
  TrafficSignIDFranceEnum_TrafficSignIDFrance_MAX_SPEED = 0,
  TrafficSignIDFranceEnum_TrafficSignIDFrance_UNKNOWN = 1
};
bool TrafficSignIDFranceEnum_TrafficSignIDFrance_IsValid(int value);
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_MIN = TrafficSignIDFranceEnum_TrafficSignIDFrance_MAX_SPEED;
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_MAX = TrafficSignIDFranceEnum_TrafficSignIDFrance_UNKNOWN;
const int TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_ARRAYSIZE = TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor();
inline const ::std::string& TrafficSignIDFranceEnum_TrafficSignIDFrance_Name(TrafficSignIDFranceEnum_TrafficSignIDFrance value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor(), value);
}
inline bool TrafficSignIDFranceEnum_TrafficSignIDFrance_Parse(
    const ::std::string& name, TrafficSignIDFranceEnum_TrafficSignIDFrance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDFranceEnum_TrafficSignIDFrance>(
    TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor(), name, value);
}
enum TrafficSignIDGreeceEnum_TrafficSignIDGreece {
  TrafficSignIDGreeceEnum_TrafficSignIDGreece_MAX_SPEED = 0,
  TrafficSignIDGreeceEnum_TrafficSignIDGreece_UNKNOWN = 1
};
bool TrafficSignIDGreeceEnum_TrafficSignIDGreece_IsValid(int value);
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_MIN = TrafficSignIDGreeceEnum_TrafficSignIDGreece_MAX_SPEED;
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_MAX = TrafficSignIDGreeceEnum_TrafficSignIDGreece_UNKNOWN;
const int TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_ARRAYSIZE = TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor();
inline const ::std::string& TrafficSignIDGreeceEnum_TrafficSignIDGreece_Name(TrafficSignIDGreeceEnum_TrafficSignIDGreece value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor(), value);
}
inline bool TrafficSignIDGreeceEnum_TrafficSignIDGreece_Parse(
    const ::std::string& name, TrafficSignIDGreeceEnum_TrafficSignIDGreece* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDGreeceEnum_TrafficSignIDGreece>(
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor(), name, value);
}
enum TrafficSignIDCroatiaEnum_TrafficSignIDCroatia {
  TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_MAX_SPEED = 0,
  TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_UNKNOWN = 1
};
bool TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_IsValid(int value);
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_MIN = TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_MAX_SPEED;
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_MAX = TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_UNKNOWN;
const int TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_ARRAYSIZE = TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor();
inline const ::std::string& TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_Name(TrafficSignIDCroatiaEnum_TrafficSignIDCroatia value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor(), value);
}
inline bool TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_Parse(
    const ::std::string& name, TrafficSignIDCroatiaEnum_TrafficSignIDCroatia* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDCroatiaEnum_TrafficSignIDCroatia>(
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor(), name, value);
}
enum TrafficSignIDItalyEnum_TrafficSignIDItaly {
  TrafficSignIDItalyEnum_TrafficSignIDItaly_MAX_SPEED = 0,
  TrafficSignIDItalyEnum_TrafficSignIDItaly_UNKNOWN = 1
};
bool TrafficSignIDItalyEnum_TrafficSignIDItaly_IsValid(int value);
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_MIN = TrafficSignIDItalyEnum_TrafficSignIDItaly_MAX_SPEED;
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_MAX = TrafficSignIDItalyEnum_TrafficSignIDItaly_UNKNOWN;
const int TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_ARRAYSIZE = TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor();
inline const ::std::string& TrafficSignIDItalyEnum_TrafficSignIDItaly_Name(TrafficSignIDItalyEnum_TrafficSignIDItaly value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor(), value);
}
inline bool TrafficSignIDItalyEnum_TrafficSignIDItaly_Parse(
    const ::std::string& name, TrafficSignIDItalyEnum_TrafficSignIDItaly* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDItalyEnum_TrafficSignIDItaly>(
    TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor(), name, value);
}
enum TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico {
  TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_MAX_SPEED = 0,
  TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_UNKNOWN = 1
};
bool TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_IsValid(int value);
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_MIN = TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_MAX_SPEED;
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_MAX = TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_UNKNOWN;
const int TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_ARRAYSIZE = TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor();
inline const ::std::string& TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_Name(TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor(), value);
}
inline bool TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_Parse(
    const ::std::string& name, TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico>(
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor(), name, value);
}
// ===================================================================

class TrafficSignIDGermanyEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDGermanyEnum) */ {
 public:
  TrafficSignIDGermanyEnum();
  virtual ~TrafficSignIDGermanyEnum();

  TrafficSignIDGermanyEnum(const TrafficSignIDGermanyEnum& from);

  inline TrafficSignIDGermanyEnum& operator=(const TrafficSignIDGermanyEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDGermanyEnum(TrafficSignIDGermanyEnum&& from) noexcept
    : TrafficSignIDGermanyEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDGermanyEnum& operator=(TrafficSignIDGermanyEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDGermanyEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDGermanyEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDGermanyEnum*>(
               &_TrafficSignIDGermanyEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrafficSignIDGermanyEnum* other);
  friend void swap(TrafficSignIDGermanyEnum& a, TrafficSignIDGermanyEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDGermanyEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDGermanyEnum>(NULL);
  }

  TrafficSignIDGermanyEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDGermanyEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDGermanyEnum& from);
  void MergeFrom(const TrafficSignIDGermanyEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDGermanyEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermany;
  static const TrafficSignIDGermany WARNING_DANGER_SPOT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_DANGER_SPOT;
  static const TrafficSignIDGermany WARNING_RIGHT_BEFORE_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_RIGHT_BEFORE_LEFT;
  static const TrafficSignIDGermany WARNING_LEFT_CURVE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_LEFT_CURVE;
  static const TrafficSignIDGermany WARNING_RIGHT_CURVE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_RIGHT_CURVE;
  static const TrafficSignIDGermany WARNING_STEEP_HILL_DOWNWARDS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_STEEP_HILL_DOWNWARDS;
  static const TrafficSignIDGermany WARNING_SLIPPERY_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_SLIPPERY_ROAD;
  static const TrafficSignIDGermany WARNING_CONSTRUCTION_SITE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_CONSTRUCTION_SITE;
  static const TrafficSignIDGermany WARNING_TRAFFIC_QUEUES_LIKELY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_TRAFFIC_QUEUES_LIKELY;
  static const TrafficSignIDGermany WARNING_ONCOMING_TRAFFIC =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_ONCOMING_TRAFFIC;
  static const TrafficSignIDGermany WARNING_TRAFFIC_LIGHTS_AHEAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_TRAFFIC_LIGHTS_AHEAD;
  static const TrafficSignIDGermany WARNING_PEDESTRIANS_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PEDESTRIANS_RIGHT;
  static const TrafficSignIDGermany WARNING_PEDESTRIANS_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PEDESTRIANS_LEFT;
  static const TrafficSignIDGermany WARNING_CROSSING_CYCLIST =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_CROSSING_CYCLIST;
  static const TrafficSignIDGermany WARNING_ANIMAL_CROSSING_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_ANIMAL_CROSSING_RIGHT;
  static const TrafficSignIDGermany WARNING_LOOSE_GRAVEL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_LOOSE_GRAVEL;
  static const TrafficSignIDGermany RAILWAY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_RAILWAY;
  static const TrafficSignIDGermany YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_YIELD;
  static const TrafficSignIDGermany STOP =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_STOP;
  static const TrafficSignIDGermany PRIORITY_OPPOSITE_DIRECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY_OPPOSITE_DIRECTION;
  static const TrafficSignIDGermany TURN_RIGHT_AHEAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TURN_RIGHT_AHEAD;
  static const TrafficSignIDGermany TURN_LEFT_AHEAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TURN_LEFT_AHEAD;
  static const TrafficSignIDGermany KEEP_STRAIGHT_AHEAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_KEEP_STRAIGHT_AHEAD;
  static const TrafficSignIDGermany PRESCRIBED_DIRECTION_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_DIRECTION_RIGHT;
  static const TrafficSignIDGermany ROUNDABOUT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROUNDABOUT;
  static const TrafficSignIDGermany ONEWAY_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ONEWAY_RIGHT;
  static const TrafficSignIDGermany ONEWAY_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ONEWAY_LEFT;
  static const TrafficSignIDGermany PRESCRIBED_PASSING_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_PASSING_LEFT;
  static const TrafficSignIDGermany PRESCRIBED_PASSING_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRESCRIBED_PASSING_RIGHT;
  static const TrafficSignIDGermany DO_NOT_DRIVE_ON_SHOULDER_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE;
  static const TrafficSignIDGermany DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE;
  static const TrafficSignIDGermany DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE;
  static const TrafficSignIDGermany BUS_STOP =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BUS_STOP;
  static const TrafficSignIDGermany BIKEWAY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BIKEWAY;
  static const TrafficSignIDGermany SIDEWALK =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_SIDEWALK;
  static const TrafficSignIDGermany PEDESTRIAN_AND_BICYCLE_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_AND_BICYCLE_ROAD;
  static const TrafficSignIDGermany PEDESTRIAN_ZONE_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_ZONE_START;
  static const TrafficSignIDGermany PEDESTRIAN_ZONE_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIAN_ZONE_END;
  static const TrafficSignIDGermany BICYCLE_ROAD_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BICYCLE_ROAD_START;
  static const TrafficSignIDGermany BICYCLE_ROAD_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BICYCLE_ROAD_END;
  static const TrafficSignIDGermany BUSLANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BUSLANE;
  static const TrafficSignIDGermany BAN_ALL_VEHICLES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_ALL_VEHICLES;
  static const TrafficSignIDGermany BAN_CARS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_CARS;
  static const TrafficSignIDGermany BAN_TRUCKS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_TRUCKS;
  static const TrafficSignIDGermany BAN_BICYCLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_BICYCLE;
  static const TrafficSignIDGermany BAN_MOTORCYCLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_MOTORCYCLE;
  static const TrafficSignIDGermany BAN_BUS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_BUS;
  static const TrafficSignIDGermany BAN_PEDESTRIAN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_PEDESTRIAN;
  static const TrafficSignIDGermany BAN_CAR_TRUCK_BUS_MOTORCYCLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_CAR_TRUCK_BUS_MOTORCYCLE;
  static const TrafficSignIDGermany BAN_VEHICLES_CARRYING_DANGEROUS_GOODS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BAN_VEHICLES_CARRYING_DANGEROUS_GOODS;
  static const TrafficSignIDGermany MAX_WEIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_WEIGHT;
  static const TrafficSignIDGermany MAX_WIDTH =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_WIDTH;
  static const TrafficSignIDGermany MAX_HEIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_HEIGHT;
  static const TrafficSignIDGermany MAX_LENGTH =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_LENGTH;
  static const TrafficSignIDGermany NO_ENTRY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_ENTRY;
  static const TrafficSignIDGermany ENVIRONMENTAL_ZONE_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ENVIRONMENTAL_ZONE_START;
  static const TrafficSignIDGermany ENVIRONMENTAL_ZONE_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ENVIRONMENTAL_ZONE_END;
  static const TrafficSignIDGermany U_TURN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_U_TURN;
  static const TrafficSignIDGermany MAX_SPEED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED;
  static const TrafficSignIDGermany MAX_SPEED_ZONE_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_ZONE_START;
  static const TrafficSignIDGermany MAX_SPEED_ZONE_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_ZONE_END;
  static const TrafficSignIDGermany MIN_SPEED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MIN_SPEED;
  static const TrafficSignIDGermany NO_OVERTAKING_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_START;
  static const TrafficSignIDGermany NO_OVERTAKING_TRUCKS_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_TRUCKS_START;
  static const TrafficSignIDGermany MAX_SPEED_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MAX_SPEED_END;
  static const TrafficSignIDGermany NO_OVERTAKING_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_END;
  static const TrafficSignIDGermany NO_OVERTAKING_TRUCKS_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_OVERTAKING_TRUCKS_END;
  static const TrafficSignIDGermany ALL_MAX_SPEED_AND_OVERTAKING_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ALL_MAX_SPEED_AND_OVERTAKING_END;
  static const TrafficSignIDGermany NO_STOP_START_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_STOP_START_RIGHT;
  static const TrafficSignIDGermany NO_STOP_CENTER_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NO_STOP_CENTER_RIGHT;
  static const TrafficSignIDGermany RESTRICTED_STOP_CENTER_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_RESTRICTED_STOP_CENTER_RIGHT;
  static const TrafficSignIDGermany RIGHT_OF_WAY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_RIGHT_OF_WAY;
  static const TrafficSignIDGermany PRIORITY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY;
  static const TrafficSignIDGermany PRIORITY_OVER_ONCOMING =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PRIORITY_OVER_ONCOMING;
  static const TrafficSignIDGermany TOWN_SIGN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOWN_SIGN;
  static const TrafficSignIDGermany TOWN_SIGN_BACK =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOWN_SIGN_BACK;
  static const TrafficSignIDGermany PARKING_AREA =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA;
  static const TrafficSignIDGermany PARKING_AREA_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_LEFT;
  static const TrafficSignIDGermany PARKING_AREA_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_RIGHT;
  static const TrafficSignIDGermany PARKING_AREA_RIGHT_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PARKING_AREA_RIGHT_LEFT;
  static const TrafficSignIDGermany TRAFFIC_CALMED_AREA_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_CALMED_AREA_START;
  static const TrafficSignIDGermany TRAFFIC_CALMED_AREA_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_CALMED_AREA_END;
  static const TrafficSignIDGermany TUNNEL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TUNNEL;
  static const TrafficSignIDGermany EMERYGECNY_STOP =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EMERYGECNY_STOP;
  static const TrafficSignIDGermany INTERSTATE_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_START;
  static const TrafficSignIDGermany INTERSTATE_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_END;
  static const TrafficSignIDGermany HIGHWAY_START =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_START;
  static const TrafficSignIDGermany HIGHWAY_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_END;
  static const TrafficSignIDGermany HIGHWAY_EXIT_WITH_PLACE_NAME =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_WITH_PLACE_NAME;
  static const TrafficSignIDGermany EXIT_ROUTE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_ROUTE;
  static const TrafficSignIDGermany HIGHWAY_EXIT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT;
  static const TrafficSignIDGermany EXIT_BUILT_UP =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_BUILT_UP;
  static const TrafficSignIDGermany EXIT_GENERAL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXIT_GENERAL;
  static const TrafficSignIDGermany PEDESTRIANS_CROSSING =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_PEDESTRIANS_CROSSING;
  static const TrafficSignIDGermany WATER_PROTECTION_ZONE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WATER_PROTECTION_ZONE;
  static const TrafficSignIDGermany TRAFFIC_ASSISTANTS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRAFFIC_ASSISTANTS;
  static const TrafficSignIDGermany DEAD_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DEAD_END;
  static const TrafficSignIDGermany POLICE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_POLICE;
  static const TrafficSignIDGermany EMERGENCY_CALL_STATION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EMERGENCY_CALL_STATION;
  static const TrafficSignIDGermany GAS_STATION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GAS_STATION;
  static const TrafficSignIDGermany CAMP_AND_CARAVAN_SITE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_CAMP_AND_CARAVAN_SITE;
  static const TrafficSignIDGermany ATTRACTION_POINT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ATTRACTION_POINT;
  static const TrafficSignIDGermany TOURISTIC_ROUTE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TOURISTIC_ROUTE;
  static const TrafficSignIDGermany NEARBY_ATTRACTION_POINT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NEARBY_ATTRACTION_POINT;
  static const TrafficSignIDGermany HIGHWAY_INTERSECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_INTERSECTION;
  static const TrafficSignIDGermany DIRECTION_ARROW_SIGN_MULTI =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_ARROW_SIGN_MULTI;
  static const TrafficSignIDGermany DIRECTION_ARROW_SIGN_SINGLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_ARROW_SIGN_SINGLE;
  static const TrafficSignIDGermany DIRECTION_SIGN_CONSOLIDATED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_CONSOLIDATED;
  static const TrafficSignIDGermany EXPRESSWAY_ARROW_DIRECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_ARROW_DIRECTION;
  static const TrafficSignIDGermany ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT;
  static const TrafficSignIDGermany STATION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_STATION;
  static const TrafficSignIDGermany GUIDE_SIGN_TABLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_SIGN_TABLE;
  static const TrafficSignIDGermany ADVANCE_DIRECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADVANCE_DIRECTION;
  static const TrafficSignIDGermany DIRECTIONS_SIGN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTIONS_SIGN;
  static const TrafficSignIDGermany EXPRESSWAY_ENTRANCE_DIRECTIONS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_ENTRANCE_DIRECTIONS;
  static const TrafficSignIDGermany INTERSTATE_ANNOUNCEMENT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_ANNOUNCEMENT;
  static const TrafficSignIDGermany INTERSTATE_ADVANCE_DIRECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_ADVANCE_DIRECTION;
  static const TrafficSignIDGermany HIGHWAY_EXIT_AHEAD_100_METER =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_100_METER;
  static const TrafficSignIDGermany HIGHWAY_EXIT_AHEAD_200_METER =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_200_METER;
  static const TrafficSignIDGermany HIGHWAY_EXIT_AHEAD_300_METER =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_HIGHWAY_EXIT_AHEAD_300_METER;
  static const TrafficSignIDGermany EXPRESSWAY_EXIT_100_METRES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_100_METRES;
  static const TrafficSignIDGermany EXPRESSWAY_EXIT_200_METRES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_200_METRES;
  static const TrafficSignIDGermany EXPRESSWAY_EXIT_300_METRES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_EXPRESSWAY_EXIT_300_METRES;
  static const TrafficSignIDGermany INTERSTATE_DISTANCE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_INTERSTATE_DISTANCE;
  static const TrafficSignIDGermany DETOUR_SKETCH =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_SKETCH;
  static const TrafficSignIDGermany DETOUR_STRAIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_STRAIGHT;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_LEFT;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_GET_IN_LEFT_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_GET_IN_LEFT_LANE;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_RIGHT;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE;
  static const TrafficSignIDGermany DETOUR_ON_DEMAND_STRAIGHTFORWARD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DETOUR_ON_DEMAND_STRAIGHTFORWARD;
  static const TrafficSignIDGermany TRANSITION_3_LEFT_2_TRANSITIONED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_3_LEFT_2_TRANSITIONED;
  static const TrafficSignIDGermany TRANSITION_1_LEFT_1_STRAIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_1_LEFT_1_STRAIGHT;
  static const TrafficSignIDGermany TRANSITION_3_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TRANSITION_3_RIGHT;
  static const TrafficSignIDGermany LANE_BOARD_NO_OPPOSITE_TWO_LANES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_LANE_BOARD_NO_OPPOSITE_TWO_LANES;
  static const TrafficSignIDGermany THREE_LANES_NO_ONCOMING_LANES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_THREE_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDGermany FOUR_LANES_NO_ONCOMING_LANES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_FOUR_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDGermany FIVE_LANES_NO_ONCOMING_LANES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_FIVE_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDGermany LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS;
  static const TrafficSignIDGermany NARROWING_LANES_1_LANE_FROM_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_1_LANE_FROM_RIGHT;
  static const TrafficSignIDGermany NARROWING_LANES_1_LANE_FROM_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_1_LANE_FROM_LEFT;
  static const TrafficSignIDGermany NARROWING_LANES_2_LANES_PLUS_1_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_NARROWING_LANES_2_LANES_PLUS_1_LEFT;
  static const TrafficSignIDGermany FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT;
  static const TrafficSignIDGermany MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT;
  static const TrafficSignIDGermany BARRIER =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER;
  static const TrafficSignIDGermany BARRIER_GATE_100_800 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_800;
  static const TrafficSignIDGermany BARRIER_GATE_100_1200 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_1200;
  static const TrafficSignIDGermany BARRIER_GATE_100_1600 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_100_1600;
  static const TrafficSignIDGermany BARRIER_GATE_250_1600 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE_250_1600;
  static const TrafficSignIDGermany BARRIER_GATE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_BARRIER_GATE;
  static const TrafficSignIDGermany ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT;
  static const TrafficSignIDGermany ROAD_WARNING_POST_ARROW_BEACON_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_ARROW_BEACON_RIGHT;
  static const TrafficSignIDGermany ROAD_WARNING_POST_SCRAPER_BEACON_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_LEFT;
  static const TrafficSignIDGermany ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT;
  static const TrafficSignIDGermany ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS;
  static const TrafficSignIDGermany DIRECTION_SIGN_LEFT_SINGLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_SINGLE;
  static const TrafficSignIDGermany DIRECTION_SIGN_LEFT_SMALL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_SMALL;
  static const TrafficSignIDGermany DIRECTION_SIGN_LEFT_MEDIUM =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_MEDIUM;
  static const TrafficSignIDGermany DIRECTION_SIGN_LEFT_LARGE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_LEFT_LARGE;
  static const TrafficSignIDGermany DIRECTION_SIGN_RIGHT_SINGLE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_SINGLE;
  static const TrafficSignIDGermany DIRECTION_SIGN_RIGHT_SMALL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_SMALL;
  static const TrafficSignIDGermany DIRECTION_SIGN_RIGHT_MEDIUM =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_MEDIUM;
  static const TrafficSignIDGermany DIRECTION_SIGN_RIGHT_LARGE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DIRECTION_SIGN_RIGHT_LARGE;
  static const TrafficSignIDGermany WARNING_PANEL_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_RIGHT;
  static const TrafficSignIDGermany WARNING_PANEL_LEFT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_LEFT;
  static const TrafficSignIDGermany WARNING_PANEL_STRAIGHT_BROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_STRAIGHT_BROAD;
  static const TrafficSignIDGermany WARNING_PANEL_STRAIGHT_HIGH =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_WARNING_PANEL_STRAIGHT_HIGH;
  static const TrafficSignIDGermany GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDGermany GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDGermany GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDGermany GREEN_ARROW =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_GREEN_ARROW;
  static const TrafficSignIDGermany ADDITION_LEFT_DIRECTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION;
  static const TrafficSignIDGermany ADDITION_LEFT_DIRECTION_1 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION_1;
  static const TrafficSignIDGermany ADDITION_LEFT_DIRECTION_DANGER_POINT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_DIRECTION_DANGER_POINT;
  static const TrafficSignIDGermany ADDITION_RIGHT_DIRECTION_1 =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_DIRECTION_1;
  static const TrafficSignIDGermany ADDITION_RIGHT_DIRECTION_DANGER_POINT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_DIRECTION_DANGER_POINT;
  static const TrafficSignIDGermany ADDITION_BOTH_DIRECTIONS_HORIZONTAL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BOTH_DIRECTIONS_HORIZONTAL;
  static const TrafficSignIDGermany ADDITION_BOTH_DIRECTIONS_VERTICAL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BOTH_DIRECTIONS_VERTICAL;
  static const TrafficSignIDGermany ADDITION_VALID_FOR_X_METERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_FOR_X_METERS;
  static const TrafficSignIDGermany ADDITION_VALID_FOR_X_KILOMETERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_FOR_X_KILOMETERS;
  static const TrafficSignIDGermany ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD;
  static const TrafficSignIDGermany ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD;
  static const TrafficSignIDGermany ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
  static const TrafficSignIDGermany ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD;
  static const TrafficSignIDGermany ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
  static const TrafficSignIDGermany ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD;
  static const TrafficSignIDGermany ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD;
  static const TrafficSignIDGermany ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
  static const TrafficSignIDGermany ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD;
  static const TrafficSignIDGermany ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
  static const TrafficSignIDGermany ADDITION_VALID_IN_X_METERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_X_METERS;
  static const TrafficSignIDGermany ADDITION_VALID_IN_X_KILOMETERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_X_KILOMETERS;
  static const TrafficSignIDGermany ADDITION_VALID_IN_200_KILOMETERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_200_KILOMETERS;
  static const TrafficSignIDGermany ADDITION_VALID_IN_400_METRES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_400_METRES;
  static const TrafficSignIDGermany ADDITION_VALID_IN_600_METRES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_600_METRES;
  static const TrafficSignIDGermany ADDITION_VALID_IN_2_KILOMETERS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_IN_2_KILOMETERS;
  static const TrafficSignIDGermany ADDITION_OIL_ON_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_OIL_ON_ROAD;
  static const TrafficSignIDGermany ADDITION_SMOKE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SMOKE;
  static const TrafficSignIDGermany ADDITION_LOOSE_GRAVEL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LOOSE_GRAVEL;
  static const TrafficSignIDGermany ADDITION_BUILDING_SITE_EXIT =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BUILDING_SITE_EXIT;
  static const TrafficSignIDGermany ADDITION_DAMAGED_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DAMAGED_ROAD;
  static const TrafficSignIDGermany ADDITION_DIRTY_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DIRTY_ROAD;
  static const TrafficSignIDGermany ADDITION_DANGER_OF_COLLISION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DANGER_OF_COLLISION;
  static const TrafficSignIDGermany ADDITION_TOAD_MIGRATION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TOAD_MIGRATION;
  static const TrafficSignIDGermany ADDITION_DANGER_OF_CONGESTION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_DANGER_OF_CONGESTION;
  static const TrafficSignIDGermany ADDITION_RESTRICTED_VIEW_DUE_TO_TREES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RESTRICTED_VIEW_DUE_TO_TREES;
  static const TrafficSignIDGermany DANGER_INDICATION_SMOKE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_DANGER_INDICATION_SMOKE;
  static const TrafficSignIDGermany ADDITION_CHILDREN_PLAYING_ON_ROAD =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CHILDREN_PLAYING_ON_ROAD;
  static const TrafficSignIDGermany ADDITION_WINTER_SPORTS_ALLOWED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_WINTER_SPORTS_ALLOWED;
  static const TrafficSignIDGermany ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
  static const TrafficSignIDGermany ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
  static const TrafficSignIDGermany ADDITION_ROLLING_HIGHWAY =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_ROLLING_HIGHWAY;
  static const TrafficSignIDGermany ADDITION_LOADING_AREA =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_LOADING_AREA;
  static const TrafficSignIDGermany ADDITION_END =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_END;
  static const TrafficSignIDGermany ADDITION_GET_OFF_BICYCLES =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GET_OFF_BICYCLES;
  static const TrafficSignIDGermany ADDITION_NO_MOPEDS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NO_MOPEDS;
  static const TrafficSignIDGermany ADDITION_GREEN_WAVE_AT_KM_H =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GREEN_WAVE_AT_KM_H;
  static const TrafficSignIDGermany ADDITION_STOP_HERE_AT_RED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_STOP_HERE_AT_RED;
  static const TrafficSignIDGermany ADDITION_NOISE_CONTROL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NOISE_CONTROL;
  static const TrafficSignIDGermany ADDITION_INFLOW_REGULATION =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_INFLOW_REGULATION;
  static const TrafficSignIDGermany ADDITION_SECONDARY_LANE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SECONDARY_LANE;
  static const TrafficSignIDGermany ADDITION_SCHOOL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_SCHOOL;
  static const TrafficSignIDGermany ADDITION_KINDERGARTEN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_KINDERGARTEN;
  static const TrafficSignIDGermany ADDITION_RETIREMENT_HOME =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RETIREMENT_HOME;
  static const TrafficSignIDGermany ADDITION_HOSPITAL =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_HOSPITAL;
  static const TrafficSignIDGermany ADDITION_RESIDENTS_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_RESIDENTS_PERMITTED;
  static const TrafficSignIDGermany ADDITION_BICYCLES_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_BICYCLES_PERMITTED;
  static const TrafficSignIDGermany ADDITION_CARS_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_CARS_PERMITTED;
  static const TrafficSignIDGermany ADDITION_AGRICULTURE_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_AGRICULTURE_PERMITTED;
  static const TrafficSignIDGermany ADDITION_FOREST_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_FOREST_PERMITTED;
  static const TrafficSignIDGermany ADDITION_AGRICULTURE_FOREST_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_AGRICULTURE_FOREST_PERMITTED;
  static const TrafficSignIDGermany ADDITION_GREEN_STICKER_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_GREEN_STICKER_PERMITTED;
  static const TrafficSignIDGermany ADDITION_TIME_PERIOD_PERMITTED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_TIME_PERIOD_PERMITTED;
  static const TrafficSignIDGermany ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS;
  static const TrafficSignIDGermany ADDITION_MIN_MASS_3_5_TONS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_MIN_MASS_3_5_TONS;
  static const TrafficSignIDGermany ADDITION_NO_WATER_POLLUTANTS_LOADED =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_NO_WATER_POLLUTANTS_LOADED;
  static const TrafficSignIDGermany ALLOWED_MASS_7_5_TONS =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ALLOWED_MASS_7_5_TONS;
  static const TrafficSignIDGermany ADDITION_VALID_ON_SHOULDER =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_ON_SHOULDER;
  static const TrafficSignIDGermany ADDITION_VALID_WHEN_WET =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_ADDITION_VALID_WHEN_WET;
  static const TrafficSignIDGermany LINE_MARKING_MISSING =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_LINE_MARKING_MISSING;
  static const TrafficSignIDGermany UNKNOWN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_UNKNOWN;
  static inline bool TrafficSignIDGermany_IsValid(int value) {
    return TrafficSignIDGermanyEnum_TrafficSignIDGermany_IsValid(value);
  }
  static const TrafficSignIDGermany TrafficSignIDGermany_MIN =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_MIN;
  static const TrafficSignIDGermany TrafficSignIDGermany_MAX =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_MAX;
  static const int TrafficSignIDGermany_ARRAYSIZE =
    TrafficSignIDGermanyEnum_TrafficSignIDGermany_TrafficSignIDGermany_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDGermany_descriptor() {
    return TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor();
  }
  static inline const ::std::string& TrafficSignIDGermany_Name(TrafficSignIDGermany value) {
    return TrafficSignIDGermanyEnum_TrafficSignIDGermany_Name(value);
  }
  static inline bool TrafficSignIDGermany_Parse(const ::std::string& name,
      TrafficSignIDGermany* value) {
    return TrafficSignIDGermanyEnum_TrafficSignIDGermany_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDGermanyEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDZamundaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDZamundaEnum) */ {
 public:
  TrafficSignIDZamundaEnum();
  virtual ~TrafficSignIDZamundaEnum();

  TrafficSignIDZamundaEnum(const TrafficSignIDZamundaEnum& from);

  inline TrafficSignIDZamundaEnum& operator=(const TrafficSignIDZamundaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDZamundaEnum(TrafficSignIDZamundaEnum&& from) noexcept
    : TrafficSignIDZamundaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDZamundaEnum& operator=(TrafficSignIDZamundaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDZamundaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDZamundaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDZamundaEnum*>(
               &_TrafficSignIDZamundaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrafficSignIDZamundaEnum* other);
  friend void swap(TrafficSignIDZamundaEnum& a, TrafficSignIDZamundaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDZamundaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDZamundaEnum>(NULL);
  }

  TrafficSignIDZamundaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDZamundaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDZamundaEnum& from);
  void MergeFrom(const TrafficSignIDZamundaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDZamundaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamunda;
  static const TrafficSignIDZamunda WARNING_DANGER_SPOT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_DANGER_SPOT;
  static const TrafficSignIDZamunda WARNING_RIGHT_BEFORE_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_RIGHT_BEFORE_LEFT;
  static const TrafficSignIDZamunda WARNING_LEFT_CURVE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_LEFT_CURVE;
  static const TrafficSignIDZamunda WARNING_RIGHT_CURVE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_RIGHT_CURVE;
  static const TrafficSignIDZamunda WARNING_STEEP_HILL_DOWNWARDS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_STEEP_HILL_DOWNWARDS;
  static const TrafficSignIDZamunda WARNING_SLIPPERY_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_SLIPPERY_ROAD;
  static const TrafficSignIDZamunda WARNING_CONSTRUCTION_SITE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_CONSTRUCTION_SITE;
  static const TrafficSignIDZamunda WARNING_TRAFFIC_QUEUES_LIKELY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_TRAFFIC_QUEUES_LIKELY;
  static const TrafficSignIDZamunda WARNING_ONCOMING_TRAFFIC =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_ONCOMING_TRAFFIC;
  static const TrafficSignIDZamunda WARNING_TRAFFIC_LIGHTS_AHEAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_TRAFFIC_LIGHTS_AHEAD;
  static const TrafficSignIDZamunda WARNING_PEDESTRIANS_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PEDESTRIANS_RIGHT;
  static const TrafficSignIDZamunda WARNING_PEDESTRIANS_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PEDESTRIANS_LEFT;
  static const TrafficSignIDZamunda WARNING_CROSSING_CYCLIST =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_CROSSING_CYCLIST;
  static const TrafficSignIDZamunda WARNING_ANIMAL_CROSSING_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_ANIMAL_CROSSING_RIGHT;
  static const TrafficSignIDZamunda WARNING_LOOSE_GRAVEL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_LOOSE_GRAVEL;
  static const TrafficSignIDZamunda RAILWAY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RAILWAY;
  static const TrafficSignIDZamunda YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_YIELD;
  static const TrafficSignIDZamunda STOP =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_STOP;
  static const TrafficSignIDZamunda PRIORITY_OPPOSITE_DIRECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY_OPPOSITE_DIRECTION;
  static const TrafficSignIDZamunda TURN_RIGHT_AHEAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TURN_RIGHT_AHEAD;
  static const TrafficSignIDZamunda TURN_LEFT_AHEAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TURN_LEFT_AHEAD;
  static const TrafficSignIDZamunda KEEP_STRAIGHT_AHEAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_KEEP_STRAIGHT_AHEAD;
  static const TrafficSignIDZamunda PRESCRIBED_DIRECTION_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_DIRECTION_RIGHT;
  static const TrafficSignIDZamunda ROUNDABOUT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROUNDABOUT;
  static const TrafficSignIDZamunda ONEWAY_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ONEWAY_RIGHT;
  static const TrafficSignIDZamunda ONEWAY_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ONEWAY_LEFT;
  static const TrafficSignIDZamunda PRESCRIBED_PASSING_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_PASSING_LEFT;
  static const TrafficSignIDZamunda PRESCRIBED_PASSING_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRESCRIBED_PASSING_RIGHT;
  static const TrafficSignIDZamunda DO_NOT_DRIVE_ON_SHOULDER_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE;
  static const TrafficSignIDZamunda DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE;
  static const TrafficSignIDZamunda DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE;
  static const TrafficSignIDZamunda BUS_STOP =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BUS_STOP;
  static const TrafficSignIDZamunda BIKEWAY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BIKEWAY;
  static const TrafficSignIDZamunda SIDEWALK =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_SIDEWALK;
  static const TrafficSignIDZamunda PEDESTRIAN_AND_BICYCLE_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_AND_BICYCLE_ROAD;
  static const TrafficSignIDZamunda PEDESTRIAN_ZONE_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_ZONE_START;
  static const TrafficSignIDZamunda PEDESTRIAN_ZONE_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIAN_ZONE_END;
  static const TrafficSignIDZamunda BICYCLE_ROAD_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BICYCLE_ROAD_START;
  static const TrafficSignIDZamunda BICYCLE_ROAD_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BICYCLE_ROAD_END;
  static const TrafficSignIDZamunda BUSLANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BUSLANE;
  static const TrafficSignIDZamunda BAN_ALL_VEHICLES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_ALL_VEHICLES;
  static const TrafficSignIDZamunda BAN_CARS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_CARS;
  static const TrafficSignIDZamunda BAN_TRUCKS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_TRUCKS;
  static const TrafficSignIDZamunda BAN_BICYCLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_BICYCLE;
  static const TrafficSignIDZamunda BAN_MOTORCYCLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_MOTORCYCLE;
  static const TrafficSignIDZamunda BAN_BUS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_BUS;
  static const TrafficSignIDZamunda BAN_PEDESTRIAN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_PEDESTRIAN;
  static const TrafficSignIDZamunda BAN_CAR_TRUCK_BUS_MOTORCYCLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_CAR_TRUCK_BUS_MOTORCYCLE;
  static const TrafficSignIDZamunda BAN_VEHICLES_CARRYING_DANGEROUS_GOODS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BAN_VEHICLES_CARRYING_DANGEROUS_GOODS;
  static const TrafficSignIDZamunda MAX_WEIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_WEIGHT;
  static const TrafficSignIDZamunda MAX_WIDTH =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_WIDTH;
  static const TrafficSignIDZamunda MAX_HEIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_HEIGHT;
  static const TrafficSignIDZamunda MAX_LENGTH =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_LENGTH;
  static const TrafficSignIDZamunda NO_ENTRY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_ENTRY;
  static const TrafficSignIDZamunda ENVIRONMENTAL_ZONE_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ENVIRONMENTAL_ZONE_START;
  static const TrafficSignIDZamunda ENVIRONMENTAL_ZONE_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ENVIRONMENTAL_ZONE_END;
  static const TrafficSignIDZamunda U_TURN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_U_TURN;
  static const TrafficSignIDZamunda MAX_SPEED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED;
  static const TrafficSignIDZamunda MAX_SPEED_ZONE_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_ZONE_START;
  static const TrafficSignIDZamunda MAX_SPEED_ZONE_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_ZONE_END;
  static const TrafficSignIDZamunda MIN_SPEED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MIN_SPEED;
  static const TrafficSignIDZamunda NO_OVERTAKING_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_START;
  static const TrafficSignIDZamunda NO_OVERTAKING_TRUCKS_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_TRUCKS_START;
  static const TrafficSignIDZamunda MAX_SPEED_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MAX_SPEED_END;
  static const TrafficSignIDZamunda NO_OVERTAKING_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_END;
  static const TrafficSignIDZamunda NO_OVERTAKING_TRUCKS_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_OVERTAKING_TRUCKS_END;
  static const TrafficSignIDZamunda ALL_MAX_SPEED_AND_OVERTAKING_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ALL_MAX_SPEED_AND_OVERTAKING_END;
  static const TrafficSignIDZamunda NO_STOP_START_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_STOP_START_RIGHT;
  static const TrafficSignIDZamunda NO_STOP_CENTER_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NO_STOP_CENTER_RIGHT;
  static const TrafficSignIDZamunda RESTRICTED_STOP_CENTER_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RESTRICTED_STOP_CENTER_RIGHT;
  static const TrafficSignIDZamunda RIGHT_OF_WAY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_RIGHT_OF_WAY;
  static const TrafficSignIDZamunda PRIORITY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY;
  static const TrafficSignIDZamunda PRIORITY_OVER_ONCOMING =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PRIORITY_OVER_ONCOMING;
  static const TrafficSignIDZamunda TOWN_SIGN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOWN_SIGN;
  static const TrafficSignIDZamunda TOWN_SIGN_BACK =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOWN_SIGN_BACK;
  static const TrafficSignIDZamunda PARKING_AREA =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA;
  static const TrafficSignIDZamunda PARKING_AREA_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_LEFT;
  static const TrafficSignIDZamunda PARKING_AREA_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_RIGHT;
  static const TrafficSignIDZamunda PARKING_AREA_RIGHT_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PARKING_AREA_RIGHT_LEFT;
  static const TrafficSignIDZamunda TRAFFIC_CALMED_AREA_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_CALMED_AREA_START;
  static const TrafficSignIDZamunda TRAFFIC_CALMED_AREA_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_CALMED_AREA_END;
  static const TrafficSignIDZamunda TUNNEL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TUNNEL;
  static const TrafficSignIDZamunda EMERGENCY_STOP =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EMERGENCY_STOP;
  static const TrafficSignIDZamunda INTERSTATE_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_START;
  static const TrafficSignIDZamunda INTERSTATE_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_END;
  static const TrafficSignIDZamunda HIGHWAY_START =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_START;
  static const TrafficSignIDZamunda HIGHWAY_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_END;
  static const TrafficSignIDZamunda HIGHWAY_EXIT_WITH_PLACE_NAME =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_WITH_PLACE_NAME;
  static const TrafficSignIDZamunda EXIT_ROUTE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_ROUTE;
  static const TrafficSignIDZamunda HIGHWAY_EXIT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT;
  static const TrafficSignIDZamunda EXIT_BUILT_UP =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_BUILT_UP;
  static const TrafficSignIDZamunda EXIT_GENERAL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXIT_GENERAL;
  static const TrafficSignIDZamunda PEDESTRIANS_CROSSING =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_PEDESTRIANS_CROSSING;
  static const TrafficSignIDZamunda WATER_PROTECTION_ZONE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WATER_PROTECTION_ZONE;
  static const TrafficSignIDZamunda TRAFFIC_ASSISTANTS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRAFFIC_ASSISTANTS;
  static const TrafficSignIDZamunda DEAD_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DEAD_END;
  static const TrafficSignIDZamunda POLICE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_POLICE;
  static const TrafficSignIDZamunda EMERGENCY_CALL_STATION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EMERGENCY_CALL_STATION;
  static const TrafficSignIDZamunda GAS_STATION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GAS_STATION;
  static const TrafficSignIDZamunda CAMP_AND_CARAVAN_SITE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_CAMP_AND_CARAVAN_SITE;
  static const TrafficSignIDZamunda ATTRACTION_POINT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ATTRACTION_POINT;
  static const TrafficSignIDZamunda TOURISTIC_ROUTE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TOURISTIC_ROUTE;
  static const TrafficSignIDZamunda NEARBY_ATTRACTION_POINT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NEARBY_ATTRACTION_POINT;
  static const TrafficSignIDZamunda HIGHWAY_INTERSECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_INTERSECTION;
  static const TrafficSignIDZamunda DIRECTION_ARROW_SIGN_MULTI =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_ARROW_SIGN_MULTI;
  static const TrafficSignIDZamunda DIRECTION_ARROW_SIGN_SINGLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_ARROW_SIGN_SINGLE;
  static const TrafficSignIDZamunda DIRECTION_SIGN_CONSOLIDATED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_CONSOLIDATED;
  static const TrafficSignIDZamunda EXPRESSWAY_ARROW_DIRECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_ARROW_DIRECTION;
  static const TrafficSignIDZamunda ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT;
  static const TrafficSignIDZamunda STATION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_STATION;
  static const TrafficSignIDZamunda GUIDE_SIGN_TABLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_SIGN_TABLE;
  static const TrafficSignIDZamunda ADVANCE_DIRECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADVANCE_DIRECTION;
  static const TrafficSignIDZamunda DIRECTIONS_SIGN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTIONS_SIGN;
  static const TrafficSignIDZamunda EXPRESSWAY_ENTRANCE_DIRECTIONS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_ENTRANCE_DIRECTIONS;
  static const TrafficSignIDZamunda INTERSTATE_ANNOUNCEMENT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_ANNOUNCEMENT;
  static const TrafficSignIDZamunda INTERSTATE_ADVANCE_DIRECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_ADVANCE_DIRECTION;
  static const TrafficSignIDZamunda HIGHWAY_EXIT_AHEAD_100_METER =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_100_METER;
  static const TrafficSignIDZamunda HIGHWAY_EXIT_AHEAD_200_METER =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_200_METER;
  static const TrafficSignIDZamunda HIGHWAY_EXIT_AHEAD_300_METER =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_HIGHWAY_EXIT_AHEAD_300_METER;
  static const TrafficSignIDZamunda EXPRESSWAY_EXIT_100_METRES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_100_METRES;
  static const TrafficSignIDZamunda EXPRESSWAY_EXIT_200_METRES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_200_METRES;
  static const TrafficSignIDZamunda EXPRESSWAY_EXIT_300_METRES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_EXPRESSWAY_EXIT_300_METRES;
  static const TrafficSignIDZamunda INTERSTATE_DISTANCE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_INTERSTATE_DISTANCE;
  static const TrafficSignIDZamunda DETOUR_SKETCH =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_SKETCH;
  static const TrafficSignIDZamunda DETOUR_STRAIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_STRAIGHT;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_LEFT;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_GET_IN_LEFT_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_GET_IN_LEFT_LANE;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_RIGHT;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE;
  static const TrafficSignIDZamunda DETOUR_ON_DEMAND_STRAIGHTFORWARD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DETOUR_ON_DEMAND_STRAIGHTFORWARD;
  static const TrafficSignIDZamunda TRANSITION_3_LEFT_2_TRANSITIONED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_3_LEFT_2_TRANSITIONED;
  static const TrafficSignIDZamunda TRANSITION_1_LEFT_1_STRAIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_1_LEFT_1_STRAIGHT;
  static const TrafficSignIDZamunda TRANSITION_3_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TRANSITION_3_RIGHT;
  static const TrafficSignIDZamunda LANE_BOARD_NO_OPPOSITE_TWO_LANES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LANE_BOARD_NO_OPPOSITE_TWO_LANES;
  static const TrafficSignIDZamunda THREE_LANES_NO_ONCOMING_LANES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_THREE_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDZamunda FOUR_LANES_NO_ONCOMING_LANES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FOUR_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDZamunda FIVE_LANES_NO_ONCOMING_LANES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FIVE_LANES_NO_ONCOMING_LANES;
  static const TrafficSignIDZamunda LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS;
  static const TrafficSignIDZamunda NARROWING_LANES_1_LANE_FROM_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_1_LANE_FROM_RIGHT;
  static const TrafficSignIDZamunda NARROWING_LANES_1_LANE_FROM_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_1_LANE_FROM_LEFT;
  static const TrafficSignIDZamunda NARROWING_LANES_2_LANES_PLUS_1_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_NARROWING_LANES_2_LANES_PLUS_1_LEFT;
  static const TrafficSignIDZamunda FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT;
  static const TrafficSignIDZamunda MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT;
  static const TrafficSignIDZamunda BARRIER =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER;
  static const TrafficSignIDZamunda BARRIER_GATE_100_800 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_800;
  static const TrafficSignIDZamunda BARRIER_GATE_100_1200 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_1200;
  static const TrafficSignIDZamunda BARRIER_GATE_100_1600 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_100_1600;
  static const TrafficSignIDZamunda BARRIER_GATE_250_1600 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE_250_1600;
  static const TrafficSignIDZamunda BARRIER_GATE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_BARRIER_GATE;
  static const TrafficSignIDZamunda ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT;
  static const TrafficSignIDZamunda ROAD_WARNING_POST_ARROW_BEACON_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_ARROW_BEACON_RIGHT;
  static const TrafficSignIDZamunda ROAD_WARNING_POST_SCRAPER_BEACON_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_LEFT;
  static const TrafficSignIDZamunda ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT;
  static const TrafficSignIDZamunda ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS;
  static const TrafficSignIDZamunda DIRECTION_SIGN_LEFT_SINGLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_SINGLE;
  static const TrafficSignIDZamunda DIRECTION_SIGN_LEFT_SMALL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_SMALL;
  static const TrafficSignIDZamunda DIRECTION_SIGN_LEFT_MEDIUM =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_MEDIUM;
  static const TrafficSignIDZamunda DIRECTION_SIGN_LEFT_LARGE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_LEFT_LARGE;
  static const TrafficSignIDZamunda DIRECTION_SIGN_RIGHT_SINGLE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_SINGLE;
  static const TrafficSignIDZamunda DIRECTION_SIGN_RIGHT_SMALL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_SMALL;
  static const TrafficSignIDZamunda DIRECTION_SIGN_RIGHT_MEDIUM =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_MEDIUM;
  static const TrafficSignIDZamunda DIRECTION_SIGN_RIGHT_LARGE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DIRECTION_SIGN_RIGHT_LARGE;
  static const TrafficSignIDZamunda WARNING_PANEL_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_RIGHT;
  static const TrafficSignIDZamunda WARNING_PANEL_LEFT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_LEFT;
  static const TrafficSignIDZamunda WARNING_PANEL_STRAIGHT_BROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_STRAIGHT_BROAD;
  static const TrafficSignIDZamunda WARNING_PANEL_STRAIGHT_HIGH =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_WARNING_PANEL_STRAIGHT_HIGH;
  static const TrafficSignIDZamunda GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDZamunda GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDZamunda GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT;
  static const TrafficSignIDZamunda GREEN_ARROW =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_GREEN_ARROW;
  static const TrafficSignIDZamunda ADDITION_LEFT_DIRECTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION;
  static const TrafficSignIDZamunda ADDITION_LEFT_DIRECTION_1 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION_1;
  static const TrafficSignIDZamunda ADDITION_LEFT_DIRECTION_DANGER_POINT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_DIRECTION_DANGER_POINT;
  static const TrafficSignIDZamunda ADDITION_RIGHT_DIRECTION_1 =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_DIRECTION_1;
  static const TrafficSignIDZamunda ADDITION_RIGHT_DIRECTION_DANGER_POINT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_DIRECTION_DANGER_POINT;
  static const TrafficSignIDZamunda ADDITION_BOTH_DIRECTIONS_HORIZONTAL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BOTH_DIRECTIONS_HORIZONTAL;
  static const TrafficSignIDZamunda ADDITION_BOTH_DIRECTIONS_VERTICAL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BOTH_DIRECTIONS_VERTICAL;
  static const TrafficSignIDZamunda ADDITION_VALID_FOR_X_METERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_FOR_X_METERS;
  static const TrafficSignIDZamunda ADDITION_VALID_FOR_X_KILOMETERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_FOR_X_KILOMETERS;
  static const TrafficSignIDZamunda ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD;
  static const TrafficSignIDZamunda ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD;
  static const TrafficSignIDZamunda ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
  static const TrafficSignIDZamunda ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD;
  static const TrafficSignIDZamunda ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
  static const TrafficSignIDZamunda ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD;
  static const TrafficSignIDZamunda ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD;
  static const TrafficSignIDZamunda ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
  static const TrafficSignIDZamunda ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD;
  static const TrafficSignIDZamunda ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_X_METERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_X_METERS;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_X_KILOMETERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_X_KILOMETERS;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_200_KILOMETERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_200_KILOMETERS;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_400_METRES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_400_METRES;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_600_METRES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_600_METRES;
  static const TrafficSignIDZamunda ADDITION_VALID_IN_2_KILOMETERS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_IN_2_KILOMETERS;
  static const TrafficSignIDZamunda ADDITION_OIL_ON_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_OIL_ON_ROAD;
  static const TrafficSignIDZamunda ADDITION_SMOKE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SMOKE;
  static const TrafficSignIDZamunda ADDITION_LOOSE_GRAVEL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LOOSE_GRAVEL;
  static const TrafficSignIDZamunda ADDITION_BUILDING_SITE_EXIT =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BUILDING_SITE_EXIT;
  static const TrafficSignIDZamunda ADDITION_DAMAGED_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DAMAGED_ROAD;
  static const TrafficSignIDZamunda ADDITION_DIRTY_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DIRTY_ROAD;
  static const TrafficSignIDZamunda ADDITION_DANGER_OF_COLLISION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DANGER_OF_COLLISION;
  static const TrafficSignIDZamunda ADDITION_TOAD_MIGRATION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TOAD_MIGRATION;
  static const TrafficSignIDZamunda ADDITION_DANGER_OF_CONGESTION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_DANGER_OF_CONGESTION;
  static const TrafficSignIDZamunda ADDITION_RESTRICTED_VIEW_DUE_TO_TREES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RESTRICTED_VIEW_DUE_TO_TREES;
  static const TrafficSignIDZamunda DANGER_INDICATION_SMOKE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_DANGER_INDICATION_SMOKE;
  static const TrafficSignIDZamunda ADDITION_CHILDREN_PLAYING_ON_ROAD =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CHILDREN_PLAYING_ON_ROAD;
  static const TrafficSignIDZamunda ADDITION_WINTER_SPORTS_ALLOWED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_WINTER_SPORTS_ALLOWED;
  static const TrafficSignIDZamunda ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
  static const TrafficSignIDZamunda ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
  static const TrafficSignIDZamunda ADDITION_ROLLING_HIGHWAY =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_ROLLING_HIGHWAY;
  static const TrafficSignIDZamunda ADDITION_LOADING_AREA =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_LOADING_AREA;
  static const TrafficSignIDZamunda ADDITION_END =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_END;
  static const TrafficSignIDZamunda ADDITION_GET_OFF_BICYCLES =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GET_OFF_BICYCLES;
  static const TrafficSignIDZamunda ADDITION_NO_MOPEDS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NO_MOPEDS;
  static const TrafficSignIDZamunda ADDITION_GREEN_WAVE_AT_KM_H =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GREEN_WAVE_AT_KM_H;
  static const TrafficSignIDZamunda ADDITION_STOP_HERE_AT_RED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_STOP_HERE_AT_RED;
  static const TrafficSignIDZamunda ADDITION_NOISE_CONTROL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NOISE_CONTROL;
  static const TrafficSignIDZamunda ADDITION_INFLOW_REGULATION =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_INFLOW_REGULATION;
  static const TrafficSignIDZamunda ADDITION_SECONDARY_LANE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SECONDARY_LANE;
  static const TrafficSignIDZamunda ADDITION_SCHOOL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_SCHOOL;
  static const TrafficSignIDZamunda ADDITION_KINDERGARTEN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_KINDERGARTEN;
  static const TrafficSignIDZamunda ADDITION_RETIREMENT_HOME =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RETIREMENT_HOME;
  static const TrafficSignIDZamunda ADDITION_HOSPITAL =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_HOSPITAL;
  static const TrafficSignIDZamunda ADDITION_RESIDENTS_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_RESIDENTS_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_BICYCLES_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_BICYCLES_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_CARS_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_CARS_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_AGRICULTURE_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_AGRICULTURE_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_FOREST_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_FOREST_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_AGRICULTURE_FOREST_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_AGRICULTURE_FOREST_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_GREEN_STICKER_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_GREEN_STICKER_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_TIME_PERIOD_PERMITTED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_TIME_PERIOD_PERMITTED;
  static const TrafficSignIDZamunda ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS;
  static const TrafficSignIDZamunda ADDITION_MIN_MASS_3_5_TONS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_MIN_MASS_3_5_TONS;
  static const TrafficSignIDZamunda ADDITION_NO_WATER_POLLUTANTS_LOADED =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_NO_WATER_POLLUTANTS_LOADED;
  static const TrafficSignIDZamunda ALLOWED_MASS_7_5_TONS =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ALLOWED_MASS_7_5_TONS;
  static const TrafficSignIDZamunda ADDITION_VALID_ON_SHOULDER =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_ON_SHOULDER;
  static const TrafficSignIDZamunda ADDITION_VALID_WHEN_WET =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_ADDITION_VALID_WHEN_WET;
  static const TrafficSignIDZamunda LINE_MARKING_MISSING =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_LINE_MARKING_MISSING;
  static const TrafficSignIDZamunda UNKNOWN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_UNKNOWN;
  static inline bool TrafficSignIDZamunda_IsValid(int value) {
    return TrafficSignIDZamundaEnum_TrafficSignIDZamunda_IsValid(value);
  }
  static const TrafficSignIDZamunda TrafficSignIDZamunda_MIN =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_MIN;
  static const TrafficSignIDZamunda TrafficSignIDZamunda_MAX =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_MAX;
  static const int TrafficSignIDZamunda_ARRAYSIZE =
    TrafficSignIDZamundaEnum_TrafficSignIDZamunda_TrafficSignIDZamunda_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDZamunda_descriptor() {
    return TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor();
  }
  static inline const ::std::string& TrafficSignIDZamunda_Name(TrafficSignIDZamunda value) {
    return TrafficSignIDZamundaEnum_TrafficSignIDZamunda_Name(value);
  }
  static inline bool TrafficSignIDZamunda_Parse(const ::std::string& name,
      TrafficSignIDZamunda* value) {
    return TrafficSignIDZamundaEnum_TrafficSignIDZamunda_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDZamundaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDUsaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDUsaEnum) */ {
 public:
  TrafficSignIDUsaEnum();
  virtual ~TrafficSignIDUsaEnum();

  TrafficSignIDUsaEnum(const TrafficSignIDUsaEnum& from);

  inline TrafficSignIDUsaEnum& operator=(const TrafficSignIDUsaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDUsaEnum(TrafficSignIDUsaEnum&& from) noexcept
    : TrafficSignIDUsaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDUsaEnum& operator=(TrafficSignIDUsaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDUsaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDUsaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDUsaEnum*>(
               &_TrafficSignIDUsaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TrafficSignIDUsaEnum* other);
  friend void swap(TrafficSignIDUsaEnum& a, TrafficSignIDUsaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDUsaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDUsaEnum>(NULL);
  }

  TrafficSignIDUsaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDUsaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDUsaEnum& from);
  void MergeFrom(const TrafficSignIDUsaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDUsaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsa;
  static const TrafficSignIDUsa MAX_SPEED =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_MAX_SPEED;
  static const TrafficSignIDUsa U_TURN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_U_TURN;
  static const TrafficSignIDUsa ROAD_WORK_AHEAD =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_ROAD_WORK_AHEAD;
  static const TrafficSignIDUsa NO_PARKING_ANY_TIME =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING_ANY_TIME;
  static const TrafficSignIDUsa NO_STANDING =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_STANDING;
  static const TrafficSignIDUsa TOW_AWAY_ZONE =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_TOW_AWAY_ZONE;
  static const TrafficSignIDUsa ONE_WAY_LEFT =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_ONE_WAY_LEFT;
  static const TrafficSignIDUsa ONE_WAY_RIGHT =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_ONE_WAY_RIGHT;
  static const TrafficSignIDUsa DO_NOT_ENTER =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_DO_NOT_ENTER;
  static const TrafficSignIDUsa NO_LEFT_TURN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_LEFT_TURN;
  static const TrafficSignIDUsa RIGHT_TURN_ONLY =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_RIGHT_TURN_ONLY;
  static const TrafficSignIDUsa TURN_ONLY_LANES =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_TURN_ONLY_LANES;
  static const TrafficSignIDUsa NO_RIGHT_TURN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_RIGHT_TURN;
  static const TrafficSignIDUsa KEEP_RIGHT =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_KEEP_RIGHT;
  static const TrafficSignIDUsa SIGNAL_AHEAD =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_SIGNAL_AHEAD;
  static const TrafficSignIDUsa LOADING_ZONE =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_LOADING_ZONE;
  static const TrafficSignIDUsa NO_PARKING =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING;
  static const TrafficSignIDUsa LEFT_TURN_ONLY =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_LEFT_TURN_ONLY;
  static const TrafficSignIDUsa NO_STRAIGHT_THROUGH =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_STRAIGHT_THROUGH;
  static const TrafficSignIDUsa LEFT_REVERSE_TURN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_LEFT_REVERSE_TURN;
  static const TrafficSignIDUsa PEDESTRIAN_WARNING =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_PEDESTRIAN_WARNING;
  static const TrafficSignIDUsa DIAGONAL_DOWNWARD_LEFT_ARROW =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_DIAGONAL_DOWNWARD_LEFT_ARROW;
  static const TrafficSignIDUsa RIGHT_LANE_ENDS =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_RIGHT_LANE_ENDS;
  static const TrafficSignIDUsa RESERVED_HANDICAP_PARKING =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_RESERVED_HANDICAP_PARKING;
  static const TrafficSignIDUsa NO_PARKING_BUS_STOP =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_NO_PARKING_BUS_STOP;
  static const TrafficSignIDUsa ON_PAVEMENT =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_ON_PAVEMENT;
  static const TrafficSignIDUsa DO_NOT_BLOCK_INTERSECTION =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_DO_NOT_BLOCK_INTERSECTION;
  static const TrafficSignIDUsa WARNING_ARROW_LEFT =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_WARNING_ARROW_LEFT;
  static const TrafficSignIDUsa UNKNOWN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_UNKNOWN;
  static inline bool TrafficSignIDUsa_IsValid(int value) {
    return TrafficSignIDUsaEnum_TrafficSignIDUsa_IsValid(value);
  }
  static const TrafficSignIDUsa TrafficSignIDUsa_MIN =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_MIN;
  static const TrafficSignIDUsa TrafficSignIDUsa_MAX =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_MAX;
  static const int TrafficSignIDUsa_ARRAYSIZE =
    TrafficSignIDUsaEnum_TrafficSignIDUsa_TrafficSignIDUsa_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDUsa_descriptor() {
    return TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor();
  }
  static inline const ::std::string& TrafficSignIDUsa_Name(TrafficSignIDUsa value) {
    return TrafficSignIDUsaEnum_TrafficSignIDUsa_Name(value);
  }
  static inline bool TrafficSignIDUsa_Parse(const ::std::string& name,
      TrafficSignIDUsa* value) {
    return TrafficSignIDUsaEnum_TrafficSignIDUsa_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDUsaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDChinaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDChinaEnum) */ {
 public:
  TrafficSignIDChinaEnum();
  virtual ~TrafficSignIDChinaEnum();

  TrafficSignIDChinaEnum(const TrafficSignIDChinaEnum& from);

  inline TrafficSignIDChinaEnum& operator=(const TrafficSignIDChinaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDChinaEnum(TrafficSignIDChinaEnum&& from) noexcept
    : TrafficSignIDChinaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDChinaEnum& operator=(TrafficSignIDChinaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDChinaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDChinaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDChinaEnum*>(
               &_TrafficSignIDChinaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TrafficSignIDChinaEnum* other);
  friend void swap(TrafficSignIDChinaEnum& a, TrafficSignIDChinaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDChinaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDChinaEnum>(NULL);
  }

  TrafficSignIDChinaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDChinaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDChinaEnum& from);
  void MergeFrom(const TrafficSignIDChinaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDChinaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChina;
  static const TrafficSignIDChina MAX_SPEED =
    TrafficSignIDChinaEnum_TrafficSignIDChina_MAX_SPEED;
  static const TrafficSignIDChina UNKNOWN =
    TrafficSignIDChinaEnum_TrafficSignIDChina_UNKNOWN;
  static inline bool TrafficSignIDChina_IsValid(int value) {
    return TrafficSignIDChinaEnum_TrafficSignIDChina_IsValid(value);
  }
  static const TrafficSignIDChina TrafficSignIDChina_MIN =
    TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_MIN;
  static const TrafficSignIDChina TrafficSignIDChina_MAX =
    TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_MAX;
  static const int TrafficSignIDChina_ARRAYSIZE =
    TrafficSignIDChinaEnum_TrafficSignIDChina_TrafficSignIDChina_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDChina_descriptor() {
    return TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor();
  }
  static inline const ::std::string& TrafficSignIDChina_Name(TrafficSignIDChina value) {
    return TrafficSignIDChinaEnum_TrafficSignIDChina_Name(value);
  }
  static inline bool TrafficSignIDChina_Parse(const ::std::string& name,
      TrafficSignIDChina* value) {
    return TrafficSignIDChinaEnum_TrafficSignIDChina_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDChinaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDSpainEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDSpainEnum) */ {
 public:
  TrafficSignIDSpainEnum();
  virtual ~TrafficSignIDSpainEnum();

  TrafficSignIDSpainEnum(const TrafficSignIDSpainEnum& from);

  inline TrafficSignIDSpainEnum& operator=(const TrafficSignIDSpainEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDSpainEnum(TrafficSignIDSpainEnum&& from) noexcept
    : TrafficSignIDSpainEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDSpainEnum& operator=(TrafficSignIDSpainEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDSpainEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDSpainEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDSpainEnum*>(
               &_TrafficSignIDSpainEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TrafficSignIDSpainEnum* other);
  friend void swap(TrafficSignIDSpainEnum& a, TrafficSignIDSpainEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDSpainEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDSpainEnum>(NULL);
  }

  TrafficSignIDSpainEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDSpainEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDSpainEnum& from);
  void MergeFrom(const TrafficSignIDSpainEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDSpainEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpain;
  static const TrafficSignIDSpain YIELD =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_YIELD;
  static const TrafficSignIDSpain STOP =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_STOP;
  static const TrafficSignIDSpain BAN_ALL_VEHICLES =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_BAN_ALL_VEHICLES;
  static const TrafficSignIDSpain NO_ENTRY =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_ENTRY;
  static const TrafficSignIDSpain BAN_TRUCKS =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_BAN_TRUCKS;
  static const TrafficSignIDSpain MAX_WEIGHT =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_WEIGHT;
  static const TrafficSignIDSpain MAX_HEIGHT =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_HEIGHT;
  static const TrafficSignIDSpain MAX_SPEED =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_MAX_SPEED;
  static const TrafficSignIDSpain NO_OVERTAKING_START =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_OVERTAKING_START;
  static const TrafficSignIDSpain NO_STOPPING =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_STOPPING;
  static const TrafficSignIDSpain NO_WAITING =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_NO_WAITING;
  static const TrafficSignIDSpain PEDESTRIANS_CROSSING =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_PEDESTRIANS_CROSSING;
  static const TrafficSignIDSpain UNKNOWN =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_UNKNOWN;
  static inline bool TrafficSignIDSpain_IsValid(int value) {
    return TrafficSignIDSpainEnum_TrafficSignIDSpain_IsValid(value);
  }
  static const TrafficSignIDSpain TrafficSignIDSpain_MIN =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_MIN;
  static const TrafficSignIDSpain TrafficSignIDSpain_MAX =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_MAX;
  static const int TrafficSignIDSpain_ARRAYSIZE =
    TrafficSignIDSpainEnum_TrafficSignIDSpain_TrafficSignIDSpain_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDSpain_descriptor() {
    return TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor();
  }
  static inline const ::std::string& TrafficSignIDSpain_Name(TrafficSignIDSpain value) {
    return TrafficSignIDSpainEnum_TrafficSignIDSpain_Name(value);
  }
  static inline bool TrafficSignIDSpain_Parse(const ::std::string& name,
      TrafficSignIDSpain* value) {
    return TrafficSignIDSpainEnum_TrafficSignIDSpain_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDSpainEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDRussiaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDRussiaEnum) */ {
 public:
  TrafficSignIDRussiaEnum();
  virtual ~TrafficSignIDRussiaEnum();

  TrafficSignIDRussiaEnum(const TrafficSignIDRussiaEnum& from);

  inline TrafficSignIDRussiaEnum& operator=(const TrafficSignIDRussiaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDRussiaEnum(TrafficSignIDRussiaEnum&& from) noexcept
    : TrafficSignIDRussiaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDRussiaEnum& operator=(TrafficSignIDRussiaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDRussiaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDRussiaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDRussiaEnum*>(
               &_TrafficSignIDRussiaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrafficSignIDRussiaEnum* other);
  friend void swap(TrafficSignIDRussiaEnum& a, TrafficSignIDRussiaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDRussiaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDRussiaEnum>(NULL);
  }

  TrafficSignIDRussiaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDRussiaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDRussiaEnum& from);
  void MergeFrom(const TrafficSignIDRussiaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDRussiaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussia;
  static const TrafficSignIDRussia MAX_SPEED =
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_MAX_SPEED;
  static const TrafficSignIDRussia UNKNOWN =
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_UNKNOWN;
  static inline bool TrafficSignIDRussia_IsValid(int value) {
    return TrafficSignIDRussiaEnum_TrafficSignIDRussia_IsValid(value);
  }
  static const TrafficSignIDRussia TrafficSignIDRussia_MIN =
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_MIN;
  static const TrafficSignIDRussia TrafficSignIDRussia_MAX =
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_MAX;
  static const int TrafficSignIDRussia_ARRAYSIZE =
    TrafficSignIDRussiaEnum_TrafficSignIDRussia_TrafficSignIDRussia_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDRussia_descriptor() {
    return TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor();
  }
  static inline const ::std::string& TrafficSignIDRussia_Name(TrafficSignIDRussia value) {
    return TrafficSignIDRussiaEnum_TrafficSignIDRussia_Name(value);
  }
  static inline bool TrafficSignIDRussia_Parse(const ::std::string& name,
      TrafficSignIDRussia* value) {
    return TrafficSignIDRussiaEnum_TrafficSignIDRussia_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDRussiaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDArgentinaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDArgentinaEnum) */ {
 public:
  TrafficSignIDArgentinaEnum();
  virtual ~TrafficSignIDArgentinaEnum();

  TrafficSignIDArgentinaEnum(const TrafficSignIDArgentinaEnum& from);

  inline TrafficSignIDArgentinaEnum& operator=(const TrafficSignIDArgentinaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDArgentinaEnum(TrafficSignIDArgentinaEnum&& from) noexcept
    : TrafficSignIDArgentinaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDArgentinaEnum& operator=(TrafficSignIDArgentinaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDArgentinaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDArgentinaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDArgentinaEnum*>(
               &_TrafficSignIDArgentinaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TrafficSignIDArgentinaEnum* other);
  friend void swap(TrafficSignIDArgentinaEnum& a, TrafficSignIDArgentinaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDArgentinaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDArgentinaEnum>(NULL);
  }

  TrafficSignIDArgentinaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDArgentinaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDArgentinaEnum& from);
  void MergeFrom(const TrafficSignIDArgentinaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDArgentinaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentina;
  static const TrafficSignIDArgentina MAX_SPEED =
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_MAX_SPEED;
  static const TrafficSignIDArgentina UNKNOWN =
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_UNKNOWN;
  static inline bool TrafficSignIDArgentina_IsValid(int value) {
    return TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_IsValid(value);
  }
  static const TrafficSignIDArgentina TrafficSignIDArgentina_MIN =
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_MIN;
  static const TrafficSignIDArgentina TrafficSignIDArgentina_MAX =
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_MAX;
  static const int TrafficSignIDArgentina_ARRAYSIZE =
    TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_TrafficSignIDArgentina_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDArgentina_descriptor() {
    return TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor();
  }
  static inline const ::std::string& TrafficSignIDArgentina_Name(TrafficSignIDArgentina value) {
    return TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_Name(value);
  }
  static inline bool TrafficSignIDArgentina_Parse(const ::std::string& name,
      TrafficSignIDArgentina* value) {
    return TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDArgentinaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDBelgiumEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDBelgiumEnum) */ {
 public:
  TrafficSignIDBelgiumEnum();
  virtual ~TrafficSignIDBelgiumEnum();

  TrafficSignIDBelgiumEnum(const TrafficSignIDBelgiumEnum& from);

  inline TrafficSignIDBelgiumEnum& operator=(const TrafficSignIDBelgiumEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDBelgiumEnum(TrafficSignIDBelgiumEnum&& from) noexcept
    : TrafficSignIDBelgiumEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDBelgiumEnum& operator=(TrafficSignIDBelgiumEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDBelgiumEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDBelgiumEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDBelgiumEnum*>(
               &_TrafficSignIDBelgiumEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TrafficSignIDBelgiumEnum* other);
  friend void swap(TrafficSignIDBelgiumEnum& a, TrafficSignIDBelgiumEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDBelgiumEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDBelgiumEnum>(NULL);
  }

  TrafficSignIDBelgiumEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDBelgiumEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDBelgiumEnum& from);
  void MergeFrom(const TrafficSignIDBelgiumEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDBelgiumEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgium;
  static const TrafficSignIDBelgium MAX_SPEED =
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_MAX_SPEED;
  static const TrafficSignIDBelgium UNKNOWN =
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_UNKNOWN;
  static inline bool TrafficSignIDBelgium_IsValid(int value) {
    return TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_IsValid(value);
  }
  static const TrafficSignIDBelgium TrafficSignIDBelgium_MIN =
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_MIN;
  static const TrafficSignIDBelgium TrafficSignIDBelgium_MAX =
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_MAX;
  static const int TrafficSignIDBelgium_ARRAYSIZE =
    TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_TrafficSignIDBelgium_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDBelgium_descriptor() {
    return TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor();
  }
  static inline const ::std::string& TrafficSignIDBelgium_Name(TrafficSignIDBelgium value) {
    return TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_Name(value);
  }
  static inline bool TrafficSignIDBelgium_Parse(const ::std::string& name,
      TrafficSignIDBelgium* value) {
    return TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDBelgiumEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDFranceEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDFranceEnum) */ {
 public:
  TrafficSignIDFranceEnum();
  virtual ~TrafficSignIDFranceEnum();

  TrafficSignIDFranceEnum(const TrafficSignIDFranceEnum& from);

  inline TrafficSignIDFranceEnum& operator=(const TrafficSignIDFranceEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDFranceEnum(TrafficSignIDFranceEnum&& from) noexcept
    : TrafficSignIDFranceEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDFranceEnum& operator=(TrafficSignIDFranceEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDFranceEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDFranceEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDFranceEnum*>(
               &_TrafficSignIDFranceEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TrafficSignIDFranceEnum* other);
  friend void swap(TrafficSignIDFranceEnum& a, TrafficSignIDFranceEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDFranceEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDFranceEnum>(NULL);
  }

  TrafficSignIDFranceEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDFranceEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDFranceEnum& from);
  void MergeFrom(const TrafficSignIDFranceEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDFranceEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFrance;
  static const TrafficSignIDFrance MAX_SPEED =
    TrafficSignIDFranceEnum_TrafficSignIDFrance_MAX_SPEED;
  static const TrafficSignIDFrance UNKNOWN =
    TrafficSignIDFranceEnum_TrafficSignIDFrance_UNKNOWN;
  static inline bool TrafficSignIDFrance_IsValid(int value) {
    return TrafficSignIDFranceEnum_TrafficSignIDFrance_IsValid(value);
  }
  static const TrafficSignIDFrance TrafficSignIDFrance_MIN =
    TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_MIN;
  static const TrafficSignIDFrance TrafficSignIDFrance_MAX =
    TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_MAX;
  static const int TrafficSignIDFrance_ARRAYSIZE =
    TrafficSignIDFranceEnum_TrafficSignIDFrance_TrafficSignIDFrance_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDFrance_descriptor() {
    return TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor();
  }
  static inline const ::std::string& TrafficSignIDFrance_Name(TrafficSignIDFrance value) {
    return TrafficSignIDFranceEnum_TrafficSignIDFrance_Name(value);
  }
  static inline bool TrafficSignIDFrance_Parse(const ::std::string& name,
      TrafficSignIDFrance* value) {
    return TrafficSignIDFranceEnum_TrafficSignIDFrance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDFranceEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDGreeceEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDGreeceEnum) */ {
 public:
  TrafficSignIDGreeceEnum();
  virtual ~TrafficSignIDGreeceEnum();

  TrafficSignIDGreeceEnum(const TrafficSignIDGreeceEnum& from);

  inline TrafficSignIDGreeceEnum& operator=(const TrafficSignIDGreeceEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDGreeceEnum(TrafficSignIDGreeceEnum&& from) noexcept
    : TrafficSignIDGreeceEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDGreeceEnum& operator=(TrafficSignIDGreeceEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDGreeceEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDGreeceEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDGreeceEnum*>(
               &_TrafficSignIDGreeceEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TrafficSignIDGreeceEnum* other);
  friend void swap(TrafficSignIDGreeceEnum& a, TrafficSignIDGreeceEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDGreeceEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDGreeceEnum>(NULL);
  }

  TrafficSignIDGreeceEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDGreeceEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDGreeceEnum& from);
  void MergeFrom(const TrafficSignIDGreeceEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDGreeceEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreece;
  static const TrafficSignIDGreece MAX_SPEED =
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_MAX_SPEED;
  static const TrafficSignIDGreece UNKNOWN =
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_UNKNOWN;
  static inline bool TrafficSignIDGreece_IsValid(int value) {
    return TrafficSignIDGreeceEnum_TrafficSignIDGreece_IsValid(value);
  }
  static const TrafficSignIDGreece TrafficSignIDGreece_MIN =
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_MIN;
  static const TrafficSignIDGreece TrafficSignIDGreece_MAX =
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_MAX;
  static const int TrafficSignIDGreece_ARRAYSIZE =
    TrafficSignIDGreeceEnum_TrafficSignIDGreece_TrafficSignIDGreece_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDGreece_descriptor() {
    return TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor();
  }
  static inline const ::std::string& TrafficSignIDGreece_Name(TrafficSignIDGreece value) {
    return TrafficSignIDGreeceEnum_TrafficSignIDGreece_Name(value);
  }
  static inline bool TrafficSignIDGreece_Parse(const ::std::string& name,
      TrafficSignIDGreece* value) {
    return TrafficSignIDGreeceEnum_TrafficSignIDGreece_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDGreeceEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDCroatiaEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDCroatiaEnum) */ {
 public:
  TrafficSignIDCroatiaEnum();
  virtual ~TrafficSignIDCroatiaEnum();

  TrafficSignIDCroatiaEnum(const TrafficSignIDCroatiaEnum& from);

  inline TrafficSignIDCroatiaEnum& operator=(const TrafficSignIDCroatiaEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDCroatiaEnum(TrafficSignIDCroatiaEnum&& from) noexcept
    : TrafficSignIDCroatiaEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDCroatiaEnum& operator=(TrafficSignIDCroatiaEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDCroatiaEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDCroatiaEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDCroatiaEnum*>(
               &_TrafficSignIDCroatiaEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TrafficSignIDCroatiaEnum* other);
  friend void swap(TrafficSignIDCroatiaEnum& a, TrafficSignIDCroatiaEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDCroatiaEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDCroatiaEnum>(NULL);
  }

  TrafficSignIDCroatiaEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDCroatiaEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDCroatiaEnum& from);
  void MergeFrom(const TrafficSignIDCroatiaEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDCroatiaEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatia;
  static const TrafficSignIDCroatia MAX_SPEED =
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_MAX_SPEED;
  static const TrafficSignIDCroatia UNKNOWN =
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_UNKNOWN;
  static inline bool TrafficSignIDCroatia_IsValid(int value) {
    return TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_IsValid(value);
  }
  static const TrafficSignIDCroatia TrafficSignIDCroatia_MIN =
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_MIN;
  static const TrafficSignIDCroatia TrafficSignIDCroatia_MAX =
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_MAX;
  static const int TrafficSignIDCroatia_ARRAYSIZE =
    TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_TrafficSignIDCroatia_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDCroatia_descriptor() {
    return TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor();
  }
  static inline const ::std::string& TrafficSignIDCroatia_Name(TrafficSignIDCroatia value) {
    return TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_Name(value);
  }
  static inline bool TrafficSignIDCroatia_Parse(const ::std::string& name,
      TrafficSignIDCroatia* value) {
    return TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDCroatiaEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDItalyEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDItalyEnum) */ {
 public:
  TrafficSignIDItalyEnum();
  virtual ~TrafficSignIDItalyEnum();

  TrafficSignIDItalyEnum(const TrafficSignIDItalyEnum& from);

  inline TrafficSignIDItalyEnum& operator=(const TrafficSignIDItalyEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDItalyEnum(TrafficSignIDItalyEnum&& from) noexcept
    : TrafficSignIDItalyEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDItalyEnum& operator=(TrafficSignIDItalyEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDItalyEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDItalyEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDItalyEnum*>(
               &_TrafficSignIDItalyEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TrafficSignIDItalyEnum* other);
  friend void swap(TrafficSignIDItalyEnum& a, TrafficSignIDItalyEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDItalyEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDItalyEnum>(NULL);
  }

  TrafficSignIDItalyEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDItalyEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDItalyEnum& from);
  void MergeFrom(const TrafficSignIDItalyEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDItalyEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItaly;
  static const TrafficSignIDItaly MAX_SPEED =
    TrafficSignIDItalyEnum_TrafficSignIDItaly_MAX_SPEED;
  static const TrafficSignIDItaly UNKNOWN =
    TrafficSignIDItalyEnum_TrafficSignIDItaly_UNKNOWN;
  static inline bool TrafficSignIDItaly_IsValid(int value) {
    return TrafficSignIDItalyEnum_TrafficSignIDItaly_IsValid(value);
  }
  static const TrafficSignIDItaly TrafficSignIDItaly_MIN =
    TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_MIN;
  static const TrafficSignIDItaly TrafficSignIDItaly_MAX =
    TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_MAX;
  static const int TrafficSignIDItaly_ARRAYSIZE =
    TrafficSignIDItalyEnum_TrafficSignIDItaly_TrafficSignIDItaly_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDItaly_descriptor() {
    return TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor();
  }
  static inline const ::std::string& TrafficSignIDItaly_Name(TrafficSignIDItaly value) {
    return TrafficSignIDItalyEnum_TrafficSignIDItaly_Name(value);
  }
  static inline bool TrafficSignIDItaly_Parse(const ::std::string& name,
      TrafficSignIDItaly* value) {
    return TrafficSignIDItalyEnum_TrafficSignIDItaly_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDItalyEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignIDPuertoRicoEnum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignIDPuertoRicoEnum) */ {
 public:
  TrafficSignIDPuertoRicoEnum();
  virtual ~TrafficSignIDPuertoRicoEnum();

  TrafficSignIDPuertoRicoEnum(const TrafficSignIDPuertoRicoEnum& from);

  inline TrafficSignIDPuertoRicoEnum& operator=(const TrafficSignIDPuertoRicoEnum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignIDPuertoRicoEnum(TrafficSignIDPuertoRicoEnum&& from) noexcept
    : TrafficSignIDPuertoRicoEnum() {
    *this = ::std::move(from);
  }

  inline TrafficSignIDPuertoRicoEnum& operator=(TrafficSignIDPuertoRicoEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignIDPuertoRicoEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignIDPuertoRicoEnum* internal_default_instance() {
    return reinterpret_cast<const TrafficSignIDPuertoRicoEnum*>(
               &_TrafficSignIDPuertoRicoEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TrafficSignIDPuertoRicoEnum* other);
  friend void swap(TrafficSignIDPuertoRicoEnum& a, TrafficSignIDPuertoRicoEnum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignIDPuertoRicoEnum* New() const final {
    return CreateMaybeMessage<TrafficSignIDPuertoRicoEnum>(NULL);
  }

  TrafficSignIDPuertoRicoEnum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignIDPuertoRicoEnum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignIDPuertoRicoEnum& from);
  void MergeFrom(const TrafficSignIDPuertoRicoEnum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignIDPuertoRicoEnum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRico;
  static const TrafficSignIDPuertoRico MAX_SPEED =
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_MAX_SPEED;
  static const TrafficSignIDPuertoRico UNKNOWN =
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_UNKNOWN;
  static inline bool TrafficSignIDPuertoRico_IsValid(int value) {
    return TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_IsValid(value);
  }
  static const TrafficSignIDPuertoRico TrafficSignIDPuertoRico_MIN =
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_MIN;
  static const TrafficSignIDPuertoRico TrafficSignIDPuertoRico_MAX =
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_MAX;
  static const int TrafficSignIDPuertoRico_ARRAYSIZE =
    TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_TrafficSignIDPuertoRico_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignIDPuertoRico_descriptor() {
    return TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor();
  }
  static inline const ::std::string& TrafficSignIDPuertoRico_Name(TrafficSignIDPuertoRico value) {
    return TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_Name(value);
  }
  static inline bool TrafficSignIDPuertoRico_Parse(const ::std::string& name,
      TrafficSignIDPuertoRico* value) {
    return TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignIDPuertoRicoEnum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSignElement) */ {
 public:
  TrafficSignElement();
  virtual ~TrafficSignElement();

  TrafficSignElement(const TrafficSignElement& from);

  inline TrafficSignElement& operator=(const TrafficSignElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignElement(TrafficSignElement&& from) noexcept
    : TrafficSignElement() {
    *this = ::std::move(from);
  }

  inline TrafficSignElement& operator=(TrafficSignElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignElement& default_instance();

  enum TrafficSignElementIdCase {
    kGermanyElementId = 1,
    kZamundaElementId = 2,
    kUsaElementId = 3,
    kChinaElementId = 4,
    kSpainElementId = 5,
    kRussiaElementId = 7,
    kArgentinaElementId = 8,
    kBelgiumElementId = 9,
    kFranceElementId = 10,
    kGreeceElementId = 11,
    kCroatiaElementId = 12,
    kItalyElementId = 13,
    kPuertoRicoElementId = 14,
    TRAFFIC_SIGN_ELEMENT_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignElement* internal_default_instance() {
    return reinterpret_cast<const TrafficSignElement*>(
               &_TrafficSignElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TrafficSignElement* other);
  friend void swap(TrafficSignElement& a, TrafficSignElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignElement* New() const final {
    return CreateMaybeMessage<TrafficSignElement>(NULL);
  }

  TrafficSignElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignElement& from);
  void MergeFrom(const TrafficSignElement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string additional_values = 15;
  int additional_values_size() const;
  void clear_additional_values();
  static const int kAdditionalValuesFieldNumber = 15;
  const ::std::string& additional_values(int index) const;
  ::std::string* mutable_additional_values(int index);
  void set_additional_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_additional_values(int index, ::std::string&& value);
  #endif
  void set_additional_values(int index, const char* value);
  void set_additional_values(int index, const char* value, size_t size);
  ::std::string* add_additional_values();
  void add_additional_values(const ::std::string& value);
  #if LANG_CXX11
  void add_additional_values(::std::string&& value);
  #endif
  void add_additional_values(const char* value);
  void add_additional_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& additional_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_additional_values();

  // optional .commonroad.TrafficSignIDGermanyEnum.TrafficSignIDGermany germany_element_id = 1;
  bool has_germany_element_id() const;
  void clear_germany_element_id();
  static const int kGermanyElementIdFieldNumber = 1;
  ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany germany_element_id() const;
  void set_germany_element_id(::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany value);

  // optional .commonroad.TrafficSignIDZamundaEnum.TrafficSignIDZamunda zamunda_element_id = 2;
  bool has_zamunda_element_id() const;
  void clear_zamunda_element_id();
  static const int kZamundaElementIdFieldNumber = 2;
  ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda zamunda_element_id() const;
  void set_zamunda_element_id(::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda value);

  // optional .commonroad.TrafficSignIDUsaEnum.TrafficSignIDUsa usa_element_id = 3;
  bool has_usa_element_id() const;
  void clear_usa_element_id();
  static const int kUsaElementIdFieldNumber = 3;
  ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa usa_element_id() const;
  void set_usa_element_id(::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa value);

  // optional .commonroad.TrafficSignIDChinaEnum.TrafficSignIDChina china_element_id = 4;
  bool has_china_element_id() const;
  void clear_china_element_id();
  static const int kChinaElementIdFieldNumber = 4;
  ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina china_element_id() const;
  void set_china_element_id(::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina value);

  // optional .commonroad.TrafficSignIDSpainEnum.TrafficSignIDSpain spain_element_id = 5;
  bool has_spain_element_id() const;
  void clear_spain_element_id();
  static const int kSpainElementIdFieldNumber = 5;
  ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain spain_element_id() const;
  void set_spain_element_id(::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain value);

  // optional .commonroad.TrafficSignIDRussiaEnum.TrafficSignIDRussia russia_element_id = 7;
  bool has_russia_element_id() const;
  void clear_russia_element_id();
  static const int kRussiaElementIdFieldNumber = 7;
  ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia russia_element_id() const;
  void set_russia_element_id(::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia value);

  // optional .commonroad.TrafficSignIDArgentinaEnum.TrafficSignIDArgentina argentina_element_id = 8;
  bool has_argentina_element_id() const;
  void clear_argentina_element_id();
  static const int kArgentinaElementIdFieldNumber = 8;
  ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina argentina_element_id() const;
  void set_argentina_element_id(::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina value);

  // optional .commonroad.TrafficSignIDBelgiumEnum.TrafficSignIDBelgium belgium_element_id = 9;
  bool has_belgium_element_id() const;
  void clear_belgium_element_id();
  static const int kBelgiumElementIdFieldNumber = 9;
  ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium belgium_element_id() const;
  void set_belgium_element_id(::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium value);

  // optional .commonroad.TrafficSignIDFranceEnum.TrafficSignIDFrance france_element_id = 10;
  bool has_france_element_id() const;
  void clear_france_element_id();
  static const int kFranceElementIdFieldNumber = 10;
  ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance france_element_id() const;
  void set_france_element_id(::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance value);

  // optional .commonroad.TrafficSignIDGreeceEnum.TrafficSignIDGreece greece_element_id = 11;
  bool has_greece_element_id() const;
  void clear_greece_element_id();
  static const int kGreeceElementIdFieldNumber = 11;
  ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece greece_element_id() const;
  void set_greece_element_id(::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece value);

  // optional .commonroad.TrafficSignIDCroatiaEnum.TrafficSignIDCroatia croatia_element_id = 12;
  bool has_croatia_element_id() const;
  void clear_croatia_element_id();
  static const int kCroatiaElementIdFieldNumber = 12;
  ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia croatia_element_id() const;
  void set_croatia_element_id(::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia value);

  // optional .commonroad.TrafficSignIDItalyEnum.TrafficSignIDItaly italy_element_id = 13;
  bool has_italy_element_id() const;
  void clear_italy_element_id();
  static const int kItalyElementIdFieldNumber = 13;
  ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly italy_element_id() const;
  void set_italy_element_id(::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly value);

  // optional .commonroad.TrafficSignIDPuertoRicoEnum.TrafficSignIDPuertoRico puerto_rico_element_id = 14;
  bool has_puerto_rico_element_id() const;
  void clear_puerto_rico_element_id();
  static const int kPuertoRicoElementIdFieldNumber = 14;
  ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico puerto_rico_element_id() const;
  void set_puerto_rico_element_id(::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico value);

  void clear_traffic_sign_element_id();
  TrafficSignElementIdCase traffic_sign_element_id_case() const;
  // @@protoc_insertion_point(class_scope:commonroad.TrafficSignElement)
 private:
  void set_has_germany_element_id();
  void set_has_zamunda_element_id();
  void set_has_usa_element_id();
  void set_has_china_element_id();
  void set_has_spain_element_id();
  void set_has_russia_element_id();
  void set_has_argentina_element_id();
  void set_has_belgium_element_id();
  void set_has_france_element_id();
  void set_has_greece_element_id();
  void set_has_croatia_element_id();
  void set_has_italy_element_id();
  void set_has_puerto_rico_element_id();

  inline bool has_traffic_sign_element_id() const;
  inline void clear_has_traffic_sign_element_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> additional_values_;
  union TrafficSignElementIdUnion {
    TrafficSignElementIdUnion() {}
    int germany_element_id_;
    int zamunda_element_id_;
    int usa_element_id_;
    int china_element_id_;
    int spain_element_id_;
    int russia_element_id_;
    int argentina_element_id_;
    int belgium_element_id_;
    int france_element_id_;
    int greece_element_id_;
    int croatia_element_id_;
    int italy_element_id_;
    int puerto_rico_element_id_;
  } traffic_sign_element_id_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonroad.TrafficSign) */ {
 public:
  TrafficSign();
  virtual ~TrafficSign();

  TrafficSign(const TrafficSign& from);

  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSign(TrafficSign&& from) noexcept
    : TrafficSign() {
    *this = ::std::move(from);
  }

  inline TrafficSign& operator=(TrafficSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSign* internal_default_instance() {
    return reinterpret_cast<const TrafficSign*>(
               &_TrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TrafficSign* other);
  friend void swap(TrafficSign& a, TrafficSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSign* New() const final {
    return CreateMaybeMessage<TrafficSign>(NULL);
  }

  TrafficSign* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSign>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSign& from);
  void MergeFrom(const TrafficSign& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
  int traffic_sign_elements_size() const;
  void clear_traffic_sign_elements();
  static const int kTrafficSignElementsFieldNumber = 2;
  ::commonroad::TrafficSignElement* mutable_traffic_sign_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSignElement >*
      mutable_traffic_sign_elements();
  const ::commonroad::TrafficSignElement& traffic_sign_elements(int index) const;
  ::commonroad::TrafficSignElement* add_traffic_sign_elements();
  const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSignElement >&
      traffic_sign_elements() const;

  // repeated uint32 first_occurrences = 3;
  int first_occurrences_size() const;
  void clear_first_occurrences();
  static const int kFirstOccurrencesFieldNumber = 3;
  ::google::protobuf::uint32 first_occurrences(int index) const;
  void set_first_occurrences(int index, ::google::protobuf::uint32 value);
  void add_first_occurrences(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_occurrences() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_occurrences();

  // optional .commonroad.Point position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::commonroad::Point& _internal_position() const;
  public:
  const ::commonroad::Point& position() const;
  ::commonroad::Point* release_position();
  ::commonroad::Point* mutable_position();
  void set_allocated_position(::commonroad::Point* position);

  // required uint32 traffic_sign_id = 1;
  bool has_traffic_sign_id() const;
  void clear_traffic_sign_id();
  static const int kTrafficSignIdFieldNumber = 1;
  ::google::protobuf::uint32 traffic_sign_id() const;
  void set_traffic_sign_id(::google::protobuf::uint32 value);

  // optional bool virtual = 5;
  bool has_virtual_() const;
  void clear_virtual_();
  static const int kVirtualFieldNumber = 5;
  bool virtual_() const;
  void set_virtual_(bool value);

  // @@protoc_insertion_point(class_scope:commonroad.TrafficSign)
 private:
  void set_has_traffic_sign_id();
  void clear_has_traffic_sign_id();
  void set_has_position();
  void clear_has_position();
  void set_has_virtual_();
  void clear_has_virtual_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSignElement > traffic_sign_elements_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_occurrences_;
  ::commonroad::Point* position_;
  ::google::protobuf::uint32 traffic_sign_id_;
  bool virtual__;
  friend struct ::protobuf_traffic_5fsign_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficSignIDGermanyEnum

// -------------------------------------------------------------------

// TrafficSignIDZamundaEnum

// -------------------------------------------------------------------

// TrafficSignIDUsaEnum

// -------------------------------------------------------------------

// TrafficSignIDChinaEnum

// -------------------------------------------------------------------

// TrafficSignIDSpainEnum

// -------------------------------------------------------------------

// TrafficSignIDRussiaEnum

// -------------------------------------------------------------------

// TrafficSignIDArgentinaEnum

// -------------------------------------------------------------------

// TrafficSignIDBelgiumEnum

// -------------------------------------------------------------------

// TrafficSignIDFranceEnum

// -------------------------------------------------------------------

// TrafficSignIDGreeceEnum

// -------------------------------------------------------------------

// TrafficSignIDCroatiaEnum

// -------------------------------------------------------------------

// TrafficSignIDItalyEnum

// -------------------------------------------------------------------

// TrafficSignIDPuertoRicoEnum

// -------------------------------------------------------------------

// TrafficSignElement

// optional .commonroad.TrafficSignIDGermanyEnum.TrafficSignIDGermany germany_element_id = 1;
inline bool TrafficSignElement::has_germany_element_id() const {
  return traffic_sign_element_id_case() == kGermanyElementId;
}
inline void TrafficSignElement::set_has_germany_element_id() {
  _oneof_case_[0] = kGermanyElementId;
}
inline void TrafficSignElement::clear_germany_element_id() {
  if (has_germany_element_id()) {
    traffic_sign_element_id_.germany_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignElement::germany_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.germany_element_id)
  if (has_germany_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany >(traffic_sign_element_id_.germany_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany >(0);
}
inline void TrafficSignElement::set_germany_element_id(::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany value) {
  assert(::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany_IsValid(value));
  if (!has_germany_element_id()) {
    clear_traffic_sign_element_id();
    set_has_germany_element_id();
  }
  traffic_sign_element_id_.germany_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.germany_element_id)
}

// optional .commonroad.TrafficSignIDZamundaEnum.TrafficSignIDZamunda zamunda_element_id = 2;
inline bool TrafficSignElement::has_zamunda_element_id() const {
  return traffic_sign_element_id_case() == kZamundaElementId;
}
inline void TrafficSignElement::set_has_zamunda_element_id() {
  _oneof_case_[0] = kZamundaElementId;
}
inline void TrafficSignElement::clear_zamunda_element_id() {
  if (has_zamunda_element_id()) {
    traffic_sign_element_id_.zamunda_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignElement::zamunda_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.zamunda_element_id)
  if (has_zamunda_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda >(traffic_sign_element_id_.zamunda_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda >(0);
}
inline void TrafficSignElement::set_zamunda_element_id(::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda value) {
  assert(::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda_IsValid(value));
  if (!has_zamunda_element_id()) {
    clear_traffic_sign_element_id();
    set_has_zamunda_element_id();
  }
  traffic_sign_element_id_.zamunda_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.zamunda_element_id)
}

// optional .commonroad.TrafficSignIDUsaEnum.TrafficSignIDUsa usa_element_id = 3;
inline bool TrafficSignElement::has_usa_element_id() const {
  return traffic_sign_element_id_case() == kUsaElementId;
}
inline void TrafficSignElement::set_has_usa_element_id() {
  _oneof_case_[0] = kUsaElementId;
}
inline void TrafficSignElement::clear_usa_element_id() {
  if (has_usa_element_id()) {
    traffic_sign_element_id_.usa_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignElement::usa_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.usa_element_id)
  if (has_usa_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa >(traffic_sign_element_id_.usa_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa >(0);
}
inline void TrafficSignElement::set_usa_element_id(::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa value) {
  assert(::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa_IsValid(value));
  if (!has_usa_element_id()) {
    clear_traffic_sign_element_id();
    set_has_usa_element_id();
  }
  traffic_sign_element_id_.usa_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.usa_element_id)
}

// optional .commonroad.TrafficSignIDChinaEnum.TrafficSignIDChina china_element_id = 4;
inline bool TrafficSignElement::has_china_element_id() const {
  return traffic_sign_element_id_case() == kChinaElementId;
}
inline void TrafficSignElement::set_has_china_element_id() {
  _oneof_case_[0] = kChinaElementId;
}
inline void TrafficSignElement::clear_china_element_id() {
  if (has_china_element_id()) {
    traffic_sign_element_id_.china_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignElement::china_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.china_element_id)
  if (has_china_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina >(traffic_sign_element_id_.china_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina >(0);
}
inline void TrafficSignElement::set_china_element_id(::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina value) {
  assert(::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina_IsValid(value));
  if (!has_china_element_id()) {
    clear_traffic_sign_element_id();
    set_has_china_element_id();
  }
  traffic_sign_element_id_.china_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.china_element_id)
}

// optional .commonroad.TrafficSignIDSpainEnum.TrafficSignIDSpain spain_element_id = 5;
inline bool TrafficSignElement::has_spain_element_id() const {
  return traffic_sign_element_id_case() == kSpainElementId;
}
inline void TrafficSignElement::set_has_spain_element_id() {
  _oneof_case_[0] = kSpainElementId;
}
inline void TrafficSignElement::clear_spain_element_id() {
  if (has_spain_element_id()) {
    traffic_sign_element_id_.spain_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignElement::spain_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.spain_element_id)
  if (has_spain_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain >(traffic_sign_element_id_.spain_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain >(0);
}
inline void TrafficSignElement::set_spain_element_id(::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain value) {
  assert(::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain_IsValid(value));
  if (!has_spain_element_id()) {
    clear_traffic_sign_element_id();
    set_has_spain_element_id();
  }
  traffic_sign_element_id_.spain_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.spain_element_id)
}

// optional .commonroad.TrafficSignIDRussiaEnum.TrafficSignIDRussia russia_element_id = 7;
inline bool TrafficSignElement::has_russia_element_id() const {
  return traffic_sign_element_id_case() == kRussiaElementId;
}
inline void TrafficSignElement::set_has_russia_element_id() {
  _oneof_case_[0] = kRussiaElementId;
}
inline void TrafficSignElement::clear_russia_element_id() {
  if (has_russia_element_id()) {
    traffic_sign_element_id_.russia_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignElement::russia_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.russia_element_id)
  if (has_russia_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia >(traffic_sign_element_id_.russia_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia >(0);
}
inline void TrafficSignElement::set_russia_element_id(::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia value) {
  assert(::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia_IsValid(value));
  if (!has_russia_element_id()) {
    clear_traffic_sign_element_id();
    set_has_russia_element_id();
  }
  traffic_sign_element_id_.russia_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.russia_element_id)
}

// optional .commonroad.TrafficSignIDArgentinaEnum.TrafficSignIDArgentina argentina_element_id = 8;
inline bool TrafficSignElement::has_argentina_element_id() const {
  return traffic_sign_element_id_case() == kArgentinaElementId;
}
inline void TrafficSignElement::set_has_argentina_element_id() {
  _oneof_case_[0] = kArgentinaElementId;
}
inline void TrafficSignElement::clear_argentina_element_id() {
  if (has_argentina_element_id()) {
    traffic_sign_element_id_.argentina_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignElement::argentina_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.argentina_element_id)
  if (has_argentina_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina >(traffic_sign_element_id_.argentina_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina >(0);
}
inline void TrafficSignElement::set_argentina_element_id(::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina value) {
  assert(::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_IsValid(value));
  if (!has_argentina_element_id()) {
    clear_traffic_sign_element_id();
    set_has_argentina_element_id();
  }
  traffic_sign_element_id_.argentina_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.argentina_element_id)
}

// optional .commonroad.TrafficSignIDBelgiumEnum.TrafficSignIDBelgium belgium_element_id = 9;
inline bool TrafficSignElement::has_belgium_element_id() const {
  return traffic_sign_element_id_case() == kBelgiumElementId;
}
inline void TrafficSignElement::set_has_belgium_element_id() {
  _oneof_case_[0] = kBelgiumElementId;
}
inline void TrafficSignElement::clear_belgium_element_id() {
  if (has_belgium_element_id()) {
    traffic_sign_element_id_.belgium_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignElement::belgium_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.belgium_element_id)
  if (has_belgium_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium >(traffic_sign_element_id_.belgium_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium >(0);
}
inline void TrafficSignElement::set_belgium_element_id(::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium value) {
  assert(::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_IsValid(value));
  if (!has_belgium_element_id()) {
    clear_traffic_sign_element_id();
    set_has_belgium_element_id();
  }
  traffic_sign_element_id_.belgium_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.belgium_element_id)
}

// optional .commonroad.TrafficSignIDFranceEnum.TrafficSignIDFrance france_element_id = 10;
inline bool TrafficSignElement::has_france_element_id() const {
  return traffic_sign_element_id_case() == kFranceElementId;
}
inline void TrafficSignElement::set_has_france_element_id() {
  _oneof_case_[0] = kFranceElementId;
}
inline void TrafficSignElement::clear_france_element_id() {
  if (has_france_element_id()) {
    traffic_sign_element_id_.france_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignElement::france_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.france_element_id)
  if (has_france_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance >(traffic_sign_element_id_.france_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance >(0);
}
inline void TrafficSignElement::set_france_element_id(::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance value) {
  assert(::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance_IsValid(value));
  if (!has_france_element_id()) {
    clear_traffic_sign_element_id();
    set_has_france_element_id();
  }
  traffic_sign_element_id_.france_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.france_element_id)
}

// optional .commonroad.TrafficSignIDGreeceEnum.TrafficSignIDGreece greece_element_id = 11;
inline bool TrafficSignElement::has_greece_element_id() const {
  return traffic_sign_element_id_case() == kGreeceElementId;
}
inline void TrafficSignElement::set_has_greece_element_id() {
  _oneof_case_[0] = kGreeceElementId;
}
inline void TrafficSignElement::clear_greece_element_id() {
  if (has_greece_element_id()) {
    traffic_sign_element_id_.greece_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignElement::greece_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.greece_element_id)
  if (has_greece_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece >(traffic_sign_element_id_.greece_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece >(0);
}
inline void TrafficSignElement::set_greece_element_id(::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece value) {
  assert(::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece_IsValid(value));
  if (!has_greece_element_id()) {
    clear_traffic_sign_element_id();
    set_has_greece_element_id();
  }
  traffic_sign_element_id_.greece_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.greece_element_id)
}

// optional .commonroad.TrafficSignIDCroatiaEnum.TrafficSignIDCroatia croatia_element_id = 12;
inline bool TrafficSignElement::has_croatia_element_id() const {
  return traffic_sign_element_id_case() == kCroatiaElementId;
}
inline void TrafficSignElement::set_has_croatia_element_id() {
  _oneof_case_[0] = kCroatiaElementId;
}
inline void TrafficSignElement::clear_croatia_element_id() {
  if (has_croatia_element_id()) {
    traffic_sign_element_id_.croatia_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignElement::croatia_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.croatia_element_id)
  if (has_croatia_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia >(traffic_sign_element_id_.croatia_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia >(0);
}
inline void TrafficSignElement::set_croatia_element_id(::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia value) {
  assert(::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_IsValid(value));
  if (!has_croatia_element_id()) {
    clear_traffic_sign_element_id();
    set_has_croatia_element_id();
  }
  traffic_sign_element_id_.croatia_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.croatia_element_id)
}

// optional .commonroad.TrafficSignIDItalyEnum.TrafficSignIDItaly italy_element_id = 13;
inline bool TrafficSignElement::has_italy_element_id() const {
  return traffic_sign_element_id_case() == kItalyElementId;
}
inline void TrafficSignElement::set_has_italy_element_id() {
  _oneof_case_[0] = kItalyElementId;
}
inline void TrafficSignElement::clear_italy_element_id() {
  if (has_italy_element_id()) {
    traffic_sign_element_id_.italy_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignElement::italy_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.italy_element_id)
  if (has_italy_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly >(traffic_sign_element_id_.italy_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly >(0);
}
inline void TrafficSignElement::set_italy_element_id(::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly value) {
  assert(::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly_IsValid(value));
  if (!has_italy_element_id()) {
    clear_traffic_sign_element_id();
    set_has_italy_element_id();
  }
  traffic_sign_element_id_.italy_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.italy_element_id)
}

// optional .commonroad.TrafficSignIDPuertoRicoEnum.TrafficSignIDPuertoRico puerto_rico_element_id = 14;
inline bool TrafficSignElement::has_puerto_rico_element_id() const {
  return traffic_sign_element_id_case() == kPuertoRicoElementId;
}
inline void TrafficSignElement::set_has_puerto_rico_element_id() {
  _oneof_case_[0] = kPuertoRicoElementId;
}
inline void TrafficSignElement::clear_puerto_rico_element_id() {
  if (has_puerto_rico_element_id()) {
    traffic_sign_element_id_.puerto_rico_element_id_ = 0;
    clear_has_traffic_sign_element_id();
  }
}
inline ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignElement::puerto_rico_element_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.puerto_rico_element_id)
  if (has_puerto_rico_element_id()) {
    return static_cast< ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico >(traffic_sign_element_id_.puerto_rico_element_id_);
  }
  return static_cast< ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico >(0);
}
inline void TrafficSignElement::set_puerto_rico_element_id(::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico value) {
  assert(::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_IsValid(value));
  if (!has_puerto_rico_element_id()) {
    clear_traffic_sign_element_id();
    set_has_puerto_rico_element_id();
  }
  traffic_sign_element_id_.puerto_rico_element_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.puerto_rico_element_id)
}

// repeated string additional_values = 15;
inline int TrafficSignElement::additional_values_size() const {
  return additional_values_.size();
}
inline void TrafficSignElement::clear_additional_values() {
  additional_values_.Clear();
}
inline const ::std::string& TrafficSignElement::additional_values(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSignElement.additional_values)
  return additional_values_.Get(index);
}
inline ::std::string* TrafficSignElement::mutable_additional_values(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.TrafficSignElement.additional_values)
  return additional_values_.Mutable(index);
}
inline void TrafficSignElement::set_additional_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.additional_values)
  additional_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrafficSignElement::set_additional_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:commonroad.TrafficSignElement.additional_values)
  additional_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrafficSignElement::set_additional_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  additional_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:commonroad.TrafficSignElement.additional_values)
}
inline void TrafficSignElement::set_additional_values(int index, const char* value, size_t size) {
  additional_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:commonroad.TrafficSignElement.additional_values)
}
inline ::std::string* TrafficSignElement::add_additional_values() {
  // @@protoc_insertion_point(field_add_mutable:commonroad.TrafficSignElement.additional_values)
  return additional_values_.Add();
}
inline void TrafficSignElement::add_additional_values(const ::std::string& value) {
  additional_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:commonroad.TrafficSignElement.additional_values)
}
#if LANG_CXX11
inline void TrafficSignElement::add_additional_values(::std::string&& value) {
  additional_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:commonroad.TrafficSignElement.additional_values)
}
#endif
inline void TrafficSignElement::add_additional_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  additional_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:commonroad.TrafficSignElement.additional_values)
}
inline void TrafficSignElement::add_additional_values(const char* value, size_t size) {
  additional_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:commonroad.TrafficSignElement.additional_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficSignElement::additional_values() const {
  // @@protoc_insertion_point(field_list:commonroad.TrafficSignElement.additional_values)
  return additional_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficSignElement::mutable_additional_values() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.TrafficSignElement.additional_values)
  return &additional_values_;
}

inline bool TrafficSignElement::has_traffic_sign_element_id() const {
  return traffic_sign_element_id_case() != TRAFFIC_SIGN_ELEMENT_ID_NOT_SET;
}
inline void TrafficSignElement::clear_has_traffic_sign_element_id() {
  _oneof_case_[0] = TRAFFIC_SIGN_ELEMENT_ID_NOT_SET;
}
inline TrafficSignElement::TrafficSignElementIdCase TrafficSignElement::traffic_sign_element_id_case() const {
  return TrafficSignElement::TrafficSignElementIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TrafficSign

// required uint32 traffic_sign_id = 1;
inline bool TrafficSign::has_traffic_sign_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign::set_has_traffic_sign_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign::clear_has_traffic_sign_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign::clear_traffic_sign_id() {
  traffic_sign_id_ = 0u;
  clear_has_traffic_sign_id();
}
inline ::google::protobuf::uint32 TrafficSign::traffic_sign_id() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSign.traffic_sign_id)
  return traffic_sign_id_;
}
inline void TrafficSign::set_traffic_sign_id(::google::protobuf::uint32 value) {
  set_has_traffic_sign_id();
  traffic_sign_id_ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSign.traffic_sign_id)
}

// repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
inline int TrafficSign::traffic_sign_elements_size() const {
  return traffic_sign_elements_.size();
}
inline void TrafficSign::clear_traffic_sign_elements() {
  traffic_sign_elements_.Clear();
}
inline ::commonroad::TrafficSignElement* TrafficSign::mutable_traffic_sign_elements(int index) {
  // @@protoc_insertion_point(field_mutable:commonroad.TrafficSign.traffic_sign_elements)
  return traffic_sign_elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSignElement >*
TrafficSign::mutable_traffic_sign_elements() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.TrafficSign.traffic_sign_elements)
  return &traffic_sign_elements_;
}
inline const ::commonroad::TrafficSignElement& TrafficSign::traffic_sign_elements(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSign.traffic_sign_elements)
  return traffic_sign_elements_.Get(index);
}
inline ::commonroad::TrafficSignElement* TrafficSign::add_traffic_sign_elements() {
  // @@protoc_insertion_point(field_add:commonroad.TrafficSign.traffic_sign_elements)
  return traffic_sign_elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonroad::TrafficSignElement >&
TrafficSign::traffic_sign_elements() const {
  // @@protoc_insertion_point(field_list:commonroad.TrafficSign.traffic_sign_elements)
  return traffic_sign_elements_;
}

// repeated uint32 first_occurrences = 3;
inline int TrafficSign::first_occurrences_size() const {
  return first_occurrences_.size();
}
inline void TrafficSign::clear_first_occurrences() {
  first_occurrences_.Clear();
}
inline ::google::protobuf::uint32 TrafficSign::first_occurrences(int index) const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSign.first_occurrences)
  return first_occurrences_.Get(index);
}
inline void TrafficSign::set_first_occurrences(int index, ::google::protobuf::uint32 value) {
  first_occurrences_.Set(index, value);
  // @@protoc_insertion_point(field_set:commonroad.TrafficSign.first_occurrences)
}
inline void TrafficSign::add_first_occurrences(::google::protobuf::uint32 value) {
  first_occurrences_.Add(value);
  // @@protoc_insertion_point(field_add:commonroad.TrafficSign.first_occurrences)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficSign::first_occurrences() const {
  // @@protoc_insertion_point(field_list:commonroad.TrafficSign.first_occurrences)
  return first_occurrences_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficSign::mutable_first_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:commonroad.TrafficSign.first_occurrences)
  return &first_occurrences_;
}

// optional .commonroad.Point position = 4;
inline bool TrafficSign::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commonroad::Point& TrafficSign::_internal_position() const {
  return *position_;
}
inline const ::commonroad::Point& TrafficSign::position() const {
  const ::commonroad::Point* p = position_;
  // @@protoc_insertion_point(field_get:commonroad.TrafficSign.position)
  return p != NULL ? *p : *reinterpret_cast<const ::commonroad::Point*>(
      &::commonroad::_Point_default_instance_);
}
inline ::commonroad::Point* TrafficSign::release_position() {
  // @@protoc_insertion_point(field_release:commonroad.TrafficSign.position)
  clear_has_position();
  ::commonroad::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::commonroad::Point* TrafficSign::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::commonroad::Point>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:commonroad.TrafficSign.position)
  return position_;
}
inline void TrafficSign::set_allocated_position(::commonroad::Point* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:commonroad.TrafficSign.position)
}

// optional bool virtual = 5;
inline bool TrafficSign::has_virtual_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficSign::set_has_virtual_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficSign::clear_has_virtual_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficSign::clear_virtual_() {
  virtual__ = false;
  clear_has_virtual_();
}
inline bool TrafficSign::virtual_() const {
  // @@protoc_insertion_point(field_get:commonroad.TrafficSign.virtual)
  return virtual__;
}
inline void TrafficSign::set_virtual_(bool value) {
  set_has_virtual_();
  virtual__ = value;
  // @@protoc_insertion_point(field_set:commonroad.TrafficSign.virtual)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonroad

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany>() {
  return ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda>() {
  return ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa>() {
  return ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina>() {
  return ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain>() {
  return ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia>() {
  return ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina>() {
  return ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium>() {
  return ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance>() {
  return ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece>() {
  return ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia>() {
  return ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly>() {
  return ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor();
}
template <> struct is_proto_enum< ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico>() {
  return ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_traffic_5fsign_2eproto
