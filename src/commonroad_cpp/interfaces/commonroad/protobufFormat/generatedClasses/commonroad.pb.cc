// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonroad.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/commonroad.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_commonroad_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_commonroad_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioInformation;
}  // namespace protobuf_commonroad_2eproto
namespace protobuf_dynamic_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dynamic_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_DynamicObstacle;
}  // namespace protobuf_dynamic_5fobstacle_2eproto
namespace protobuf_environment_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_environment_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentObstacle;
}  // namespace protobuf_environment_5fobstacle_2eproto
namespace protobuf_intersection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_intersection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Intersection;
}  // namespace protobuf_intersection_2eproto
namespace protobuf_lanelet_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lanelet_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Lanelet;
}  // namespace protobuf_lanelet_2eproto
namespace protobuf_location_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_location_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Location;
}  // namespace protobuf_location_2eproto
namespace protobuf_phantom_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_phantom_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhantomObstacle;
}  // namespace protobuf_phantom_5fobstacle_2eproto
namespace protobuf_planning_5fproblem_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fproblem_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlanningProblem;
}  // namespace protobuf_planning_5fproblem_2eproto
namespace protobuf_scenario_5ftags_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_scenario_5ftags_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTags;
}  // namespace protobuf_scenario_5ftags_2eproto
namespace protobuf_static_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_static_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_StaticObstacle;
}  // namespace protobuf_static_5fobstacle_2eproto
namespace protobuf_traffic_5flight_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5flight_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficLight;
}  // namespace protobuf_traffic_5flight_2eproto
namespace protobuf_traffic_5fsign_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5fsign_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign;
}  // namespace protobuf_traffic_5fsign_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeStamp;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class ScenarioInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioInformation>
      _instance;
} _ScenarioInformation_default_instance_;
class CommonRoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonRoad>
      _instance;
} _CommonRoad_default_instance_;
}  // namespace commonroad
namespace protobuf_commonroad_2eproto {
static void InitDefaultsScenarioInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_ScenarioInformation_default_instance_;
    new (ptr) ::commonroad::ScenarioInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::ScenarioInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenarioInformation}, {
      &protobuf_util_2eproto::scc_info_TimeStamp.base,}};

static void InitDefaultsCommonRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_CommonRoad_default_instance_;
    new (ptr) ::commonroad::CommonRoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::CommonRoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_CommonRoad =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsCommonRoad}, {
      &protobuf_commonroad_2eproto::scc_info_ScenarioInformation.base,
      &protobuf_scenario_5ftags_2eproto::scc_info_ScenarioTags.base,
      &protobuf_location_2eproto::scc_info_Location.base,
      &protobuf_lanelet_2eproto::scc_info_Lanelet.base,
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSign.base,
      &protobuf_traffic_5flight_2eproto::scc_info_TrafficLight.base,
      &protobuf_intersection_2eproto::scc_info_Intersection.base,
      &protobuf_static_5fobstacle_2eproto::scc_info_StaticObstacle.base,
      &protobuf_dynamic_5fobstacle_2eproto::scc_info_DynamicObstacle.base,
      &protobuf_environment_5fobstacle_2eproto::scc_info_EnvironmentObstacle.base,
      &protobuf_phantom_5fobstacle_2eproto::scc_info_PhantomObstacle.base,
      &protobuf_planning_5fproblem_2eproto::scc_info_PlanningProblem.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonRoad.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, common_road_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, benchmark_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, affiliation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ScenarioInformation, time_step_size_),
  0,
  1,
  5,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, information_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, scenario_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, lanelets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, traffic_signs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, traffic_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, intersections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, static_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, dynamic_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, environment_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, phantom_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CommonRoad, planning_problems_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::commonroad::ScenarioInformation)},
  { 19, 36, sizeof(::commonroad::CommonRoad)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_ScenarioInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_CommonRoad_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "commonroad.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020commonroad.proto\022\ncommonroad\032\nutil.pro"
      "to\032\023scenario_tags.proto\032\016location.proto\032"
      "\rlanelet.proto\032\022traffic_sign.proto\032\023traf"
      "fic_light.proto\032\022intersection.proto\032\025sta"
      "tic_obstacle.proto\032\026dynamic_obstacle.pro"
      "to\032\032environment_obstacle.proto\032\026phantom_"
      "obstacle.proto\032\026planning_problem.proto\"\272"
      "\001\n\023ScenarioInformation\022\033\n\023common_road_ve"
      "rsion\030\001 \002(\t\022\024\n\014benchmark_id\030\002 \002(\t\022#\n\004dat"
      "e\030\003 \002(\0132\025.commonroad.TimeStamp\022\016\n\006author"
      "\030\004 \002(\t\022\023\n\013affiliation\030\005 \002(\t\022\016\n\006source\030\006 "
      "\002(\t\022\026\n\016time_step_size\030\007 \002(\001\"\363\004\n\nCommonRo"
      "ad\0224\n\013information\030\001 \002(\0132\037.commonroad.Sce"
      "narioInformation\022/\n\rscenario_tags\030\002 \002(\0132"
      "\030.commonroad.ScenarioTags\022&\n\010location\030\003 "
      "\002(\0132\024.commonroad.Location\022%\n\010lanelets\030\004 "
      "\003(\0132\023.commonroad.Lanelet\022.\n\rtraffic_sign"
      "s\030\005 \003(\0132\027.commonroad.TrafficSign\0220\n\016traf"
      "fic_lights\030\006 \003(\0132\030.commonroad.TrafficLig"
      "ht\022/\n\rintersections\030\007 \003(\0132\030.commonroad.I"
      "ntersection\0224\n\020static_obstacles\030\010 \003(\0132\032."
      "commonroad.StaticObstacle\0226\n\021dynamic_obs"
      "tacles\030\t \003(\0132\033.commonroad.DynamicObstacl"
      "e\022>\n\025environment_obstacles\030\n \003(\0132\037.commo"
      "nroad.EnvironmentObstacle\0226\n\021phantom_obs"
      "tacles\030\013 \003(\0132\033.commonroad.PhantomObstacl"
      "e\0226\n\021planning_problems\030\014 \003(\0132\033.commonroa"
      "d.PlanningProblem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1097);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonroad.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
  ::protobuf_scenario_5ftags_2eproto::AddDescriptors();
  ::protobuf_location_2eproto::AddDescriptors();
  ::protobuf_lanelet_2eproto::AddDescriptors();
  ::protobuf_traffic_5fsign_2eproto::AddDescriptors();
  ::protobuf_traffic_5flight_2eproto::AddDescriptors();
  ::protobuf_intersection_2eproto::AddDescriptors();
  ::protobuf_static_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_dynamic_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_environment_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_phantom_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_planning_5fproblem_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_commonroad_2eproto
namespace commonroad {

// ===================================================================

void ScenarioInformation::InitAsDefaultInstance() {
  ::commonroad::_ScenarioInformation_default_instance_._instance.get_mutable()->date_ = const_cast< ::commonroad::TimeStamp*>(
      ::commonroad::TimeStamp::internal_default_instance());
}
void ScenarioInformation::clear_date() {
  if (date_ != NULL) date_->Clear();
  clear_has_date();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioInformation::kCommonRoadVersionFieldNumber;
const int ScenarioInformation::kBenchmarkIdFieldNumber;
const int ScenarioInformation::kDateFieldNumber;
const int ScenarioInformation::kAuthorFieldNumber;
const int ScenarioInformation::kAffiliationFieldNumber;
const int ScenarioInformation::kSourceFieldNumber;
const int ScenarioInformation::kTimeStepSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioInformation::ScenarioInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_commonroad_2eproto::scc_info_ScenarioInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.ScenarioInformation)
}
ScenarioInformation::ScenarioInformation(const ScenarioInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  common_road_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_common_road_version()) {
    common_road_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.common_road_version_);
  }
  benchmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_benchmark_id()) {
    benchmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.benchmark_id_);
  }
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author()) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  affiliation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_affiliation()) {
    affiliation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.has_date()) {
    date_ = new ::commonroad::TimeStamp(*from.date_);
  } else {
    date_ = NULL;
  }
  time_step_size_ = from.time_step_size_;
  // @@protoc_insertion_point(copy_constructor:commonroad.ScenarioInformation)
}

void ScenarioInformation::SharedCtor() {
  common_road_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  benchmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  affiliation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_step_size_) -
      reinterpret_cast<char*>(&date_)) + sizeof(time_step_size_));
}

ScenarioInformation::~ScenarioInformation() {
  // @@protoc_insertion_point(destructor:commonroad.ScenarioInformation)
  SharedDtor();
}

void ScenarioInformation::SharedDtor() {
  common_road_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  benchmark_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  affiliation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
}

void ScenarioInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioInformation::descriptor() {
  ::protobuf_commonroad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_commonroad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioInformation& ScenarioInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_commonroad_2eproto::scc_info_ScenarioInformation.base);
  return *internal_default_instance();
}


void ScenarioInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.ScenarioInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      common_road_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      benchmark_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      author_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      affiliation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(date_ != NULL);
      date_->Clear();
    }
  }
  time_step_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.ScenarioInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string common_road_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_common_road_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->common_road_version().data(), static_cast<int>(this->common_road_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.ScenarioInformation.common_road_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string benchmark_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_benchmark_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->benchmark_id().data(), static_cast<int>(this->benchmark_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.ScenarioInformation.benchmark_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.TimeStamp date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string author = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), static_cast<int>(this->author().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.ScenarioInformation.author");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string affiliation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_affiliation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->affiliation().data(), static_cast<int>(this->affiliation().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.ScenarioInformation.affiliation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.ScenarioInformation.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double time_step_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_time_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.ScenarioInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.ScenarioInformation)
  return false;
#undef DO_
}

void ScenarioInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.ScenarioInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string common_road_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->common_road_version().data(), static_cast<int>(this->common_road_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.common_road_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->common_road_version(), output);
  }

  // required string benchmark_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->benchmark_id().data(), static_cast<int>(this->benchmark_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.benchmark_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->benchmark_id(), output);
  }

  // required .commonroad.TimeStamp date = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_date(), output);
  }

  // required string author = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->author(), output);
  }

  // required string affiliation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.affiliation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->affiliation(), output);
  }

  // required string source = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->source(), output);
  }

  // required double time_step_size = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time_step_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.ScenarioInformation)
}

::google::protobuf::uint8* ScenarioInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.ScenarioInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string common_road_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->common_road_version().data(), static_cast<int>(this->common_road_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.common_road_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->common_road_version(), target);
  }

  // required string benchmark_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->benchmark_id().data(), static_cast<int>(this->benchmark_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.benchmark_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->benchmark_id(), target);
  }

  // required .commonroad.TimeStamp date = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_date(), deterministic, target);
  }

  // required string author = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->author(), target);
  }

  // required string affiliation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.affiliation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->affiliation(), target);
  }

  // required string source = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.ScenarioInformation.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->source(), target);
  }

  // required double time_step_size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time_step_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.ScenarioInformation)
  return target;
}

size_t ScenarioInformation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.ScenarioInformation)
  size_t total_size = 0;

  if (has_common_road_version()) {
    // required string common_road_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->common_road_version());
  }

  if (has_benchmark_id()) {
    // required string benchmark_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->benchmark_id());
  }

  if (has_author()) {
    // required string author = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  if (has_affiliation()) {
    // required string affiliation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->affiliation());
  }

  if (has_source()) {
    // required string source = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_date()) {
    // required .commonroad.TimeStamp date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *date_);
  }

  if (has_time_step_size()) {
    // required double time_step_size = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ScenarioInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.ScenarioInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string common_road_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->common_road_version());

    // required string benchmark_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->benchmark_id());

    // required string author = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());

    // required string affiliation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->affiliation());

    // required string source = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required .commonroad.TimeStamp date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *date_);

    // required double time_step_size = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.ScenarioInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.ScenarioInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.ScenarioInformation)
    MergeFrom(*source);
  }
}

void ScenarioInformation::MergeFrom(const ScenarioInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.ScenarioInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_common_road_version();
      common_road_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.common_road_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_benchmark_id();
      benchmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.benchmark_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_affiliation();
      affiliation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_date()->::commonroad::TimeStamp::MergeFrom(from.date());
    }
    if (cached_has_bits & 0x00000040u) {
      time_step_size_ = from.time_step_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.ScenarioInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioInformation::CopyFrom(const ScenarioInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.ScenarioInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ScenarioInformation::Swap(ScenarioInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioInformation::InternalSwap(ScenarioInformation* other) {
  using std::swap;
  common_road_version_.Swap(&other->common_road_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  benchmark_id_.Swap(&other->benchmark_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  author_.Swap(&other->author_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  affiliation_.Swap(&other->affiliation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(date_, other->date_);
  swap(time_step_size_, other->time_step_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioInformation::GetMetadata() const {
  protobuf_commonroad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_commonroad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonRoad::InitAsDefaultInstance() {
  ::commonroad::_CommonRoad_default_instance_._instance.get_mutable()->information_ = const_cast< ::commonroad::ScenarioInformation*>(
      ::commonroad::ScenarioInformation::internal_default_instance());
  ::commonroad::_CommonRoad_default_instance_._instance.get_mutable()->scenario_tags_ = const_cast< ::commonroad::ScenarioTags*>(
      ::commonroad::ScenarioTags::internal_default_instance());
  ::commonroad::_CommonRoad_default_instance_._instance.get_mutable()->location_ = const_cast< ::commonroad::Location*>(
      ::commonroad::Location::internal_default_instance());
}
void CommonRoad::clear_scenario_tags() {
  if (scenario_tags_ != NULL) scenario_tags_->Clear();
  clear_has_scenario_tags();
}
void CommonRoad::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
void CommonRoad::clear_lanelets() {
  lanelets_.Clear();
}
void CommonRoad::clear_traffic_signs() {
  traffic_signs_.Clear();
}
void CommonRoad::clear_traffic_lights() {
  traffic_lights_.Clear();
}
void CommonRoad::clear_intersections() {
  intersections_.Clear();
}
void CommonRoad::clear_static_obstacles() {
  static_obstacles_.Clear();
}
void CommonRoad::clear_dynamic_obstacles() {
  dynamic_obstacles_.Clear();
}
void CommonRoad::clear_environment_obstacles() {
  environment_obstacles_.Clear();
}
void CommonRoad::clear_phantom_obstacles() {
  phantom_obstacles_.Clear();
}
void CommonRoad::clear_planning_problems() {
  planning_problems_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonRoad::kInformationFieldNumber;
const int CommonRoad::kScenarioTagsFieldNumber;
const int CommonRoad::kLocationFieldNumber;
const int CommonRoad::kLaneletsFieldNumber;
const int CommonRoad::kTrafficSignsFieldNumber;
const int CommonRoad::kTrafficLightsFieldNumber;
const int CommonRoad::kIntersectionsFieldNumber;
const int CommonRoad::kStaticObstaclesFieldNumber;
const int CommonRoad::kDynamicObstaclesFieldNumber;
const int CommonRoad::kEnvironmentObstaclesFieldNumber;
const int CommonRoad::kPhantomObstaclesFieldNumber;
const int CommonRoad::kPlanningProblemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonRoad::CommonRoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_commonroad_2eproto::scc_info_CommonRoad.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.CommonRoad)
}
CommonRoad::CommonRoad(const CommonRoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lanelets_(from.lanelets_),
      traffic_signs_(from.traffic_signs_),
      traffic_lights_(from.traffic_lights_),
      intersections_(from.intersections_),
      static_obstacles_(from.static_obstacles_),
      dynamic_obstacles_(from.dynamic_obstacles_),
      environment_obstacles_(from.environment_obstacles_),
      phantom_obstacles_(from.phantom_obstacles_),
      planning_problems_(from.planning_problems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_information()) {
    information_ = new ::commonroad::ScenarioInformation(*from.information_);
  } else {
    information_ = NULL;
  }
  if (from.has_scenario_tags()) {
    scenario_tags_ = new ::commonroad::ScenarioTags(*from.scenario_tags_);
  } else {
    scenario_tags_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::commonroad::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.CommonRoad)
}

void CommonRoad::SharedCtor() {
  ::memset(&information_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&information_)) + sizeof(location_));
}

CommonRoad::~CommonRoad() {
  // @@protoc_insertion_point(destructor:commonroad.CommonRoad)
  SharedDtor();
}

void CommonRoad::SharedDtor() {
  if (this != internal_default_instance()) delete information_;
  if (this != internal_default_instance()) delete scenario_tags_;
  if (this != internal_default_instance()) delete location_;
}

void CommonRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonRoad::descriptor() {
  ::protobuf_commonroad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_commonroad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonRoad& CommonRoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_commonroad_2eproto::scc_info_CommonRoad.base);
  return *internal_default_instance();
}


void CommonRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.CommonRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanelets_.Clear();
  traffic_signs_.Clear();
  traffic_lights_.Clear();
  intersections_.Clear();
  static_obstacles_.Clear();
  dynamic_obstacles_.Clear();
  environment_obstacles_.Clear();
  phantom_obstacles_.Clear();
  planning_problems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(information_ != NULL);
      information_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scenario_tags_ != NULL);
      scenario_tags_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonRoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.CommonRoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonroad.ScenarioInformation information = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.ScenarioTags scenario_tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scenario_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.Lanelet lanelets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanelets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.TrafficSign traffic_signs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_signs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.TrafficLight traffic_lights = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.Intersection intersections = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.StaticObstacle static_obstacles = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_static_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dynamic_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_environment_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_phantom_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.PlanningProblem planning_problems = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_planning_problems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.CommonRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.CommonRoad)
  return false;
#undef DO_
}

void CommonRoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.CommonRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.ScenarioInformation information = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_information(), output);
  }

  // required .commonroad.ScenarioTags scenario_tags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_scenario_tags(), output);
  }

  // required .commonroad.Location location = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // repeated .commonroad.Lanelet lanelets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanelets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lanelets(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.TrafficSign traffic_signs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_signs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->traffic_signs(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.TrafficLight traffic_lights = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->traffic_lights(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.Intersection intersections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->intersections(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.StaticObstacle static_obstacles = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->static_obstacles(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->dynamic_obstacles(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->environment_obstacles(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phantom_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->phantom_obstacles(static_cast<int>(i)),
      output);
  }

  // repeated .commonroad.PlanningProblem planning_problems = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->planning_problems_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->planning_problems(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.CommonRoad)
}

::google::protobuf::uint8* CommonRoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.CommonRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.ScenarioInformation information = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_information(), deterministic, target);
  }

  // required .commonroad.ScenarioTags scenario_tags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_scenario_tags(), deterministic, target);
  }

  // required .commonroad.Location location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // repeated .commonroad.Lanelet lanelets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanelets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lanelets(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.TrafficSign traffic_signs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_signs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->traffic_signs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.TrafficLight traffic_lights = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->traffic_lights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.Intersection intersections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->intersections(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.StaticObstacle static_obstacles = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->static_obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->dynamic_obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->environment_obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phantom_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->phantom_obstacles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .commonroad.PlanningProblem planning_problems = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->planning_problems_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->planning_problems(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.CommonRoad)
  return target;
}

size_t CommonRoad::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.CommonRoad)
  size_t total_size = 0;

  if (has_information()) {
    // required .commonroad.ScenarioInformation information = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *information_);
  }

  if (has_scenario_tags()) {
    // required .commonroad.ScenarioTags scenario_tags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scenario_tags_);
  }

  if (has_location()) {
    // required .commonroad.Location location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  return total_size;
}
size_t CommonRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.CommonRoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .commonroad.ScenarioInformation information = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *information_);

    // required .commonroad.ScenarioTags scenario_tags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scenario_tags_);

    // required .commonroad.Location location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .commonroad.Lanelet lanelets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lanelets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanelets(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.TrafficSign traffic_signs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_signs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_signs(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.TrafficLight traffic_lights = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_lights(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.Intersection intersections = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->intersections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersections(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.StaticObstacle static_obstacles = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->static_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->static_obstacles(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.DynamicObstacle dynamic_obstacles = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dynamic_obstacles(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.EnvironmentObstacle environment_obstacles = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->environment_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->environment_obstacles(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.PhantomObstacle phantom_obstacles = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->phantom_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->phantom_obstacles(static_cast<int>(i)));
    }
  }

  // repeated .commonroad.PlanningProblem planning_problems = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->planning_problems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->planning_problems(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.CommonRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonRoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.CommonRoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.CommonRoad)
    MergeFrom(*source);
  }
}

void CommonRoad::MergeFrom(const CommonRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.CommonRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanelets_.MergeFrom(from.lanelets_);
  traffic_signs_.MergeFrom(from.traffic_signs_);
  traffic_lights_.MergeFrom(from.traffic_lights_);
  intersections_.MergeFrom(from.intersections_);
  static_obstacles_.MergeFrom(from.static_obstacles_);
  dynamic_obstacles_.MergeFrom(from.dynamic_obstacles_);
  environment_obstacles_.MergeFrom(from.environment_obstacles_);
  phantom_obstacles_.MergeFrom(from.phantom_obstacles_);
  planning_problems_.MergeFrom(from.planning_problems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_information()->::commonroad::ScenarioInformation::MergeFrom(from.information());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_scenario_tags()->::commonroad::ScenarioTags::MergeFrom(from.scenario_tags());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location()->::commonroad::Location::MergeFrom(from.location());
    }
  }
}

void CommonRoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.CommonRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRoad::CopyFrom(const CommonRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.CommonRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanelets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_signs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_lights())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->intersections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->static_obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dynamic_obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->environment_obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->phantom_obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->planning_problems())) return false;
  if (has_information()) {
    if (!this->information_->IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CommonRoad::Swap(CommonRoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonRoad::InternalSwap(CommonRoad* other) {
  using std::swap;
  CastToBase(&lanelets_)->InternalSwap(CastToBase(&other->lanelets_));
  CastToBase(&traffic_signs_)->InternalSwap(CastToBase(&other->traffic_signs_));
  CastToBase(&traffic_lights_)->InternalSwap(CastToBase(&other->traffic_lights_));
  CastToBase(&intersections_)->InternalSwap(CastToBase(&other->intersections_));
  CastToBase(&static_obstacles_)->InternalSwap(CastToBase(&other->static_obstacles_));
  CastToBase(&dynamic_obstacles_)->InternalSwap(CastToBase(&other->dynamic_obstacles_));
  CastToBase(&environment_obstacles_)->InternalSwap(CastToBase(&other->environment_obstacles_));
  CastToBase(&phantom_obstacles_)->InternalSwap(CastToBase(&other->phantom_obstacles_));
  CastToBase(&planning_problems_)->InternalSwap(CastToBase(&other->planning_problems_));
  swap(information_, other->information_);
  swap(scenario_tags_, other->scenario_tags_);
  swap(location_, other->location_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonRoad::GetMetadata() const {
  protobuf_commonroad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_commonroad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::ScenarioInformation* Arena::CreateMaybeMessage< ::commonroad::ScenarioInformation >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::ScenarioInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::CommonRoad* Arena::CreateMaybeMessage< ::commonroad::CommonRoad >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::CommonRoad >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
