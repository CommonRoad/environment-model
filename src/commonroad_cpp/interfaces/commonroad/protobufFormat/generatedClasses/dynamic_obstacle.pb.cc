// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/dynamic_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_obstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SetBasedPrediction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignalState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPrediction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_State;
}  // namespace protobuf_obstacle_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Shape;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class DynamicObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstacle>
      _instance;
  const ::commonroad::TrajectoryPrediction* trajectory_prediction_;
  const ::commonroad::SetBasedPrediction* set_based_prediction_;
} _DynamicObstacle_default_instance_;
}  // namespace commonroad
namespace protobuf_dynamic_5fobstacle_2eproto {
static void InitDefaultsDynamicObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_DynamicObstacle_default_instance_;
    new (ptr) ::commonroad::DynamicObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::DynamicObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_DynamicObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsDynamicObstacle}, {
      &protobuf_util_2eproto::scc_info_Shape.base,
      &protobuf_obstacle_2eproto::scc_info_State.base,
      &protobuf_obstacle_2eproto::scc_info_TrajectoryPrediction.base,
      &protobuf_obstacle_2eproto::scc_info_SetBasedPrediction.base,
      &protobuf_obstacle_2eproto::scc_info_SignalState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DynamicObstacle.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, dynamic_obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, obstacle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, initial_state_),
  offsetof(::commonroad::DynamicObstacleDefaultTypeInternal, trajectory_prediction_),
  offsetof(::commonroad::DynamicObstacleDefaultTypeInternal, set_based_prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, initial_signal_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, signal_series_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DynamicObstacle, prediction_),
  3,
  4,
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::commonroad::DynamicObstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_DynamicObstacle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dynamic_obstacle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026dynamic_obstacle.proto\022\ncommonroad\032\016ob"
      "stacle.proto\032\nutil.proto\"\264\003\n\017DynamicObst"
      "acle\022\033\n\023dynamic_obstacle_id\030\001 \002(\r\022@\n\robs"
      "tacle_type\030\002 \002(\0162).commonroad.ObstacleTy"
      "peEnum.ObstacleType\022 \n\005shape\030\003 \002(\0132\021.com"
      "monroad.Shape\022(\n\rinitial_state\030\004 \002(\0132\021.c"
      "ommonroad.State\022A\n\025trajectory_prediction"
      "\030\005 \001(\0132 .commonroad.TrajectoryPrediction"
      "H\000\022>\n\024set_based_prediction\030\006 \001(\0132\036.commo"
      "nroad.SetBasedPredictionH\000\0225\n\024initial_si"
      "gnal_state\030\007 \001(\0132\027.commonroad.SignalStat"
      "e\022.\n\rsignal_series\030\010 \003(\0132\027.commonroad.Si"
      "gnalStateB\014\n\nprediction"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamic_obstacle.proto", &protobuf_RegisterTypes);
  ::protobuf_obstacle_2eproto::AddDescriptors();
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dynamic_5fobstacle_2eproto
namespace commonroad {

// ===================================================================

void DynamicObstacle::InitAsDefaultInstance() {
  ::commonroad::_DynamicObstacle_default_instance_._instance.get_mutable()->shape_ = const_cast< ::commonroad::Shape*>(
      ::commonroad::Shape::internal_default_instance());
  ::commonroad::_DynamicObstacle_default_instance_._instance.get_mutable()->initial_state_ = const_cast< ::commonroad::State*>(
      ::commonroad::State::internal_default_instance());
  ::commonroad::_DynamicObstacle_default_instance_.trajectory_prediction_ = const_cast< ::commonroad::TrajectoryPrediction*>(
      ::commonroad::TrajectoryPrediction::internal_default_instance());
  ::commonroad::_DynamicObstacle_default_instance_.set_based_prediction_ = const_cast< ::commonroad::SetBasedPrediction*>(
      ::commonroad::SetBasedPrediction::internal_default_instance());
  ::commonroad::_DynamicObstacle_default_instance_._instance.get_mutable()->initial_signal_state_ = const_cast< ::commonroad::SignalState*>(
      ::commonroad::SignalState::internal_default_instance());
}
void DynamicObstacle::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
void DynamicObstacle::clear_initial_state() {
  if (initial_state_ != NULL) initial_state_->Clear();
  clear_has_initial_state();
}
void DynamicObstacle::set_allocated_trajectory_prediction(::commonroad::TrajectoryPrediction* trajectory_prediction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_prediction();
  if (trajectory_prediction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory_prediction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_prediction, submessage_arena);
    }
    set_has_trajectory_prediction();
    prediction_.trajectory_prediction_ = trajectory_prediction;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.DynamicObstacle.trajectory_prediction)
}
void DynamicObstacle::clear_trajectory_prediction() {
  if (has_trajectory_prediction()) {
    delete prediction_.trajectory_prediction_;
    clear_has_prediction();
  }
}
void DynamicObstacle::set_allocated_set_based_prediction(::commonroad::SetBasedPrediction* set_based_prediction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_prediction();
  if (set_based_prediction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_based_prediction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_based_prediction, submessage_arena);
    }
    set_has_set_based_prediction();
    prediction_.set_based_prediction_ = set_based_prediction;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.DynamicObstacle.set_based_prediction)
}
void DynamicObstacle::clear_set_based_prediction() {
  if (has_set_based_prediction()) {
    delete prediction_.set_based_prediction_;
    clear_has_prediction();
  }
}
void DynamicObstacle::clear_initial_signal_state() {
  if (initial_signal_state_ != NULL) initial_signal_state_->Clear();
  clear_has_initial_signal_state();
}
void DynamicObstacle::clear_signal_series() {
  signal_series_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstacle::kDynamicObstacleIdFieldNumber;
const int DynamicObstacle::kObstacleTypeFieldNumber;
const int DynamicObstacle::kShapeFieldNumber;
const int DynamicObstacle::kInitialStateFieldNumber;
const int DynamicObstacle::kTrajectoryPredictionFieldNumber;
const int DynamicObstacle::kSetBasedPredictionFieldNumber;
const int DynamicObstacle::kInitialSignalStateFieldNumber;
const int DynamicObstacle::kSignalSeriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstacle::DynamicObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dynamic_5fobstacle_2eproto::scc_info_DynamicObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.DynamicObstacle)
}
DynamicObstacle::DynamicObstacle(const DynamicObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      signal_series_(from.signal_series_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::commonroad::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_initial_state()) {
    initial_state_ = new ::commonroad::State(*from.initial_state_);
  } else {
    initial_state_ = NULL;
  }
  if (from.has_initial_signal_state()) {
    initial_signal_state_ = new ::commonroad::SignalState(*from.initial_signal_state_);
  } else {
    initial_signal_state_ = NULL;
  }
  ::memcpy(&dynamic_obstacle_id_, &from.dynamic_obstacle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_type_) -
    reinterpret_cast<char*>(&dynamic_obstacle_id_)) + sizeof(obstacle_type_));
  clear_has_prediction();
  switch (from.prediction_case()) {
    case kTrajectoryPrediction: {
      mutable_trajectory_prediction()->::commonroad::TrajectoryPrediction::MergeFrom(from.trajectory_prediction());
      break;
    }
    case kSetBasedPrediction: {
      mutable_set_based_prediction()->::commonroad::SetBasedPrediction::MergeFrom(from.set_based_prediction());
      break;
    }
    case PREDICTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.DynamicObstacle)
}

void DynamicObstacle::SharedCtor() {
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_type_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(obstacle_type_));
  clear_has_prediction();
}

DynamicObstacle::~DynamicObstacle() {
  // @@protoc_insertion_point(destructor:commonroad.DynamicObstacle)
  SharedDtor();
}

void DynamicObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete initial_state_;
  if (this != internal_default_instance()) delete initial_signal_state_;
  if (has_prediction()) {
    clear_prediction();
  }
}

void DynamicObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DynamicObstacle::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstacle& DynamicObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dynamic_5fobstacle_2eproto::scc_info_DynamicObstacle.base);
  return *internal_default_instance();
}


void DynamicObstacle::clear_prediction() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.DynamicObstacle)
  switch (prediction_case()) {
    case kTrajectoryPrediction: {
      delete prediction_.trajectory_prediction_;
      break;
    }
    case kSetBasedPrediction: {
      delete prediction_.set_based_prediction_;
      break;
    }
    case PREDICTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREDICTION_NOT_SET;
}


void DynamicObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_series_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shape_ != NULL);
      shape_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(initial_state_ != NULL);
      initial_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(initial_signal_state_ != NULL);
      initial_signal_state_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&dynamic_obstacle_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_type_) -
        reinterpret_cast<char*>(&dynamic_obstacle_id_)) + sizeof(obstacle_type_));
  }
  clear_prediction();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DynamicObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.DynamicObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dynamic_obstacle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dynamic_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dynamic_obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::ObstacleTypeEnum_ObstacleType_IsValid(value)) {
            set_obstacle_type(static_cast< ::commonroad::ObstacleTypeEnum_ObstacleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Shape shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.State initial_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrajectoryPrediction trajectory_prediction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.SetBasedPrediction set_based_prediction = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_based_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.SignalState initial_signal_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_signal_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.SignalState signal_series = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.DynamicObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.DynamicObstacle)
  return false;
#undef DO_
}

void DynamicObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 dynamic_obstacle_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dynamic_obstacle_id(), output);
  }

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->obstacle_type(), output);
  }

  // required .commonroad.Shape shape = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_shape(), output);
  }

  // required .commonroad.State initial_state = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_initial_state(), output);
  }

  switch (prediction_case()) {
    case kTrajectoryPrediction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_trajectory_prediction(), output);
      break;
    case kSetBasedPrediction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_set_based_prediction(), output);
      break;
    default: ;
  }
  // optional .commonroad.SignalState initial_signal_state = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_initial_signal_state(), output);
  }

  // repeated .commonroad.SignalState signal_series = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_series_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->signal_series(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.DynamicObstacle)
}

::google::protobuf::uint8* DynamicObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 dynamic_obstacle_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dynamic_obstacle_id(), target);
  }

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->obstacle_type(), target);
  }

  // required .commonroad.Shape shape = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_shape(), deterministic, target);
  }

  // required .commonroad.State initial_state = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_initial_state(), deterministic, target);
  }

  switch (prediction_case()) {
    case kTrajectoryPrediction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_trajectory_prediction(), deterministic, target);
      break;
    case kSetBasedPrediction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_set_based_prediction(), deterministic, target);
      break;
    default: ;
  }
  // optional .commonroad.SignalState initial_signal_state = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_initial_signal_state(), deterministic, target);
  }

  // repeated .commonroad.SignalState signal_series = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_series_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->signal_series(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.DynamicObstacle)
  return target;
}

size_t DynamicObstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.DynamicObstacle)
  size_t total_size = 0;

  if (has_shape()) {
    // required .commonroad.Shape shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  if (has_initial_state()) {
    // required .commonroad.State initial_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_state_);
  }

  if (has_dynamic_obstacle_id()) {
    // required uint32 dynamic_obstacle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dynamic_obstacle_id());
  }

  if (has_obstacle_type()) {
    // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());
  }

  return total_size;
}
size_t DynamicObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.DynamicObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required .commonroad.Shape shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);

    // required .commonroad.State initial_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_state_);

    // required uint32 dynamic_obstacle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dynamic_obstacle_id());

    // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .commonroad.SignalState signal_series = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_series_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_series(static_cast<int>(i)));
    }
  }

  // optional .commonroad.SignalState initial_signal_state = 7;
  if (has_initial_signal_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_signal_state_);
  }

  switch (prediction_case()) {
    // optional .commonroad.TrajectoryPrediction trajectory_prediction = 5;
    case kTrajectoryPrediction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prediction_.trajectory_prediction_);
      break;
    }
    // optional .commonroad.SetBasedPrediction set_based_prediction = 6;
    case kSetBasedPrediction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prediction_.set_based_prediction_);
      break;
    }
    case PREDICTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.DynamicObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.DynamicObstacle)
    MergeFrom(*source);
  }
}

void DynamicObstacle::MergeFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_series_.MergeFrom(from.signal_series_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shape()->::commonroad::Shape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_initial_state()->::commonroad::State::MergeFrom(from.initial_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_initial_signal_state()->::commonroad::SignalState::MergeFrom(from.initial_signal_state());
    }
    if (cached_has_bits & 0x00000008u) {
      dynamic_obstacle_id_ = from.dynamic_obstacle_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_type_ = from.obstacle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.prediction_case()) {
    case kTrajectoryPrediction: {
      mutable_trajectory_prediction()->::commonroad::TrajectoryPrediction::MergeFrom(from.trajectory_prediction());
      break;
    }
    case kSetBasedPrediction: {
      mutable_set_based_prediction()->::commonroad::SetBasedPrediction::MergeFrom(from.set_based_prediction());
      break;
    }
    case PREDICTION_NOT_SET: {
      break;
    }
  }
}

void DynamicObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacle::CopyFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signal_series())) return false;
  if (has_shape()) {
    if (!this->shape_->IsInitialized()) return false;
  }
  if (has_initial_state()) {
    if (!this->initial_state_->IsInitialized()) return false;
  }
  if (has_initial_signal_state()) {
    if (!this->initial_signal_state_->IsInitialized()) return false;
  }
  switch (prediction_case()) {
    case kTrajectoryPrediction: {
      if (has_trajectory_prediction()) {
        if (!this->trajectory_prediction().IsInitialized()) return false;
      }
      break;
    }
    case kSetBasedPrediction: {
      if (has_set_based_prediction()) {
        if (!this->set_based_prediction().IsInitialized()) return false;
      }
      break;
    }
    case PREDICTION_NOT_SET: {
      break;
    }
  }
  return true;
}

void DynamicObstacle::Swap(DynamicObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstacle::InternalSwap(DynamicObstacle* other) {
  using std::swap;
  CastToBase(&signal_series_)->InternalSwap(CastToBase(&other->signal_series_));
  swap(shape_, other->shape_);
  swap(initial_state_, other->initial_state_);
  swap(initial_signal_state_, other->initial_signal_state_);
  swap(dynamic_obstacle_id_, other->dynamic_obstacle_id_);
  swap(obstacle_type_, other->obstacle_type_);
  swap(prediction_, other->prediction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DynamicObstacle::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::DynamicObstacle* Arena::CreateMaybeMessage< ::commonroad::DynamicObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::DynamicObstacle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
