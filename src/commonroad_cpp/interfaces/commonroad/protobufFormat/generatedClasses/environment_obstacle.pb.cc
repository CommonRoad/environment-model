// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: environment_obstacle.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/environment_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Shape;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class EnvironmentObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentObstacle>
      _instance;
} _EnvironmentObstacle_default_instance_;
}  // namespace commonroad
namespace protobuf_environment_5fobstacle_2eproto {
static void InitDefaultsEnvironmentObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_EnvironmentObstacle_default_instance_;
    new (ptr) ::commonroad::EnvironmentObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::EnvironmentObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironmentObstacle}, {
      &protobuf_util_2eproto::scc_info_Shape.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EnvironmentObstacle.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::EnvironmentObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::EnvironmentObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::EnvironmentObstacle, environment_obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::EnvironmentObstacle, obstacle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::EnvironmentObstacle, obstacle_shape_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::commonroad::EnvironmentObstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_EnvironmentObstacle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "environment_obstacle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032environment_obstacle.proto\022\ncommonroad"
      "\032\016obstacle.proto\032\nutil.proto\"\243\001\n\023Environ"
      "mentObstacle\022\037\n\027environment_obstacle_id\030"
      "\001 \002(\r\022@\n\robstacle_type\030\002 \002(\0162).commonroa"
      "d.ObstacleTypeEnum.ObstacleType\022)\n\016obsta"
      "cle_shape\030\003 \002(\0132\021.commonroad.Shape"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "environment_obstacle.proto", &protobuf_RegisterTypes);
  ::protobuf_obstacle_2eproto::AddDescriptors();
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_environment_5fobstacle_2eproto
namespace commonroad {

// ===================================================================

void EnvironmentObstacle::InitAsDefaultInstance() {
  ::commonroad::_EnvironmentObstacle_default_instance_._instance.get_mutable()->obstacle_shape_ = const_cast< ::commonroad::Shape*>(
      ::commonroad::Shape::internal_default_instance());
}
void EnvironmentObstacle::clear_obstacle_shape() {
  if (obstacle_shape_ != NULL) obstacle_shape_->Clear();
  clear_has_obstacle_shape();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentObstacle::kEnvironmentObstacleIdFieldNumber;
const int EnvironmentObstacle::kObstacleTypeFieldNumber;
const int EnvironmentObstacle::kObstacleShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentObstacle::EnvironmentObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_environment_5fobstacle_2eproto::scc_info_EnvironmentObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.EnvironmentObstacle)
}
EnvironmentObstacle::EnvironmentObstacle(const EnvironmentObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacle_shape()) {
    obstacle_shape_ = new ::commonroad::Shape(*from.obstacle_shape_);
  } else {
    obstacle_shape_ = NULL;
  }
  ::memcpy(&environment_obstacle_id_, &from.environment_obstacle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_type_) -
    reinterpret_cast<char*>(&environment_obstacle_id_)) + sizeof(obstacle_type_));
  // @@protoc_insertion_point(copy_constructor:commonroad.EnvironmentObstacle)
}

void EnvironmentObstacle::SharedCtor() {
  ::memset(&obstacle_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_type_) -
      reinterpret_cast<char*>(&obstacle_shape_)) + sizeof(obstacle_type_));
}

EnvironmentObstacle::~EnvironmentObstacle() {
  // @@protoc_insertion_point(destructor:commonroad.EnvironmentObstacle)
  SharedDtor();
}

void EnvironmentObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete obstacle_shape_;
}

void EnvironmentObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnvironmentObstacle::descriptor() {
  ::protobuf_environment_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_environment_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentObstacle& EnvironmentObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_environment_5fobstacle_2eproto::scc_info_EnvironmentObstacle.base);
  return *internal_default_instance();
}


void EnvironmentObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.EnvironmentObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(obstacle_shape_ != NULL);
    obstacle_shape_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&environment_obstacle_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_type_) -
        reinterpret_cast<char*>(&environment_obstacle_id_)) + sizeof(obstacle_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnvironmentObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.EnvironmentObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 environment_obstacle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_environment_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &environment_obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::ObstacleTypeEnum_ObstacleType_IsValid(value)) {
            set_obstacle_type(static_cast< ::commonroad::ObstacleTypeEnum_ObstacleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Shape obstacle_shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.EnvironmentObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.EnvironmentObstacle)
  return false;
#undef DO_
}

void EnvironmentObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.EnvironmentObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 environment_obstacle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->environment_obstacle_id(), output);
  }

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->obstacle_type(), output);
  }

  // required .commonroad.Shape obstacle_shape = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_obstacle_shape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.EnvironmentObstacle)
}

::google::protobuf::uint8* EnvironmentObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.EnvironmentObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 environment_obstacle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->environment_obstacle_id(), target);
  }

  // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->obstacle_type(), target);
  }

  // required .commonroad.Shape obstacle_shape = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_obstacle_shape(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.EnvironmentObstacle)
  return target;
}

size_t EnvironmentObstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.EnvironmentObstacle)
  size_t total_size = 0;

  if (has_obstacle_shape()) {
    // required .commonroad.Shape obstacle_shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obstacle_shape_);
  }

  if (has_environment_obstacle_id()) {
    // required uint32 environment_obstacle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->environment_obstacle_id());
  }

  if (has_obstacle_type()) {
    // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());
  }

  return total_size;
}
size_t EnvironmentObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.EnvironmentObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .commonroad.Shape obstacle_shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obstacle_shape_);

    // required uint32 environment_obstacle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->environment_obstacle_id());

    // required .commonroad.ObstacleTypeEnum.ObstacleType obstacle_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.EnvironmentObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.EnvironmentObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.EnvironmentObstacle)
    MergeFrom(*source);
  }
}

void EnvironmentObstacle::MergeFrom(const EnvironmentObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.EnvironmentObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_obstacle_shape()->::commonroad::Shape::MergeFrom(from.obstacle_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      environment_obstacle_id_ = from.environment_obstacle_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_type_ = from.obstacle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnvironmentObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.EnvironmentObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentObstacle::CopyFrom(const EnvironmentObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.EnvironmentObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentObstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_obstacle_shape()) {
    if (!this->obstacle_shape_->IsInitialized()) return false;
  }
  return true;
}

void EnvironmentObstacle::Swap(EnvironmentObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentObstacle::InternalSwap(EnvironmentObstacle* other) {
  using std::swap;
  swap(obstacle_shape_, other->obstacle_shape_);
  swap(environment_obstacle_id_, other->environment_obstacle_id_);
  swap(obstacle_type_, other->obstacle_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnvironmentObstacle::GetMetadata() const {
  protobuf_environment_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_environment_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::EnvironmentObstacle* Arena::CreateMaybeMessage< ::commonroad::EnvironmentObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::EnvironmentObstacle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
