// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: intersection.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/intersection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_intersection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_intersection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Incoming;
}  // namespace protobuf_intersection_2eproto
namespace commonroad {
class IncomingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Incoming>
      _instance;
} _Incoming_default_instance_;
class IntersectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intersection>
      _instance;
} _Intersection_default_instance_;
}  // namespace commonroad
namespace protobuf_intersection_2eproto {
static void InitDefaultsIncoming() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Incoming_default_instance_;
    new (ptr) ::commonroad::Incoming();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Incoming::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Incoming =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIncoming}, {}};

static void InitDefaultsIntersection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Intersection_default_instance_;
    new (ptr) ::commonroad::Intersection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Intersection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Intersection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntersection}, {
      &protobuf_intersection_2eproto::scc_info_Incoming.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Incoming.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intersection.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, incoming_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, incoming_lanelets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, successors_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, successors_straight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, successors_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Incoming, is_left_of_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Intersection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Intersection, intersection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Intersection, incomings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Intersection, crossing_lanelets_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::commonroad::Incoming)},
  { 17, 25, sizeof(::commonroad::Intersection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Incoming_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Intersection_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "intersection.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022intersection.proto\022\ncommonroad\"\236\001\n\010Inc"
      "oming\022\023\n\013incoming_id\030\001 \002(\r\022\031\n\021incoming_l"
      "anelets\030\002 \003(\r\022\030\n\020successors_right\030\003 \003(\r\022"
      "\033\n\023successors_straight\030\004 \003(\r\022\027\n\017successo"
      "rs_left\030\005 \003(\r\022\022\n\nis_left_of\030\006 \001(\r\"k\n\014Int"
      "ersection\022\027\n\017intersection_id\030\001 \002(\r\022\'\n\tin"
      "comings\030\002 \003(\0132\024.commonroad.Incoming\022\031\n\021c"
      "rossing_lanelets\030\003 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "intersection.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_intersection_2eproto
namespace commonroad {

// ===================================================================

void Incoming::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Incoming::kIncomingIdFieldNumber;
const int Incoming::kIncomingLaneletsFieldNumber;
const int Incoming::kSuccessorsRightFieldNumber;
const int Incoming::kSuccessorsStraightFieldNumber;
const int Incoming::kSuccessorsLeftFieldNumber;
const int Incoming::kIsLeftOfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Incoming::Incoming()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_intersection_2eproto::scc_info_Incoming.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Incoming)
}
Incoming::Incoming(const Incoming& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      incoming_lanelets_(from.incoming_lanelets_),
      successors_right_(from.successors_right_),
      successors_straight_(from.successors_straight_),
      successors_left_(from.successors_left_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&incoming_id_, &from.incoming_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_left_of_) -
    reinterpret_cast<char*>(&incoming_id_)) + sizeof(is_left_of_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Incoming)
}

void Incoming::SharedCtor() {
  ::memset(&incoming_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_left_of_) -
      reinterpret_cast<char*>(&incoming_id_)) + sizeof(is_left_of_));
}

Incoming::~Incoming() {
  // @@protoc_insertion_point(destructor:commonroad.Incoming)
  SharedDtor();
}

void Incoming::SharedDtor() {
}

void Incoming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Incoming::descriptor() {
  ::protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_intersection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Incoming& Incoming::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_intersection_2eproto::scc_info_Incoming.base);
  return *internal_default_instance();
}


void Incoming::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Incoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_lanelets_.Clear();
  successors_right_.Clear();
  successors_straight_.Clear();
  successors_left_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&incoming_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_left_of_) -
        reinterpret_cast<char*>(&incoming_id_)) + sizeof(is_left_of_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Incoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Incoming)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 incoming_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_incoming_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 incoming_lanelets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_incoming_lanelets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_incoming_lanelets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 successors_right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_successors_right())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_successors_right())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 successors_straight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_successors_straight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_successors_straight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 successors_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_successors_left())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_successors_left())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_left_of = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_left_of();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_left_of_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Incoming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Incoming)
  return false;
#undef DO_
}

void Incoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Incoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 incoming_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->incoming_id(), output);
  }

  // repeated uint32 incoming_lanelets = 2;
  for (int i = 0, n = this->incoming_lanelets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->incoming_lanelets(i), output);
  }

  // repeated uint32 successors_right = 3;
  for (int i = 0, n = this->successors_right_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->successors_right(i), output);
  }

  // repeated uint32 successors_straight = 4;
  for (int i = 0, n = this->successors_straight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->successors_straight(i), output);
  }

  // repeated uint32 successors_left = 5;
  for (int i = 0, n = this->successors_left_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->successors_left(i), output);
  }

  // optional uint32 is_left_of = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_left_of(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Incoming)
}

::google::protobuf::uint8* Incoming::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Incoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 incoming_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->incoming_id(), target);
  }

  // repeated uint32 incoming_lanelets = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->incoming_lanelets_, target);

  // repeated uint32 successors_right = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->successors_right_, target);

  // repeated uint32 successors_straight = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->successors_straight_, target);

  // repeated uint32 successors_left = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->successors_left_, target);

  // optional uint32 is_left_of = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_left_of(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Incoming)
  return target;
}

size_t Incoming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Incoming)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 incoming_id = 1;
  if (has_incoming_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incoming_id());
  }
  // repeated uint32 incoming_lanelets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->incoming_lanelets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->incoming_lanelets_size());
    total_size += data_size;
  }

  // repeated uint32 successors_right = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->successors_right_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->successors_right_size());
    total_size += data_size;
  }

  // repeated uint32 successors_straight = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->successors_straight_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->successors_straight_size());
    total_size += data_size;
  }

  // repeated uint32 successors_left = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->successors_left_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->successors_left_size());
    total_size += data_size;
  }

  // optional uint32 is_left_of = 6;
  if (has_is_left_of()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_left_of());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Incoming::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Incoming)
  GOOGLE_DCHECK_NE(&from, this);
  const Incoming* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Incoming>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Incoming)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Incoming)
    MergeFrom(*source);
  }
}

void Incoming::MergeFrom(const Incoming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Incoming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_lanelets_.MergeFrom(from.incoming_lanelets_);
  successors_right_.MergeFrom(from.successors_right_);
  successors_straight_.MergeFrom(from.successors_straight_);
  successors_left_.MergeFrom(from.successors_left_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      incoming_id_ = from.incoming_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_left_of_ = from.is_left_of_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Incoming::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Incoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Incoming::CopyFrom(const Incoming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Incoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Incoming::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Incoming::Swap(Incoming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Incoming::InternalSwap(Incoming* other) {
  using std::swap;
  incoming_lanelets_.InternalSwap(&other->incoming_lanelets_);
  successors_right_.InternalSwap(&other->successors_right_);
  successors_straight_.InternalSwap(&other->successors_straight_);
  successors_left_.InternalSwap(&other->successors_left_);
  swap(incoming_id_, other->incoming_id_);
  swap(is_left_of_, other->is_left_of_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Incoming::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_intersection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Intersection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intersection::kIntersectionIdFieldNumber;
const int Intersection::kIncomingsFieldNumber;
const int Intersection::kCrossingLaneletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intersection::Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_intersection_2eproto::scc_info_Intersection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Intersection)
}
Intersection::Intersection(const Intersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      incomings_(from.incomings_),
      crossing_lanelets_(from.crossing_lanelets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intersection_id_ = from.intersection_id_;
  // @@protoc_insertion_point(copy_constructor:commonroad.Intersection)
}

void Intersection::SharedCtor() {
  intersection_id_ = 0u;
}

Intersection::~Intersection() {
  // @@protoc_insertion_point(destructor:commonroad.Intersection)
  SharedDtor();
}

void Intersection::SharedDtor() {
}

void Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Intersection::descriptor() {
  ::protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_intersection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Intersection& Intersection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_intersection_2eproto::scc_info_Intersection.base);
  return *internal_default_instance();
}


void Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incomings_.Clear();
  crossing_lanelets_.Clear();
  intersection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Intersection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 intersection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_intersection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intersection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.Incoming incomings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_incomings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 crossing_lanelets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_crossing_lanelets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_crossing_lanelets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Intersection)
  return false;
#undef DO_
}

void Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 intersection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->intersection_id(), output);
  }

  // repeated .commonroad.Incoming incomings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incomings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->incomings(static_cast<int>(i)),
      output);
  }

  // repeated uint32 crossing_lanelets = 3;
  for (int i = 0, n = this->crossing_lanelets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->crossing_lanelets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Intersection)
}

::google::protobuf::uint8* Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 intersection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->intersection_id(), target);
  }

  // repeated .commonroad.Incoming incomings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incomings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->incomings(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 crossing_lanelets = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->crossing_lanelets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Intersection)
  return target;
}

size_t Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Intersection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 intersection_id = 1;
  if (has_intersection_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intersection_id());
  }
  // repeated .commonroad.Incoming incomings = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->incomings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->incomings(static_cast<int>(i)));
    }
  }

  // repeated uint32 crossing_lanelets = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->crossing_lanelets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->crossing_lanelets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Intersection)
    MergeFrom(*source);
  }
}

void Intersection::MergeFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incomings_.MergeFrom(from.incomings_);
  crossing_lanelets_.MergeFrom(from.crossing_lanelets_);
  if (from.has_intersection_id()) {
    set_intersection_id(from.intersection_id());
  }
}

void Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersection::CopyFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->incomings())) return false;
  return true;
}

void Intersection::Swap(Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intersection::InternalSwap(Intersection* other) {
  using std::swap;
  CastToBase(&incomings_)->InternalSwap(CastToBase(&other->incomings_));
  crossing_lanelets_.InternalSwap(&other->crossing_lanelets_);
  swap(intersection_id_, other->intersection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Intersection::GetMetadata() const {
  protobuf_intersection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_intersection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Incoming* Arena::CreateMaybeMessage< ::commonroad::Incoming >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Incoming >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Intersection* Arena::CreateMaybeMessage< ::commonroad::Intersection >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Intersection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
