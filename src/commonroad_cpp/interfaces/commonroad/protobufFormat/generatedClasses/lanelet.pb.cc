// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lanelet.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/lanelet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_lanelet_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lanelet_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Bound;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lanelet_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StopLine;
}  // namespace protobuf_lanelet_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class LineMarkingEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineMarkingEnum>
      _instance;
} _LineMarkingEnum_default_instance_;
class DrivingDirEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DrivingDirEnum>
      _instance;
} _DrivingDirEnum_default_instance_;
class LaneletTypeEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneletTypeEnum>
      _instance;
} _LaneletTypeEnum_default_instance_;
class RoadUserEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadUserEnum>
      _instance;
} _RoadUserEnum_default_instance_;
class BoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bound>
      _instance;
} _Bound_default_instance_;
class StopLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopLine>
      _instance;
} _StopLine_default_instance_;
class LaneletDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lanelet>
      _instance;
} _Lanelet_default_instance_;
}  // namespace commonroad
namespace protobuf_lanelet_2eproto {
static void InitDefaultsLineMarkingEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_LineMarkingEnum_default_instance_;
    new (ptr) ::commonroad::LineMarkingEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::LineMarkingEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LineMarkingEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLineMarkingEnum}, {}};

static void InitDefaultsDrivingDirEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_DrivingDirEnum_default_instance_;
    new (ptr) ::commonroad::DrivingDirEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::DrivingDirEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DrivingDirEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDrivingDirEnum}, {}};

static void InitDefaultsLaneletTypeEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_LaneletTypeEnum_default_instance_;
    new (ptr) ::commonroad::LaneletTypeEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::LaneletTypeEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneletTypeEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneletTypeEnum}, {}};

static void InitDefaultsRoadUserEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_RoadUserEnum_default_instance_;
    new (ptr) ::commonroad::RoadUserEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::RoadUserEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadUserEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadUserEnum}, {}};

static void InitDefaultsBound() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Bound_default_instance_;
    new (ptr) ::commonroad::Bound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Bound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Bound =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBound}, {
      &protobuf_util_2eproto::scc_info_Point.base,}};

static void InitDefaultsStopLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_StopLine_default_instance_;
    new (ptr) ::commonroad::StopLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::StopLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopLine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopLine}, {
      &protobuf_util_2eproto::scc_info_Point.base,}};

static void InitDefaultsLanelet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Lanelet_default_instance_;
    new (ptr) ::commonroad::Lanelet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Lanelet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Lanelet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLanelet}, {
      &protobuf_lanelet_2eproto::scc_info_Bound.base,
      &protobuf_lanelet_2eproto::scc_info_StopLine.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LineMarkingEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DrivingDirEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneletTypeEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadUserEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bound.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopLine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lanelet.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::LineMarkingEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::LineMarkingEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DrivingDirEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::DrivingDirEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::LaneletTypeEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::LaneletTypeEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::RoadUserEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::RoadUserEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Bound, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Bound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Bound, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Bound, line_marking_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, line_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, traffic_sign_refs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::StopLine, traffic_light_refs_),
  ~0u,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, lanelet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, left_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, right_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, predecessors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, successors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, adjacent_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, adjacent_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, adjacent_left_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, adjacent_right_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, lanelet_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, user_one_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, user_bidirectional_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, traffic_sign_refs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Lanelet, traffic_light_refs_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::commonroad::LineMarkingEnum)},
  { 5, 10, sizeof(::commonroad::DrivingDirEnum)},
  { 10, 15, sizeof(::commonroad::LaneletTypeEnum)},
  { 15, 20, sizeof(::commonroad::RoadUserEnum)},
  { 20, 27, sizeof(::commonroad::Bound)},
  { 29, 38, sizeof(::commonroad::StopLine)},
  { 42, 62, sizeof(::commonroad::Lanelet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_LineMarkingEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_DrivingDirEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_LaneletTypeEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_RoadUserEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Bound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_StopLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Lanelet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "lanelet.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rlanelet.proto\022\ncommonroad\032\nutil.proto\""
      "w\n\017LineMarkingEnum\"d\n\013LineMarking\022\n\n\006DAS"
      "HED\020\000\022\t\n\005SOLID\020\001\022\020\n\014BROAD_DASHED\020\002\022\017\n\013BR"
      "OAD_SOLID\020\003\022\013\n\007UNKNOWN\020\004\022\016\n\nNO_MARKING\020\005"
      "\"6\n\016DrivingDirEnum\"$\n\nDrivingDir\022\010\n\004SAME"
      "\020\000\022\014\n\010OPPOSITE\020\001\"\224\002\n\017LaneletTypeEnum\"\200\002\n"
      "\013LaneletType\022\t\n\005URBAN\020\000\022\013\n\007COUNTRY\020\001\022\013\n\007"
      "HIGHWAY\020\002\022\r\n\tDRIVE_WAY\020\003\022\025\n\021MAIN_CARRIAG"
      "E_WAY\020\004\022\017\n\013ACCESS_RAMP\020\005\022\r\n\tEXIT_RAMP\020\006\022"
      "\014\n\010SHOULDER\020\007\022\014\n\010BUS_LANE\020\010\022\014\n\010BUS_STOP\020"
      "\t\022\020\n\014BICYCLE_LANE\020\n\022\014\n\010SIDEWALK\020\013\022\r\n\tCRO"
      "SSWALK\020\014\022\016\n\nINTERSTATE\020\r\022\020\n\014INTERSECTION"
      "\020\016\022\013\n\007UNKNOWN\020\017\"\235\001\n\014RoadUserEnum\"\214\001\n\010Roa"
      "dUser\022\013\n\007VEHICLE\020\000\022\007\n\003CAR\020\001\022\t\n\005TRUCK\020\002\022\007"
      "\n\003BUS\020\003\022\024\n\020PRIORITY_VEHICLE\020\004\022\016\n\nMOTORCY"
      "CLE\020\005\022\013\n\007BICYCLE\020\006\022\016\n\nPEDESTRIAN\020\007\022\t\n\005TR"
      "AIN\020\010\022\010\n\004TAXI\020\t\"i\n\005Bound\022!\n\006points\030\001 \003(\013"
      "2\021.commonroad.Point\022=\n\014line_marking\030\002 \001("
      "\0162\'.commonroad.LineMarkingEnum.LineMarki"
      "ng\"\243\001\n\010StopLine\022!\n\006points\030\001 \003(\0132\021.common"
      "road.Point\022=\n\014line_marking\030\002 \002(\0162\'.commo"
      "nroad.LineMarkingEnum.LineMarking\022\031\n\021tra"
      "ffic_sign_refs\030\003 \003(\r\022\032\n\022traffic_light_re"
      "fs\030\004 \003(\r\"\342\004\n\007Lanelet\022\022\n\nlanelet_id\030\001 \002(\r"
      "\022%\n\nleft_bound\030\002 \002(\0132\021.commonroad.Bound\022"
      "&\n\013right_bound\030\003 \002(\0132\021.commonroad.Bound\022"
      "\024\n\014predecessors\030\004 \003(\r\022\022\n\nsuccessors\030\005 \003("
      "\r\022\025\n\radjacent_left\030\006 \001(\r\022\026\n\016adjacent_rig"
      "ht\030\007 \001(\r\022@\n\021adjacent_left_dir\030\010 \001(\0162%.co"
      "mmonroad.DrivingDirEnum.DrivingDir\022A\n\022ad"
      "jacent_right_dir\030\t \001(\0162%.commonroad.Driv"
      "ingDirEnum.DrivingDir\022\'\n\tstop_line\030\n \001(\013"
      "2\024.commonroad.StopLine\022>\n\rlanelet_types\030"
      "\013 \003(\0162\'.commonroad.LaneletTypeEnum.Lanel"
      "etType\0227\n\014user_one_way\030\014 \003(\0162!.commonroa"
      "d.RoadUserEnum.RoadUser\022=\n\022user_bidirect"
      "ional\030\r \003(\0162!.commonroad.RoadUserEnum.Ro"
      "adUser\022\031\n\021traffic_sign_refs\030\016 \003(\r\022\032\n\022tra"
      "ffic_light_refs\030\017 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lanelet.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lanelet_2eproto
namespace commonroad {
const ::google::protobuf::EnumDescriptor* LineMarkingEnum_LineMarking_descriptor() {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lanelet_2eproto::file_level_enum_descriptors[0];
}
bool LineMarkingEnum_LineMarking_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LineMarkingEnum_LineMarking LineMarkingEnum::DASHED;
const LineMarkingEnum_LineMarking LineMarkingEnum::SOLID;
const LineMarkingEnum_LineMarking LineMarkingEnum::BROAD_DASHED;
const LineMarkingEnum_LineMarking LineMarkingEnum::BROAD_SOLID;
const LineMarkingEnum_LineMarking LineMarkingEnum::UNKNOWN;
const LineMarkingEnum_LineMarking LineMarkingEnum::NO_MARKING;
const LineMarkingEnum_LineMarking LineMarkingEnum::LineMarking_MIN;
const LineMarkingEnum_LineMarking LineMarkingEnum::LineMarking_MAX;
const int LineMarkingEnum::LineMarking_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrivingDirEnum_DrivingDir_descriptor() {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lanelet_2eproto::file_level_enum_descriptors[1];
}
bool DrivingDirEnum_DrivingDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrivingDirEnum_DrivingDir DrivingDirEnum::SAME;
const DrivingDirEnum_DrivingDir DrivingDirEnum::OPPOSITE;
const DrivingDirEnum_DrivingDir DrivingDirEnum::DrivingDir_MIN;
const DrivingDirEnum_DrivingDir DrivingDirEnum::DrivingDir_MAX;
const int DrivingDirEnum::DrivingDir_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneletTypeEnum_LaneletType_descriptor() {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lanelet_2eproto::file_level_enum_descriptors[2];
}
bool LaneletTypeEnum_LaneletType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneletTypeEnum_LaneletType LaneletTypeEnum::URBAN;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::COUNTRY;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::HIGHWAY;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::DRIVE_WAY;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::MAIN_CARRIAGE_WAY;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::ACCESS_RAMP;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::EXIT_RAMP;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::SHOULDER;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::BUS_LANE;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::BUS_STOP;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::BICYCLE_LANE;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::SIDEWALK;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::CROSSWALK;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::INTERSTATE;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::INTERSECTION;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::UNKNOWN;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::LaneletType_MIN;
const LaneletTypeEnum_LaneletType LaneletTypeEnum::LaneletType_MAX;
const int LaneletTypeEnum::LaneletType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadUserEnum_RoadUser_descriptor() {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lanelet_2eproto::file_level_enum_descriptors[3];
}
bool RoadUserEnum_RoadUser_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadUserEnum_RoadUser RoadUserEnum::VEHICLE;
const RoadUserEnum_RoadUser RoadUserEnum::CAR;
const RoadUserEnum_RoadUser RoadUserEnum::TRUCK;
const RoadUserEnum_RoadUser RoadUserEnum::BUS;
const RoadUserEnum_RoadUser RoadUserEnum::PRIORITY_VEHICLE;
const RoadUserEnum_RoadUser RoadUserEnum::MOTORCYCLE;
const RoadUserEnum_RoadUser RoadUserEnum::BICYCLE;
const RoadUserEnum_RoadUser RoadUserEnum::PEDESTRIAN;
const RoadUserEnum_RoadUser RoadUserEnum::TRAIN;
const RoadUserEnum_RoadUser RoadUserEnum::TAXI;
const RoadUserEnum_RoadUser RoadUserEnum::RoadUser_MIN;
const RoadUserEnum_RoadUser RoadUserEnum::RoadUser_MAX;
const int RoadUserEnum::RoadUser_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LineMarkingEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineMarkingEnum::LineMarkingEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_LineMarkingEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.LineMarkingEnum)
}
LineMarkingEnum::LineMarkingEnum(const LineMarkingEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.LineMarkingEnum)
}

void LineMarkingEnum::SharedCtor() {
}

LineMarkingEnum::~LineMarkingEnum() {
  // @@protoc_insertion_point(destructor:commonroad.LineMarkingEnum)
  SharedDtor();
}

void LineMarkingEnum::SharedDtor() {
}

void LineMarkingEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LineMarkingEnum::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineMarkingEnum& LineMarkingEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_LineMarkingEnum.base);
  return *internal_default_instance();
}


void LineMarkingEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.LineMarkingEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LineMarkingEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.LineMarkingEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.LineMarkingEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.LineMarkingEnum)
  return false;
#undef DO_
}

void LineMarkingEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.LineMarkingEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.LineMarkingEnum)
}

::google::protobuf::uint8* LineMarkingEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.LineMarkingEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.LineMarkingEnum)
  return target;
}

size_t LineMarkingEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.LineMarkingEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineMarkingEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.LineMarkingEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const LineMarkingEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineMarkingEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.LineMarkingEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.LineMarkingEnum)
    MergeFrom(*source);
  }
}

void LineMarkingEnum::MergeFrom(const LineMarkingEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.LineMarkingEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LineMarkingEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.LineMarkingEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineMarkingEnum::CopyFrom(const LineMarkingEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.LineMarkingEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineMarkingEnum::IsInitialized() const {
  return true;
}

void LineMarkingEnum::Swap(LineMarkingEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineMarkingEnum::InternalSwap(LineMarkingEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LineMarkingEnum::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DrivingDirEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrivingDirEnum::DrivingDirEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_DrivingDirEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.DrivingDirEnum)
}
DrivingDirEnum::DrivingDirEnum(const DrivingDirEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.DrivingDirEnum)
}

void DrivingDirEnum::SharedCtor() {
}

DrivingDirEnum::~DrivingDirEnum() {
  // @@protoc_insertion_point(destructor:commonroad.DrivingDirEnum)
  SharedDtor();
}

void DrivingDirEnum::SharedDtor() {
}

void DrivingDirEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DrivingDirEnum::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DrivingDirEnum& DrivingDirEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_DrivingDirEnum.base);
  return *internal_default_instance();
}


void DrivingDirEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.DrivingDirEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DrivingDirEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.DrivingDirEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.DrivingDirEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.DrivingDirEnum)
  return false;
#undef DO_
}

void DrivingDirEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.DrivingDirEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.DrivingDirEnum)
}

::google::protobuf::uint8* DrivingDirEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.DrivingDirEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.DrivingDirEnum)
  return target;
}

size_t DrivingDirEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.DrivingDirEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingDirEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.DrivingDirEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const DrivingDirEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DrivingDirEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.DrivingDirEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.DrivingDirEnum)
    MergeFrom(*source);
  }
}

void DrivingDirEnum::MergeFrom(const DrivingDirEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.DrivingDirEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DrivingDirEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.DrivingDirEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrivingDirEnum::CopyFrom(const DrivingDirEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.DrivingDirEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingDirEnum::IsInitialized() const {
  return true;
}

void DrivingDirEnum::Swap(DrivingDirEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrivingDirEnum::InternalSwap(DrivingDirEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DrivingDirEnum::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneletTypeEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneletTypeEnum::LaneletTypeEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_LaneletTypeEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.LaneletTypeEnum)
}
LaneletTypeEnum::LaneletTypeEnum(const LaneletTypeEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.LaneletTypeEnum)
}

void LaneletTypeEnum::SharedCtor() {
}

LaneletTypeEnum::~LaneletTypeEnum() {
  // @@protoc_insertion_point(destructor:commonroad.LaneletTypeEnum)
  SharedDtor();
}

void LaneletTypeEnum::SharedDtor() {
}

void LaneletTypeEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneletTypeEnum::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneletTypeEnum& LaneletTypeEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_LaneletTypeEnum.base);
  return *internal_default_instance();
}


void LaneletTypeEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.LaneletTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneletTypeEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.LaneletTypeEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.LaneletTypeEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.LaneletTypeEnum)
  return false;
#undef DO_
}

void LaneletTypeEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.LaneletTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.LaneletTypeEnum)
}

::google::protobuf::uint8* LaneletTypeEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.LaneletTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.LaneletTypeEnum)
  return target;
}

size_t LaneletTypeEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.LaneletTypeEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneletTypeEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.LaneletTypeEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneletTypeEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneletTypeEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.LaneletTypeEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.LaneletTypeEnum)
    MergeFrom(*source);
  }
}

void LaneletTypeEnum::MergeFrom(const LaneletTypeEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.LaneletTypeEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LaneletTypeEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.LaneletTypeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneletTypeEnum::CopyFrom(const LaneletTypeEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.LaneletTypeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneletTypeEnum::IsInitialized() const {
  return true;
}

void LaneletTypeEnum::Swap(LaneletTypeEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneletTypeEnum::InternalSwap(LaneletTypeEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneletTypeEnum::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadUserEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadUserEnum::RoadUserEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_RoadUserEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.RoadUserEnum)
}
RoadUserEnum::RoadUserEnum(const RoadUserEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.RoadUserEnum)
}

void RoadUserEnum::SharedCtor() {
}

RoadUserEnum::~RoadUserEnum() {
  // @@protoc_insertion_point(destructor:commonroad.RoadUserEnum)
  SharedDtor();
}

void RoadUserEnum::SharedDtor() {
}

void RoadUserEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadUserEnum::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadUserEnum& RoadUserEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_RoadUserEnum.base);
  return *internal_default_instance();
}


void RoadUserEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.RoadUserEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadUserEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.RoadUserEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.RoadUserEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.RoadUserEnum)
  return false;
#undef DO_
}

void RoadUserEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.RoadUserEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.RoadUserEnum)
}

::google::protobuf::uint8* RoadUserEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.RoadUserEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.RoadUserEnum)
  return target;
}

size_t RoadUserEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.RoadUserEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadUserEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.RoadUserEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadUserEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadUserEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.RoadUserEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.RoadUserEnum)
    MergeFrom(*source);
  }
}

void RoadUserEnum::MergeFrom(const RoadUserEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.RoadUserEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoadUserEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.RoadUserEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadUserEnum::CopyFrom(const RoadUserEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.RoadUserEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadUserEnum::IsInitialized() const {
  return true;
}

void RoadUserEnum::Swap(RoadUserEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadUserEnum::InternalSwap(RoadUserEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadUserEnum::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bound::InitAsDefaultInstance() {
}
void Bound::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bound::kPointsFieldNumber;
const int Bound::kLineMarkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bound::Bound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_Bound.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Bound)
}
Bound::Bound(const Bound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  line_marking_ = from.line_marking_;
  // @@protoc_insertion_point(copy_constructor:commonroad.Bound)
}

void Bound::SharedCtor() {
  line_marking_ = 0;
}

Bound::~Bound() {
  // @@protoc_insertion_point(destructor:commonroad.Bound)
  SharedDtor();
}

void Bound::SharedDtor() {
}

void Bound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Bound::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bound& Bound::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_Bound.base);
  return *internal_default_instance();
}


void Bound::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Bound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  line_marking_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Bound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonroad.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::LineMarkingEnum_LineMarking_IsValid(value)) {
            set_line_marking(static_cast< ::commonroad::LineMarkingEnum_LineMarking >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Bound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Bound)
  return false;
#undef DO_
}

void Bound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Bound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->line_marking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Bound)
}

::google::protobuf::uint8* Bound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Bound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->line_marking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Bound)
  return target;
}

size_t Bound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Bound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .commonroad.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // optional .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (has_line_marking()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_marking());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  const Bound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Bound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Bound)
    MergeFrom(*source);
  }
}

void Bound::MergeFrom(const Bound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_line_marking()) {
    set_line_marking(from.line_marking());
  }
}

void Bound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bound::CopyFrom(const Bound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bound::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void Bound::Swap(Bound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bound::InternalSwap(Bound* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(line_marking_, other->line_marking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Bound::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopLine::InitAsDefaultInstance() {
}
void StopLine::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopLine::kPointsFieldNumber;
const int StopLine::kLineMarkingFieldNumber;
const int StopLine::kTrafficSignRefsFieldNumber;
const int StopLine::kTrafficLightRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopLine::StopLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_StopLine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.StopLine)
}
StopLine::StopLine(const StopLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      points_(from.points_),
      traffic_sign_refs_(from.traffic_sign_refs_),
      traffic_light_refs_(from.traffic_light_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  line_marking_ = from.line_marking_;
  // @@protoc_insertion_point(copy_constructor:commonroad.StopLine)
}

void StopLine::SharedCtor() {
  line_marking_ = 0;
}

StopLine::~StopLine() {
  // @@protoc_insertion_point(destructor:commonroad.StopLine)
  SharedDtor();
}

void StopLine::SharedDtor() {
}

void StopLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopLine::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopLine& StopLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_StopLine.base);
  return *internal_default_instance();
}


void StopLine::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.StopLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  traffic_sign_refs_.Clear();
  traffic_light_refs_.Clear();
  line_marking_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.StopLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonroad.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::LineMarkingEnum_LineMarking_IsValid(value)) {
            set_line_marking(static_cast< ::commonroad::LineMarkingEnum_LineMarking >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 traffic_sign_refs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_traffic_sign_refs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_traffic_sign_refs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 traffic_light_refs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_traffic_light_refs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_traffic_light_refs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.StopLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.StopLine)
  return false;
#undef DO_
}

void StopLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.StopLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->line_marking(), output);
  }

  // repeated uint32 traffic_sign_refs = 3;
  for (int i = 0, n = this->traffic_sign_refs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->traffic_sign_refs(i), output);
  }

  // repeated uint32 traffic_light_refs = 4;
  for (int i = 0, n = this->traffic_light_refs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->traffic_light_refs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.StopLine)
}

::google::protobuf::uint8* StopLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.StopLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->line_marking(), target);
  }

  // repeated uint32 traffic_sign_refs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->traffic_sign_refs_, target);

  // repeated uint32 traffic_light_refs = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->traffic_light_refs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.StopLine)
  return target;
}

size_t StopLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.StopLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .commonroad.LineMarkingEnum.LineMarking line_marking = 2;
  if (has_line_marking()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_marking());
  }
  // repeated .commonroad.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated uint32 traffic_sign_refs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->traffic_sign_refs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->traffic_sign_refs_size());
    total_size += data_size;
  }

  // repeated uint32 traffic_light_refs = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->traffic_light_refs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->traffic_light_refs_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.StopLine)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.StopLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.StopLine)
    MergeFrom(*source);
  }
}

void StopLine::MergeFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.StopLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  traffic_sign_refs_.MergeFrom(from.traffic_sign_refs_);
  traffic_light_refs_.MergeFrom(from.traffic_light_refs_);
  if (from.has_line_marking()) {
    set_line_marking(from.line_marking());
  }
}

void StopLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.StopLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLine::CopyFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.StopLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void StopLine::Swap(StopLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopLine::InternalSwap(StopLine* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  traffic_sign_refs_.InternalSwap(&other->traffic_sign_refs_);
  traffic_light_refs_.InternalSwap(&other->traffic_light_refs_);
  swap(line_marking_, other->line_marking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopLine::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lanelet::InitAsDefaultInstance() {
  ::commonroad::_Lanelet_default_instance_._instance.get_mutable()->left_bound_ = const_cast< ::commonroad::Bound*>(
      ::commonroad::Bound::internal_default_instance());
  ::commonroad::_Lanelet_default_instance_._instance.get_mutable()->right_bound_ = const_cast< ::commonroad::Bound*>(
      ::commonroad::Bound::internal_default_instance());
  ::commonroad::_Lanelet_default_instance_._instance.get_mutable()->stop_line_ = const_cast< ::commonroad::StopLine*>(
      ::commonroad::StopLine::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lanelet::kLaneletIdFieldNumber;
const int Lanelet::kLeftBoundFieldNumber;
const int Lanelet::kRightBoundFieldNumber;
const int Lanelet::kPredecessorsFieldNumber;
const int Lanelet::kSuccessorsFieldNumber;
const int Lanelet::kAdjacentLeftFieldNumber;
const int Lanelet::kAdjacentRightFieldNumber;
const int Lanelet::kAdjacentLeftDirFieldNumber;
const int Lanelet::kAdjacentRightDirFieldNumber;
const int Lanelet::kStopLineFieldNumber;
const int Lanelet::kLaneletTypesFieldNumber;
const int Lanelet::kUserOneWayFieldNumber;
const int Lanelet::kUserBidirectionalFieldNumber;
const int Lanelet::kTrafficSignRefsFieldNumber;
const int Lanelet::kTrafficLightRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lanelet::Lanelet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lanelet_2eproto::scc_info_Lanelet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Lanelet)
}
Lanelet::Lanelet(const Lanelet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      predecessors_(from.predecessors_),
      successors_(from.successors_),
      lanelet_types_(from.lanelet_types_),
      user_one_way_(from.user_one_way_),
      user_bidirectional_(from.user_bidirectional_),
      traffic_sign_refs_(from.traffic_sign_refs_),
      traffic_light_refs_(from.traffic_light_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_bound()) {
    left_bound_ = new ::commonroad::Bound(*from.left_bound_);
  } else {
    left_bound_ = NULL;
  }
  if (from.has_right_bound()) {
    right_bound_ = new ::commonroad::Bound(*from.right_bound_);
  } else {
    right_bound_ = NULL;
  }
  if (from.has_stop_line()) {
    stop_line_ = new ::commonroad::StopLine(*from.stop_line_);
  } else {
    stop_line_ = NULL;
  }
  ::memcpy(&lanelet_id_, &from.lanelet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&adjacent_right_dir_) -
    reinterpret_cast<char*>(&lanelet_id_)) + sizeof(adjacent_right_dir_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Lanelet)
}

void Lanelet::SharedCtor() {
  ::memset(&left_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adjacent_right_dir_) -
      reinterpret_cast<char*>(&left_bound_)) + sizeof(adjacent_right_dir_));
}

Lanelet::~Lanelet() {
  // @@protoc_insertion_point(destructor:commonroad.Lanelet)
  SharedDtor();
}

void Lanelet::SharedDtor() {
  if (this != internal_default_instance()) delete left_bound_;
  if (this != internal_default_instance()) delete right_bound_;
  if (this != internal_default_instance()) delete stop_line_;
}

void Lanelet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lanelet::descriptor() {
  ::protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lanelet& Lanelet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lanelet_2eproto::scc_info_Lanelet.base);
  return *internal_default_instance();
}


void Lanelet::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Lanelet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predecessors_.Clear();
  successors_.Clear();
  lanelet_types_.Clear();
  user_one_way_.Clear();
  user_bidirectional_.Clear();
  traffic_sign_refs_.Clear();
  traffic_light_refs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_bound_ != NULL);
      left_bound_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_bound_ != NULL);
      right_bound_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stop_line_ != NULL);
      stop_line_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&lanelet_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adjacent_right_dir_) -
        reinterpret_cast<char*>(&lanelet_id_)) + sizeof(adjacent_right_dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lanelet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Lanelet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lanelet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lanelet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lanelet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Bound left_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Bound right_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 predecessors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_predecessors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_predecessors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 successors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_successors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_successors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 adjacent_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_adjacent_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjacent_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 adjacent_right = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_adjacent_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjacent_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::DrivingDirEnum_DrivingDir_IsValid(value)) {
            set_adjacent_left_dir(static_cast< ::commonroad::DrivingDirEnum_DrivingDir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::DrivingDirEnum_DrivingDir_IsValid(value)) {
            set_adjacent_right_dir(static_cast< ::commonroad::DrivingDirEnum_DrivingDir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.StopLine stop_line = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::LaneletTypeEnum_LaneletType_IsValid(value)) {
            add_lanelet_types(static_cast< ::commonroad::LaneletTypeEnum_LaneletType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 11,
                 ::commonroad::LaneletTypeEnum_LaneletType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_lanelet_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::RoadUserEnum_RoadUser_IsValid(value)) {
            add_user_one_way(static_cast< ::commonroad::RoadUserEnum_RoadUser >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 12,
                 ::commonroad::RoadUserEnum_RoadUser_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_user_one_way())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::RoadUserEnum_RoadUser_IsValid(value)) {
            add_user_bidirectional(static_cast< ::commonroad::RoadUserEnum_RoadUser >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 13,
                 ::commonroad::RoadUserEnum_RoadUser_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_user_bidirectional())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 traffic_sign_refs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112u, input, this->mutable_traffic_sign_refs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_traffic_sign_refs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 traffic_light_refs = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_traffic_light_refs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_traffic_light_refs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Lanelet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Lanelet)
  return false;
#undef DO_
}

void Lanelet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Lanelet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 lanelet_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lanelet_id(), output);
  }

  // required .commonroad.Bound left_bound = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_left_bound(), output);
  }

  // required .commonroad.Bound right_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_right_bound(), output);
  }

  // repeated uint32 predecessors = 4;
  for (int i = 0, n = this->predecessors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->predecessors(i), output);
  }

  // repeated uint32 successors = 5;
  for (int i = 0, n = this->successors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->successors(i), output);
  }

  // optional uint32 adjacent_left = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->adjacent_left(), output);
  }

  // optional uint32 adjacent_right = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->adjacent_right(), output);
  }

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->adjacent_left_dir(), output);
  }

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->adjacent_right_dir(), output);
  }

  // optional .commonroad.StopLine stop_line = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_stop_line(), output);
  }

  // repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
  for (int i = 0, n = this->lanelet_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->lanelet_types(i), output);
  }

  // repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
  for (int i = 0, n = this->user_one_way_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->user_one_way(i), output);
  }

  // repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
  for (int i = 0, n = this->user_bidirectional_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->user_bidirectional(i), output);
  }

  // repeated uint32 traffic_sign_refs = 14;
  for (int i = 0, n = this->traffic_sign_refs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->traffic_sign_refs(i), output);
  }

  // repeated uint32 traffic_light_refs = 15;
  for (int i = 0, n = this->traffic_light_refs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->traffic_light_refs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Lanelet)
}

::google::protobuf::uint8* Lanelet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Lanelet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 lanelet_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lanelet_id(), target);
  }

  // required .commonroad.Bound left_bound = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_left_bound(), deterministic, target);
  }

  // required .commonroad.Bound right_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_right_bound(), deterministic, target);
  }

  // repeated uint32 predecessors = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->predecessors_, target);

  // repeated uint32 successors = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->successors_, target);

  // optional uint32 adjacent_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->adjacent_left(), target);
  }

  // optional uint32 adjacent_right = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->adjacent_right(), target);
  }

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->adjacent_left_dir(), target);
  }

  // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->adjacent_right_dir(), target);
  }

  // optional .commonroad.StopLine stop_line = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_stop_line(), deterministic, target);
  }

  // repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    11, this->lanelet_types_, target);

  // repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    12, this->user_one_way_, target);

  // repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    13, this->user_bidirectional_, target);

  // repeated uint32 traffic_sign_refs = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(14, this->traffic_sign_refs_, target);

  // repeated uint32 traffic_light_refs = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->traffic_light_refs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Lanelet)
  return target;
}

size_t Lanelet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.Lanelet)
  size_t total_size = 0;

  if (has_left_bound()) {
    // required .commonroad.Bound left_bound = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_bound_);
  }

  if (has_right_bound()) {
    // required .commonroad.Bound right_bound = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_bound_);
  }

  if (has_lanelet_id()) {
    // required uint32 lanelet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lanelet_id());
  }

  return total_size;
}
size_t Lanelet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Lanelet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .commonroad.Bound left_bound = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_bound_);

    // required .commonroad.Bound right_bound = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_bound_);

    // required uint32 lanelet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lanelet_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 predecessors = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->predecessors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->predecessors_size());
    total_size += data_size;
  }

  // repeated uint32 successors = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->successors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->successors_size());
    total_size += data_size;
  }

  // repeated .commonroad.LaneletTypeEnum.LaneletType lanelet_types = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->lanelet_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->lanelet_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .commonroad.RoadUserEnum.RoadUser user_one_way = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->user_one_way_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->user_one_way(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .commonroad.RoadUserEnum.RoadUser user_bidirectional = 13;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->user_bidirectional_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->user_bidirectional(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated uint32 traffic_sign_refs = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->traffic_sign_refs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->traffic_sign_refs_size());
    total_size += data_size;
  }

  // repeated uint32 traffic_light_refs = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->traffic_light_refs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->traffic_light_refs_size());
    total_size += data_size;
  }

  // optional .commonroad.StopLine stop_line = 10;
  if (has_stop_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stop_line_);
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional uint32 adjacent_left = 6;
    if (has_adjacent_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjacent_left());
    }

    // optional uint32 adjacent_right = 7;
    if (has_adjacent_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjacent_right());
    }

    // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_left_dir = 8;
    if (has_adjacent_left_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adjacent_left_dir());
    }

    // optional .commonroad.DrivingDirEnum.DrivingDir adjacent_right_dir = 9;
    if (has_adjacent_right_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adjacent_right_dir());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lanelet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Lanelet)
  GOOGLE_DCHECK_NE(&from, this);
  const Lanelet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lanelet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Lanelet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Lanelet)
    MergeFrom(*source);
  }
}

void Lanelet::MergeFrom(const Lanelet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Lanelet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predecessors_.MergeFrom(from.predecessors_);
  successors_.MergeFrom(from.successors_);
  lanelet_types_.MergeFrom(from.lanelet_types_);
  user_one_way_.MergeFrom(from.user_one_way_);
  user_bidirectional_.MergeFrom(from.user_bidirectional_);
  traffic_sign_refs_.MergeFrom(from.traffic_sign_refs_);
  traffic_light_refs_.MergeFrom(from.traffic_light_refs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_bound()->::commonroad::Bound::MergeFrom(from.left_bound());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_bound()->::commonroad::Bound::MergeFrom(from.right_bound());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stop_line()->::commonroad::StopLine::MergeFrom(from.stop_line());
    }
    if (cached_has_bits & 0x00000008u) {
      lanelet_id_ = from.lanelet_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      adjacent_left_ = from.adjacent_left_;
    }
    if (cached_has_bits & 0x00000020u) {
      adjacent_right_ = from.adjacent_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      adjacent_left_dir_ = from.adjacent_left_dir_;
    }
    if (cached_has_bits & 0x00000080u) {
      adjacent_right_dir_ = from.adjacent_right_dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lanelet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Lanelet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lanelet::CopyFrom(const Lanelet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Lanelet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lanelet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_left_bound()) {
    if (!this->left_bound_->IsInitialized()) return false;
  }
  if (has_right_bound()) {
    if (!this->right_bound_->IsInitialized()) return false;
  }
  if (has_stop_line()) {
    if (!this->stop_line_->IsInitialized()) return false;
  }
  return true;
}

void Lanelet::Swap(Lanelet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lanelet::InternalSwap(Lanelet* other) {
  using std::swap;
  predecessors_.InternalSwap(&other->predecessors_);
  successors_.InternalSwap(&other->successors_);
  lanelet_types_.InternalSwap(&other->lanelet_types_);
  user_one_way_.InternalSwap(&other->user_one_way_);
  user_bidirectional_.InternalSwap(&other->user_bidirectional_);
  traffic_sign_refs_.InternalSwap(&other->traffic_sign_refs_);
  traffic_light_refs_.InternalSwap(&other->traffic_light_refs_);
  swap(left_bound_, other->left_bound_);
  swap(right_bound_, other->right_bound_);
  swap(stop_line_, other->stop_line_);
  swap(lanelet_id_, other->lanelet_id_);
  swap(adjacent_left_, other->adjacent_left_);
  swap(adjacent_right_, other->adjacent_right_);
  swap(adjacent_left_dir_, other->adjacent_left_dir_);
  swap(adjacent_right_dir_, other->adjacent_right_dir_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lanelet::GetMetadata() const {
  protobuf_lanelet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lanelet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::LineMarkingEnum* Arena::CreateMaybeMessage< ::commonroad::LineMarkingEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::LineMarkingEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::DrivingDirEnum* Arena::CreateMaybeMessage< ::commonroad::DrivingDirEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::DrivingDirEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::LaneletTypeEnum* Arena::CreateMaybeMessage< ::commonroad::LaneletTypeEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::LaneletTypeEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::RoadUserEnum* Arena::CreateMaybeMessage< ::commonroad::RoadUserEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::RoadUserEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Bound* Arena::CreateMaybeMessage< ::commonroad::Bound >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Bound >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::StopLine* Arena::CreateMaybeMessage< ::commonroad::StopLine >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::StopLine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Lanelet* Arena::CreateMaybeMessage< ::commonroad::Lanelet >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Lanelet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
