// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_location_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_location_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoTransformation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_location_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Environment;
}  // namespace protobuf_location_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeStamp;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class TimeOfDayEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeOfDayEnum>
      _instance;
} _TimeOfDayEnum_default_instance_;
class WeatherEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WeatherEnum>
      _instance;
} _WeatherEnum_default_instance_;
class UndergroundEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UndergroundEnum>
      _instance;
} _UndergroundEnum_default_instance_;
class GeoTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoTransformation>
      _instance;
} _GeoTransformation_default_instance_;
class EnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment>
      _instance;
} _Environment_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location>
      _instance;
} _Location_default_instance_;
}  // namespace commonroad
namespace protobuf_location_2eproto {
static void InitDefaultsTimeOfDayEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TimeOfDayEnum_default_instance_;
    new (ptr) ::commonroad::TimeOfDayEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TimeOfDayEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeOfDayEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeOfDayEnum}, {}};

static void InitDefaultsWeatherEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_WeatherEnum_default_instance_;
    new (ptr) ::commonroad::WeatherEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::WeatherEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WeatherEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWeatherEnum}, {}};

static void InitDefaultsUndergroundEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_UndergroundEnum_default_instance_;
    new (ptr) ::commonroad::UndergroundEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::UndergroundEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UndergroundEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUndergroundEnum}, {}};

static void InitDefaultsGeoTransformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_GeoTransformation_default_instance_;
    new (ptr) ::commonroad::GeoTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::GeoTransformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoTransformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoTransformation}, {}};

static void InitDefaultsEnvironment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Environment_default_instance_;
    new (ptr) ::commonroad::Environment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Environment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Environment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironment}, {
      &protobuf_util_2eproto::scc_info_TimeStamp.base,}};

static void InitDefaultsLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Location_default_instance_;
    new (ptr) ::commonroad::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Location =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocation}, {
      &protobuf_location_2eproto::scc_info_GeoTransformation.base,
      &protobuf_location_2eproto::scc_info_Environment.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TimeOfDayEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WeatherEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UndergroundEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoTransformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Location.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeOfDayEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeOfDayEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::WeatherEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::WeatherEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::UndergroundEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::UndergroundEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, geo_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, x_translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, y_translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, z_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GeoTransformation, scaling_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, weather_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Environment, underground_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, geo_name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, gps_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, gps_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, geo_transformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Location, environment_),
  4,
  2,
  3,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::commonroad::TimeOfDayEnum)},
  { 5, 10, sizeof(::commonroad::WeatherEnum)},
  { 10, 15, sizeof(::commonroad::UndergroundEnum)},
  { 15, 25, sizeof(::commonroad::GeoTransformation)},
  { 30, 39, sizeof(::commonroad::Environment)},
  { 43, 53, sizeof(::commonroad::Location)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TimeOfDayEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_WeatherEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_UndergroundEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_GeoTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Environment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Location_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "location.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016location.proto\022\ncommonroad\032\nutil.proto"
      "\"=\n\rTimeOfDayEnum\",\n\tTimeOfDay\022\t\n\005NIGHT\020"
      "\000\022\007\n\003DAY\020\001\022\013\n\007UNKNOWN\020\002\"l\n\013WeatherEnum\"]"
      "\n\007Weather\022\t\n\005SUNNY\020\000\022\016\n\nLIGHT_RAIN\020\001\022\r\n\t"
      "HEAVY_AIN\020\002\022\007\n\003FOG\020\003\022\010\n\004SNOW\020\004\022\010\n\004HAIL\020\005"
      "\022\013\n\007UNKNOWN\020\006\"l\n\017UndergroundEnum\"Y\n\013Unde"
      "rground\022\007\n\003WET\020\000\022\t\n\005CLEAN\020\001\022\t\n\005DIRTY\020\002\022\013"
      "\n\007DAMAGED\020\003\022\010\n\004SNOW\020\004\022\007\n\003ICE\020\005\022\013\n\007UNKNOW"
      "N\020\006\"}\n\021GeoTransformation\022\025\n\rgeo_referenc"
      "e\030\001 \001(\t\022\025\n\rx_translation\030\002 \001(\001\022\025\n\ry_tran"
      "slation\030\003 \001(\001\022\022\n\nz_rotation\030\004 \001(\001\022\017\n\007sca"
      "ling\030\005 \001(\001\"\334\001\n\013Environment\022#\n\004time\030\001 \001(\013"
      "2\025.commonroad.TimeStamp\0228\n\013time_of_day\030\002"
      " \001(\0162#.commonroad.TimeOfDayEnum.TimeOfDa"
      "y\0220\n\007weather\030\003 \001(\0162\037.commonroad.WeatherE"
      "num.Weather\022<\n\013underground\030\004 \001(\0162\'.commo"
      "nroad.UndergroundEnum.Underground\"\265\001\n\010Lo"
      "cation\022\023\n\013geo_name_id\030\001 \002(\005\022\024\n\014gps_latit"
      "ude\030\002 \002(\001\022\025\n\rgps_longitude\030\003 \002(\001\0229\n\022geo_"
      "transformation\030\004 \001(\0132\035.commonroad.GeoTra"
      "nsformation\022,\n\013environment\030\005 \001(\0132\027.commo"
      "nroad.Environment"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 857);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "location.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_location_2eproto
namespace commonroad {
const ::google::protobuf::EnumDescriptor* TimeOfDayEnum_TimeOfDay_descriptor() {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_location_2eproto::file_level_enum_descriptors[0];
}
bool TimeOfDayEnum_TimeOfDay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeOfDayEnum_TimeOfDay TimeOfDayEnum::NIGHT;
const TimeOfDayEnum_TimeOfDay TimeOfDayEnum::DAY;
const TimeOfDayEnum_TimeOfDay TimeOfDayEnum::UNKNOWN;
const TimeOfDayEnum_TimeOfDay TimeOfDayEnum::TimeOfDay_MIN;
const TimeOfDayEnum_TimeOfDay TimeOfDayEnum::TimeOfDay_MAX;
const int TimeOfDayEnum::TimeOfDay_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WeatherEnum_Weather_descriptor() {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_location_2eproto::file_level_enum_descriptors[1];
}
bool WeatherEnum_Weather_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WeatherEnum_Weather WeatherEnum::SUNNY;
const WeatherEnum_Weather WeatherEnum::LIGHT_RAIN;
const WeatherEnum_Weather WeatherEnum::HEAVY_AIN;
const WeatherEnum_Weather WeatherEnum::FOG;
const WeatherEnum_Weather WeatherEnum::SNOW;
const WeatherEnum_Weather WeatherEnum::HAIL;
const WeatherEnum_Weather WeatherEnum::UNKNOWN;
const WeatherEnum_Weather WeatherEnum::Weather_MIN;
const WeatherEnum_Weather WeatherEnum::Weather_MAX;
const int WeatherEnum::Weather_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UndergroundEnum_Underground_descriptor() {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_location_2eproto::file_level_enum_descriptors[2];
}
bool UndergroundEnum_Underground_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UndergroundEnum_Underground UndergroundEnum::WET;
const UndergroundEnum_Underground UndergroundEnum::CLEAN;
const UndergroundEnum_Underground UndergroundEnum::DIRTY;
const UndergroundEnum_Underground UndergroundEnum::DAMAGED;
const UndergroundEnum_Underground UndergroundEnum::SNOW;
const UndergroundEnum_Underground UndergroundEnum::ICE;
const UndergroundEnum_Underground UndergroundEnum::UNKNOWN;
const UndergroundEnum_Underground UndergroundEnum::Underground_MIN;
const UndergroundEnum_Underground UndergroundEnum::Underground_MAX;
const int UndergroundEnum::Underground_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TimeOfDayEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeOfDayEnum::TimeOfDayEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_TimeOfDayEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TimeOfDayEnum)
}
TimeOfDayEnum::TimeOfDayEnum(const TimeOfDayEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TimeOfDayEnum)
}

void TimeOfDayEnum::SharedCtor() {
}

TimeOfDayEnum::~TimeOfDayEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TimeOfDayEnum)
  SharedDtor();
}

void TimeOfDayEnum::SharedDtor() {
}

void TimeOfDayEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeOfDayEnum::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeOfDayEnum& TimeOfDayEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_TimeOfDayEnum.base);
  return *internal_default_instance();
}


void TimeOfDayEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TimeOfDayEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeOfDayEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TimeOfDayEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TimeOfDayEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TimeOfDayEnum)
  return false;
#undef DO_
}

void TimeOfDayEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TimeOfDayEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TimeOfDayEnum)
}

::google::protobuf::uint8* TimeOfDayEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TimeOfDayEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TimeOfDayEnum)
  return target;
}

size_t TimeOfDayEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TimeOfDayEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeOfDayEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TimeOfDayEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeOfDayEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeOfDayEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TimeOfDayEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TimeOfDayEnum)
    MergeFrom(*source);
  }
}

void TimeOfDayEnum::MergeFrom(const TimeOfDayEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TimeOfDayEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TimeOfDayEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TimeOfDayEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeOfDayEnum::CopyFrom(const TimeOfDayEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TimeOfDayEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeOfDayEnum::IsInitialized() const {
  return true;
}

void TimeOfDayEnum::Swap(TimeOfDayEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeOfDayEnum::InternalSwap(TimeOfDayEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeOfDayEnum::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WeatherEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherEnum::WeatherEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_WeatherEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.WeatherEnum)
}
WeatherEnum::WeatherEnum(const WeatherEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.WeatherEnum)
}

void WeatherEnum::SharedCtor() {
}

WeatherEnum::~WeatherEnum() {
  // @@protoc_insertion_point(destructor:commonroad.WeatherEnum)
  SharedDtor();
}

void WeatherEnum::SharedDtor() {
}

void WeatherEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WeatherEnum::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherEnum& WeatherEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_WeatherEnum.base);
  return *internal_default_instance();
}


void WeatherEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.WeatherEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeatherEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.WeatherEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.WeatherEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.WeatherEnum)
  return false;
#undef DO_
}

void WeatherEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.WeatherEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.WeatherEnum)
}

::google::protobuf::uint8* WeatherEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.WeatherEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.WeatherEnum)
  return target;
}

size_t WeatherEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.WeatherEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeatherEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.WeatherEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.WeatherEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.WeatherEnum)
    MergeFrom(*source);
  }
}

void WeatherEnum::MergeFrom(const WeatherEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.WeatherEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WeatherEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.WeatherEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherEnum::CopyFrom(const WeatherEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.WeatherEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherEnum::IsInitialized() const {
  return true;
}

void WeatherEnum::Swap(WeatherEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherEnum::InternalSwap(WeatherEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WeatherEnum::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UndergroundEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndergroundEnum::UndergroundEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_UndergroundEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.UndergroundEnum)
}
UndergroundEnum::UndergroundEnum(const UndergroundEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.UndergroundEnum)
}

void UndergroundEnum::SharedCtor() {
}

UndergroundEnum::~UndergroundEnum() {
  // @@protoc_insertion_point(destructor:commonroad.UndergroundEnum)
  SharedDtor();
}

void UndergroundEnum::SharedDtor() {
}

void UndergroundEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UndergroundEnum::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UndergroundEnum& UndergroundEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_UndergroundEnum.base);
  return *internal_default_instance();
}


void UndergroundEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.UndergroundEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UndergroundEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.UndergroundEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.UndergroundEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.UndergroundEnum)
  return false;
#undef DO_
}

void UndergroundEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.UndergroundEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.UndergroundEnum)
}

::google::protobuf::uint8* UndergroundEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.UndergroundEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.UndergroundEnum)
  return target;
}

size_t UndergroundEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.UndergroundEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndergroundEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.UndergroundEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const UndergroundEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UndergroundEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.UndergroundEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.UndergroundEnum)
    MergeFrom(*source);
  }
}

void UndergroundEnum::MergeFrom(const UndergroundEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.UndergroundEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UndergroundEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.UndergroundEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndergroundEnum::CopyFrom(const UndergroundEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.UndergroundEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndergroundEnum::IsInitialized() const {
  return true;
}

void UndergroundEnum::Swap(UndergroundEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UndergroundEnum::InternalSwap(UndergroundEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UndergroundEnum::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeoTransformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoTransformation::kGeoReferenceFieldNumber;
const int GeoTransformation::kXTranslationFieldNumber;
const int GeoTransformation::kYTranslationFieldNumber;
const int GeoTransformation::kZRotationFieldNumber;
const int GeoTransformation::kScalingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoTransformation::GeoTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_GeoTransformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.GeoTransformation)
}
GeoTransformation::GeoTransformation(const GeoTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geo_reference()) {
    geo_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_reference_);
  }
  ::memcpy(&x_translation_, &from.x_translation_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaling_) -
    reinterpret_cast<char*>(&x_translation_)) + sizeof(scaling_));
  // @@protoc_insertion_point(copy_constructor:commonroad.GeoTransformation)
}

void GeoTransformation::SharedCtor() {
  geo_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_) -
      reinterpret_cast<char*>(&x_translation_)) + sizeof(scaling_));
}

GeoTransformation::~GeoTransformation() {
  // @@protoc_insertion_point(destructor:commonroad.GeoTransformation)
  SharedDtor();
}

void GeoTransformation::SharedDtor() {
  geo_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeoTransformation::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoTransformation& GeoTransformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_GeoTransformation.base);
  return *internal_default_instance();
}


void GeoTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.GeoTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    geo_reference_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&x_translation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaling_) -
        reinterpret_cast<char*>(&x_translation_)) + sizeof(scaling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.GeoTransformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string geo_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_reference()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geo_reference().data(), static_cast<int>(this->geo_reference().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.GeoTransformation.geo_reference");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_x_translation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_translation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_translation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_y_translation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_translation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z_rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_z_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double scaling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.GeoTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.GeoTransformation)
  return false;
#undef DO_
}

void GeoTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.GeoTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string geo_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo_reference().data(), static_cast<int>(this->geo_reference().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.GeoTransformation.geo_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geo_reference(), output);
  }

  // optional double x_translation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x_translation(), output);
  }

  // optional double y_translation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y_translation(), output);
  }

  // optional double z_rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z_rotation(), output);
  }

  // optional double scaling = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->scaling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.GeoTransformation)
}

::google::protobuf::uint8* GeoTransformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.GeoTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string geo_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo_reference().data(), static_cast<int>(this->geo_reference().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.GeoTransformation.geo_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geo_reference(), target);
  }

  // optional double x_translation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x_translation(), target);
  }

  // optional double y_translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y_translation(), target);
  }

  // optional double z_rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z_rotation(), target);
  }

  // optional double scaling = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->scaling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.GeoTransformation)
  return target;
}

size_t GeoTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.GeoTransformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string geo_reference = 1;
    if (has_geo_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_reference());
    }

    // optional double x_translation = 2;
    if (has_x_translation()) {
      total_size += 1 + 8;
    }

    // optional double y_translation = 3;
    if (has_y_translation()) {
      total_size += 1 + 8;
    }

    // optional double z_rotation = 4;
    if (has_z_rotation()) {
      total_size += 1 + 8;
    }

    // optional double scaling = 5;
    if (has_scaling()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.GeoTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoTransformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoTransformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.GeoTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.GeoTransformation)
    MergeFrom(*source);
  }
}

void GeoTransformation::MergeFrom(const GeoTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.GeoTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_geo_reference();
      geo_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_reference_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_translation_ = from.x_translation_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_translation_ = from.y_translation_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_rotation_ = from.z_rotation_;
    }
    if (cached_has_bits & 0x00000010u) {
      scaling_ = from.scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeoTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.GeoTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTransformation::CopyFrom(const GeoTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.GeoTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTransformation::IsInitialized() const {
  return true;
}

void GeoTransformation::Swap(GeoTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoTransformation::InternalSwap(GeoTransformation* other) {
  using std::swap;
  geo_reference_.Swap(&other->geo_reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_translation_, other->x_translation_);
  swap(y_translation_, other->y_translation_);
  swap(z_rotation_, other->z_rotation_);
  swap(scaling_, other->scaling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeoTransformation::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Environment::InitAsDefaultInstance() {
  ::commonroad::_Environment_default_instance_._instance.get_mutable()->time_ = const_cast< ::commonroad::TimeStamp*>(
      ::commonroad::TimeStamp::internal_default_instance());
}
void Environment::clear_time() {
  if (time_ != NULL) time_->Clear();
  clear_has_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment::kTimeFieldNumber;
const int Environment::kTimeOfDayFieldNumber;
const int Environment::kWeatherFieldNumber;
const int Environment::kUndergroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment::Environment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_Environment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Environment)
}
Environment::Environment(const Environment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::commonroad::TimeStamp(*from.time_);
  } else {
    time_ = NULL;
  }
  ::memcpy(&time_of_day_, &from.time_of_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&underground_) -
    reinterpret_cast<char*>(&time_of_day_)) + sizeof(underground_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Environment)
}

void Environment::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underground_) -
      reinterpret_cast<char*>(&time_)) + sizeof(underground_));
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:commonroad.Environment)
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Environment& Environment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_Environment.base);
  return *internal_default_instance();
}


void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != NULL);
    time_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&time_of_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&underground_) -
        reinterpret_cast<char*>(&time_of_day_)) + sizeof(underground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Environment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonroad.TimeStamp time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TimeOfDayEnum.TimeOfDay time_of_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TimeOfDayEnum_TimeOfDay_IsValid(value)) {
            set_time_of_day(static_cast< ::commonroad::TimeOfDayEnum_TimeOfDay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.WeatherEnum.Weather weather = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::WeatherEnum_Weather_IsValid(value)) {
            set_weather(static_cast< ::commonroad::WeatherEnum_Weather >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.UndergroundEnum.Underground underground = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::UndergroundEnum_Underground_IsValid(value)) {
            set_underground(static_cast< ::commonroad::UndergroundEnum_Underground >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Environment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Environment)
  return false;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.TimeStamp time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time(), output);
  }

  // optional .commonroad.TimeOfDayEnum.TimeOfDay time_of_day = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->time_of_day(), output);
  }

  // optional .commonroad.WeatherEnum.Weather weather = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->weather(), output);
  }

  // optional .commonroad.UndergroundEnum.Underground underground = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->underground(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Environment)
}

::google::protobuf::uint8* Environment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.TimeStamp time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time(), deterministic, target);
  }

  // optional .commonroad.TimeOfDayEnum.TimeOfDay time_of_day = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->time_of_day(), target);
  }

  // optional .commonroad.WeatherEnum.Weather weather = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->weather(), target);
  }

  // optional .commonroad.UndergroundEnum.Underground underground = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->underground(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Environment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .commonroad.TimeStamp time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional .commonroad.TimeOfDayEnum.TimeOfDay time_of_day = 2;
    if (has_time_of_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_of_day());
    }

    // optional .commonroad.WeatherEnum.Weather weather = 3;
    if (has_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weather());
    }

    // optional .commonroad.UndergroundEnum.Underground underground = 4;
    if (has_underground()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underground());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Environment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time()->::commonroad::TimeStamp::MergeFrom(from.time());
    }
    if (cached_has_bits & 0x00000002u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000004u) {
      weather_ = from.weather_;
    }
    if (cached_has_bits & 0x00000008u) {
      underground_ = from.underground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::Swap(Environment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment::InternalSwap(Environment* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(time_of_day_, other->time_of_day_);
  swap(weather_, other->weather_);
  swap(underground_, other->underground_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::commonroad::_Location_default_instance_._instance.get_mutable()->geo_transformation_ = const_cast< ::commonroad::GeoTransformation*>(
      ::commonroad::GeoTransformation::internal_default_instance());
  ::commonroad::_Location_default_instance_._instance.get_mutable()->environment_ = const_cast< ::commonroad::Environment*>(
      ::commonroad::Environment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kGeoNameIdFieldNumber;
const int Location::kGpsLatitudeFieldNumber;
const int Location::kGpsLongitudeFieldNumber;
const int Location::kGeoTransformationFieldNumber;
const int Location::kEnvironmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_location_2eproto::scc_info_Location.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geo_transformation()) {
    geo_transformation_ = new ::commonroad::GeoTransformation(*from.geo_transformation_);
  } else {
    geo_transformation_ = NULL;
  }
  if (from.has_environment()) {
    environment_ = new ::commonroad::Environment(*from.environment_);
  } else {
    environment_ = NULL;
  }
  ::memcpy(&gps_latitude_, &from.gps_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&geo_name_id_) -
    reinterpret_cast<char*>(&gps_latitude_)) + sizeof(geo_name_id_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Location)
}

void Location::SharedCtor() {
  ::memset(&geo_transformation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_name_id_) -
      reinterpret_cast<char*>(&geo_transformation_)) + sizeof(geo_name_id_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:commonroad.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) delete geo_transformation_;
  if (this != internal_default_instance()) delete environment_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  ::protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_location_2eproto::scc_info_Location.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geo_transformation_ != NULL);
      geo_transformation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(environment_ != NULL);
      environment_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&gps_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&geo_name_id_) -
        reinterpret_cast<char*>(&gps_latitude_)) + sizeof(geo_name_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 geo_name_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo_name_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double gps_latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_gps_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double gps_longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_gps_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.GeoTransformation geo_transformation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geo_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Environment environment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 geo_name_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->geo_name_id(), output);
  }

  // required double gps_latitude = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gps_latitude(), output);
  }

  // required double gps_longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gps_longitude(), output);
  }

  // optional .commonroad.GeoTransformation geo_transformation = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_geo_transformation(), output);
  }

  // optional .commonroad.Environment environment = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_environment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 geo_name_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->geo_name_id(), target);
  }

  // required double gps_latitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gps_latitude(), target);
  }

  // required double gps_longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gps_longitude(), target);
  }

  // optional .commonroad.GeoTransformation geo_transformation = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_geo_transformation(), deterministic, target);
  }

  // optional .commonroad.Environment environment = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_environment(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Location)
  return target;
}

size_t Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.Location)
  size_t total_size = 0;

  if (has_gps_latitude()) {
    // required double gps_latitude = 2;
    total_size += 1 + 8;
  }

  if (has_gps_longitude()) {
    // required double gps_longitude = 3;
    total_size += 1 + 8;
  }

  if (has_geo_name_id()) {
    // required int32 geo_name_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->geo_name_id());
  }

  return total_size;
}
size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required double gps_latitude = 2;
    total_size += 1 + 8;

    // required double gps_longitude = 3;
    total_size += 1 + 8;

    // required int32 geo_name_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->geo_name_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .commonroad.GeoTransformation geo_transformation = 4;
    if (has_geo_transformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geo_transformation_);
    }

    // optional .commonroad.Environment environment = 5;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *environment_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_geo_transformation()->::commonroad::GeoTransformation::MergeFrom(from.geo_transformation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_environment()->::commonroad::Environment::MergeFrom(from.environment());
    }
    if (cached_has_bits & 0x00000004u) {
      gps_latitude_ = from.gps_latitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      gps_longitude_ = from.gps_longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      geo_name_id_ = from.geo_name_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  swap(geo_transformation_, other->geo_transformation_);
  swap(environment_, other->environment_);
  swap(gps_latitude_, other->gps_latitude_);
  swap(gps_longitude_, other->gps_longitude_);
  swap(geo_name_id_, other->geo_name_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_location_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TimeOfDayEnum* Arena::CreateMaybeMessage< ::commonroad::TimeOfDayEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TimeOfDayEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::WeatherEnum* Arena::CreateMaybeMessage< ::commonroad::WeatherEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::WeatherEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::UndergroundEnum* Arena::CreateMaybeMessage< ::commonroad::UndergroundEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::UndergroundEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::GeoTransformation* Arena::CreateMaybeMessage< ::commonroad::GeoTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::GeoTransformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Environment* Arena::CreateMaybeMessage< ::commonroad::Environment >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Environment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Location* Arena::CreateMaybeMessage< ::commonroad::Location >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Location >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
