// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_obstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OccupancySet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Occupancy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_State;
}  // namespace protobuf_obstacle_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FloatExactOrInterval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IntegerExactOrInterval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Shape;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class ObstacleTypeEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleTypeEnum>
      _instance;
} _ObstacleTypeEnum_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
  const ::commonroad::Point* point_;
  const ::commonroad::Shape* shape_;
} _State_default_instance_;
class SignalStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalState>
      _instance;
} _SignalState_default_instance_;
class OccupancyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Occupancy>
      _instance;
} _Occupancy_default_instance_;
class OccupancySetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OccupancySet>
      _instance;
} _OccupancySet_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
      _instance;
} _Trajectory_default_instance_;
class TrajectoryPredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPrediction>
      _instance;
} _TrajectoryPrediction_default_instance_;
class SetBasedPredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetBasedPrediction>
      _instance;
} _SetBasedPrediction_default_instance_;
}  // namespace commonroad
namespace protobuf_obstacle_2eproto {
static void InitDefaultsObstacleTypeEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_ObstacleTypeEnum_default_instance_;
    new (ptr) ::commonroad::ObstacleTypeEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::ObstacleTypeEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleTypeEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacleTypeEnum}, {}};

static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_State_default_instance_;
    new (ptr) ::commonroad::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsState}, {
      &protobuf_util_2eproto::scc_info_Point.base,
      &protobuf_util_2eproto::scc_info_Shape.base,
      &protobuf_util_2eproto::scc_info_FloatExactOrInterval.base,
      &protobuf_util_2eproto::scc_info_IntegerExactOrInterval.base,}};

static void InitDefaultsSignalState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_SignalState_default_instance_;
    new (ptr) ::commonroad::SignalState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::SignalState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalState}, {
      &protobuf_util_2eproto::scc_info_IntegerExactOrInterval.base,}};

static void InitDefaultsOccupancy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Occupancy_default_instance_;
    new (ptr) ::commonroad::Occupancy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Occupancy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Occupancy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOccupancy}, {
      &protobuf_util_2eproto::scc_info_IntegerExactOrInterval.base,
      &protobuf_util_2eproto::scc_info_Shape.base,}};

static void InitDefaultsOccupancySet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_OccupancySet_default_instance_;
    new (ptr) ::commonroad::OccupancySet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::OccupancySet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OccupancySet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOccupancySet}, {
      &protobuf_obstacle_2eproto::scc_info_Occupancy.base,}};

static void InitDefaultsTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Trajectory_default_instance_;
    new (ptr) ::commonroad::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Trajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectory}, {
      &protobuf_obstacle_2eproto::scc_info_State.base,}};

static void InitDefaultsTrajectoryPrediction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrajectoryPrediction_default_instance_;
    new (ptr) ::commonroad::TrajectoryPrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrajectoryPrediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPrediction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrajectoryPrediction}, {
      &protobuf_obstacle_2eproto::scc_info_Trajectory.base,
      &protobuf_util_2eproto::scc_info_Shape.base,}};

static void InitDefaultsSetBasedPrediction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_SetBasedPrediction_default_instance_;
    new (ptr) ::commonroad::SetBasedPrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::SetBasedPrediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetBasedPrediction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetBasedPrediction}, {
      &protobuf_obstacle_2eproto::scc_info_OccupancySet.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleTypeEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Occupancy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OccupancySet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryPrediction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetBasedPrediction.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ObstacleTypeEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ObstacleTypeEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::commonroad::StateDefaultTypeInternal, point_),
  offsetof(::commonroad::StateDefaultTypeInternal, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, steering_angle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, slip_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, pitch_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, pitch_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_angle_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_rate_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_y_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, position_z_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_z_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_angle_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, roll_rate_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_y_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, position_z_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, velocity_z_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, left_front_wheel_angular_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, right_front_wheel_angular_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, left_rear_wheel_angular_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, right_rear_wheel_angular_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, delta_y_f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, delta_y_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, acceleration_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, time_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::State, position_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, time_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, indicator_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, indicator_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, braking_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, hazard_warning_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SignalState, flashing_blue_lights_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Occupancy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Occupancy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Occupancy, time_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Occupancy, shape_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::OccupancySet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::OccupancySet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::OccupancySet, occupancies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Trajectory, initial_time_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Trajectory, states_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrajectoryPrediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrajectoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrajectoryPrediction, trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrajectoryPrediction, shape_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SetBasedPrediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SetBasedPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SetBasedPrediction, initial_time_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::SetBasedPrediction, occupancy_set_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::commonroad::ObstacleTypeEnum)},
  { 5, 46, sizeof(::commonroad::State)},
  { 81, 93, sizeof(::commonroad::SignalState)},
  { 100, 107, sizeof(::commonroad::Occupancy)},
  { 109, 115, sizeof(::commonroad::OccupancySet)},
  { 116, 123, sizeof(::commonroad::Trajectory)},
  { 125, 132, sizeof(::commonroad::TrajectoryPrediction)},
  { 134, 141, sizeof(::commonroad::SetBasedPrediction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_ObstacleTypeEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_SignalState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Occupancy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_OccupancySet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrajectoryPrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_SetBasedPrediction_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "obstacle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016obstacle.proto\022\ncommonroad\032\nutil.proto"
      "\"\217\002\n\020ObstacleTypeEnum\"\372\001\n\014ObstacleType\022\013"
      "\n\007UNKNOWN\020\000\022\007\n\003CAR\020\001\022\t\n\005TRUCK\020\002\022\007\n\003BUS\020\003"
      "\022\013\n\007BICYCLE\020\004\022\016\n\nPEDESTRIAN\020\005\022\024\n\020PRIORIT"
      "Y_VEHICLE\020\006\022\022\n\016PARKED_VEHICLE\020\007\022\025\n\021CONST"
      "RUCTION_ZONE\020\010\022\t\n\005TRAIN\020\t\022\021\n\rROAD_BOUNDA"
      "RY\020\n\022\016\n\nMOTORCYCLE\020\013\022\010\n\004TAXI\020\014\022\014\n\010BUILDI"
      "NG\020\r\022\n\n\006PILLAR\020\016\022\020\n\014MEDIAN_STRIP\020\017\"\340\017\n\005S"
      "tate\022\"\n\005point\030\001 \001(\0132\021.commonroad.PointH\000"
      "\022\"\n\005shape\030\002 \001(\0132\021.commonroad.ShapeH\000\0225\n\013"
      "orientation\030\003 \001(\0132 .commonroad.FloatExac"
      "tOrInterval\0222\n\010velocity\030\004 \001(\0132 .commonro"
      "ad.FloatExactOrInterval\0228\n\016steering_angl"
      "e\030\005 \001(\0132 .commonroad.FloatExactOrInterva"
      "l\022>\n\024steering_angle_speed\030\006 \001(\0132 .common"
      "road.FloatExactOrInterval\0222\n\010yaw_rate\030\007 "
      "\001(\0132 .commonroad.FloatExactOrInterval\0224\n"
      "\nslip_angle\030\010 \001(\0132 .commonroad.FloatExac"
      "tOrInterval\0224\n\nroll_angle\030\t \001(\0132 .common"
      "road.FloatExactOrInterval\0223\n\troll_rate\030\n"
      " \001(\0132 .commonroad.FloatExactOrInterval\0225"
      "\n\013pitch_angle\030\013 \001(\0132 .commonroad.FloatEx"
      "actOrInterval\0224\n\npitch_rate\030\014 \001(\0132 .comm"
      "onroad.FloatExactOrInterval\0224\n\nvelocity_"
      "y\030\r \001(\0132 .commonroad.FloatExactOrInterva"
      "l\0224\n\nposition_z\030\016 \001(\0132 .commonroad.Float"
      "ExactOrInterval\0224\n\nvelocity_z\030\017 \001(\0132 .co"
      "mmonroad.FloatExactOrInterval\022:\n\020roll_an"
      "gle_front\030\020 \001(\0132 .commonroad.FloatExactO"
      "rInterval\0229\n\017roll_rate_front\030\021 \001(\0132 .com"
      "monroad.FloatExactOrInterval\022:\n\020velocity"
      "_y_front\030\022 \001(\0132 .commonroad.FloatExactOr"
      "Interval\022:\n\020position_z_front\030\023 \001(\0132 .com"
      "monroad.FloatExactOrInterval\022:\n\020velocity"
      "_z_front\030\024 \001(\0132 .commonroad.FloatExactOr"
      "Interval\0229\n\017roll_angle_rear\030\025 \001(\0132 .comm"
      "onroad.FloatExactOrInterval\0228\n\016roll_rate"
      "_rear\030\026 \001(\0132 .commonroad.FloatExactOrInt"
      "erval\0229\n\017velocity_y_rear\030\027 \001(\0132 .commonr"
      "oad.FloatExactOrInterval\0229\n\017position_z_r"
      "ear\030\030 \001(\0132 .commonroad.FloatExactOrInter"
      "val\0229\n\017velocity_z_rear\030\031 \001(\0132 .commonroa"
      "d.FloatExactOrInterval\022H\n\036left_front_whe"
      "el_angular_speed\030\032 \001(\0132 .commonroad.Floa"
      "tExactOrInterval\022I\n\037right_front_wheel_an"
      "gular_speed\030\033 \001(\0132 .commonroad.FloatExac"
      "tOrInterval\022G\n\035left_rear_wheel_angular_s"
      "peed\030\034 \001(\0132 .commonroad.FloatExactOrInte"
      "rval\022H\n\036right_rear_wheel_angular_speed\030\035"
      " \001(\0132 .commonroad.FloatExactOrInterval\0223"
      "\n\tdelta_y_f\030\036 \001(\0132 .commonroad.FloatExac"
      "tOrInterval\0223\n\tdelta_y_r\030\037 \001(\0132 .commonr"
      "oad.FloatExactOrInterval\0226\n\014acceleration"
      "\030  \001(\0132 .commonroad.FloatExactOrInterval"
      "\0228\n\016acceleration_y\030! \001(\0132 .commonroad.Fl"
      "oatExactOrInterval\022.\n\004jerk\030\" \001(\0132 .commo"
      "nroad.FloatExactOrInterval\0225\n\ttime_step\030"
      "# \001(\0132\".commonroad.IntegerExactOrInterva"
      "lB\n\n\010position\"\330\001\n\013SignalState\0225\n\ttime_st"
      "ep\030\001 \001(\0132\".commonroad.IntegerExactOrInte"
      "rval\022\014\n\004horn\030\002 \001(\010\022\026\n\016indicator_left\030\003 \001"
      "(\010\022\027\n\017indicator_right\030\004 \001(\010\022\026\n\016braking_l"
      "ights\030\005 \001(\010\022\035\n\025hazard_warning_lights\030\006 \001"
      "(\010\022\034\n\024flashing_blue_lights\030\007 \001(\010\"d\n\tOccu"
      "pancy\0225\n\ttime_step\030\001 \002(\0132\".commonroad.In"
      "tegerExactOrInterval\022 \n\005shape\030\002 \002(\0132\021.co"
      "mmonroad.Shape\":\n\014OccupancySet\022*\n\013occupa"
      "ncies\030\001 \003(\0132\025.commonroad.Occupancy\"J\n\nTr"
      "ajectory\022\031\n\021initial_time_step\030\001 \002(\r\022!\n\006s"
      "tates\030\002 \003(\0132\021.commonroad.State\"d\n\024Trajec"
      "toryPrediction\022*\n\ntrajectory\030\001 \002(\0132\026.com"
      "monroad.Trajectory\022 \n\005shape\030\002 \002(\0132\021.comm"
      "onroad.Shape\"`\n\022SetBasedPrediction\022\031\n\021in"
      "itial_time_step\030\001 \002(\r\022/\n\roccupancy_set\030\002"
      " \002(\0132\030.commonroad.OccupancySet"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2990);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "obstacle.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_obstacle_2eproto
namespace commonroad {
const ::google::protobuf::EnumDescriptor* ObstacleTypeEnum_ObstacleType_descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_enum_descriptors[0];
}
bool ObstacleTypeEnum_ObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::UNKNOWN;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::CAR;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::TRUCK;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::BUS;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::BICYCLE;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::PEDESTRIAN;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::PRIORITY_VEHICLE;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::PARKED_VEHICLE;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::CONSTRUCTION_ZONE;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::TRAIN;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::ROAD_BOUNDARY;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::MOTORCYCLE;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::TAXI;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::BUILDING;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::PILLAR;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::MEDIAN_STRIP;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::ObstacleType_MIN;
const ObstacleTypeEnum_ObstacleType ObstacleTypeEnum::ObstacleType_MAX;
const int ObstacleTypeEnum::ObstacleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ObstacleTypeEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleTypeEnum::ObstacleTypeEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_ObstacleTypeEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.ObstacleTypeEnum)
}
ObstacleTypeEnum::ObstacleTypeEnum(const ObstacleTypeEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.ObstacleTypeEnum)
}

void ObstacleTypeEnum::SharedCtor() {
}

ObstacleTypeEnum::~ObstacleTypeEnum() {
  // @@protoc_insertion_point(destructor:commonroad.ObstacleTypeEnum)
  SharedDtor();
}

void ObstacleTypeEnum::SharedDtor() {
}

void ObstacleTypeEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleTypeEnum::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleTypeEnum& ObstacleTypeEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_ObstacleTypeEnum.base);
  return *internal_default_instance();
}


void ObstacleTypeEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.ObstacleTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleTypeEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.ObstacleTypeEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.ObstacleTypeEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.ObstacleTypeEnum)
  return false;
#undef DO_
}

void ObstacleTypeEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.ObstacleTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.ObstacleTypeEnum)
}

::google::protobuf::uint8* ObstacleTypeEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.ObstacleTypeEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.ObstacleTypeEnum)
  return target;
}

size_t ObstacleTypeEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.ObstacleTypeEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleTypeEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.ObstacleTypeEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleTypeEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleTypeEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.ObstacleTypeEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.ObstacleTypeEnum)
    MergeFrom(*source);
  }
}

void ObstacleTypeEnum::MergeFrom(const ObstacleTypeEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.ObstacleTypeEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObstacleTypeEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.ObstacleTypeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleTypeEnum::CopyFrom(const ObstacleTypeEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.ObstacleTypeEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTypeEnum::IsInitialized() const {
  return true;
}

void ObstacleTypeEnum::Swap(ObstacleTypeEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleTypeEnum::InternalSwap(ObstacleTypeEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleTypeEnum::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::commonroad::_State_default_instance_.point_ = const_cast< ::commonroad::Point*>(
      ::commonroad::Point::internal_default_instance());
  ::commonroad::_State_default_instance_.shape_ = const_cast< ::commonroad::Shape*>(
      ::commonroad::Shape::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->steering_angle_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->steering_angle_speed_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->yaw_rate_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->slip_angle_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_angle_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_rate_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->pitch_angle_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->pitch_rate_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_y_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->position_z_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_z_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_angle_front_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_rate_front_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_y_front_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->position_z_front_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_z_front_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_angle_rear_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->roll_rate_rear_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_y_rear_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->position_z_rear_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->velocity_z_rear_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->left_front_wheel_angular_speed_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->right_front_wheel_angular_speed_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->left_rear_wheel_angular_speed_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->right_rear_wheel_angular_speed_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->delta_y_f_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->delta_y_r_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->acceleration_y_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->jerk_ = const_cast< ::commonroad::FloatExactOrInterval*>(
      ::commonroad::FloatExactOrInterval::internal_default_instance());
  ::commonroad::_State_default_instance_._instance.get_mutable()->time_step_ = const_cast< ::commonroad::IntegerExactOrInterval*>(
      ::commonroad::IntegerExactOrInterval::internal_default_instance());
}
void State::set_allocated_point(::commonroad::Point* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_position();
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    position_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.State.point)
}
void State::clear_point() {
  if (has_point()) {
    delete position_.point_;
    clear_has_position();
  }
}
void State::set_allocated_shape(::commonroad::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_position();
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
    position_.shape_ = shape;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.State.shape)
}
void State::clear_shape() {
  if (has_shape()) {
    delete position_.shape_;
    clear_has_position();
  }
}
void State::clear_orientation() {
  if (orientation_ != NULL) orientation_->Clear();
  clear_has_orientation();
}
void State::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
void State::clear_steering_angle() {
  if (steering_angle_ != NULL) steering_angle_->Clear();
  clear_has_steering_angle();
}
void State::clear_steering_angle_speed() {
  if (steering_angle_speed_ != NULL) steering_angle_speed_->Clear();
  clear_has_steering_angle_speed();
}
void State::clear_yaw_rate() {
  if (yaw_rate_ != NULL) yaw_rate_->Clear();
  clear_has_yaw_rate();
}
void State::clear_slip_angle() {
  if (slip_angle_ != NULL) slip_angle_->Clear();
  clear_has_slip_angle();
}
void State::clear_roll_angle() {
  if (roll_angle_ != NULL) roll_angle_->Clear();
  clear_has_roll_angle();
}
void State::clear_roll_rate() {
  if (roll_rate_ != NULL) roll_rate_->Clear();
  clear_has_roll_rate();
}
void State::clear_pitch_angle() {
  if (pitch_angle_ != NULL) pitch_angle_->Clear();
  clear_has_pitch_angle();
}
void State::clear_pitch_rate() {
  if (pitch_rate_ != NULL) pitch_rate_->Clear();
  clear_has_pitch_rate();
}
void State::clear_velocity_y() {
  if (velocity_y_ != NULL) velocity_y_->Clear();
  clear_has_velocity_y();
}
void State::clear_position_z() {
  if (position_z_ != NULL) position_z_->Clear();
  clear_has_position_z();
}
void State::clear_velocity_z() {
  if (velocity_z_ != NULL) velocity_z_->Clear();
  clear_has_velocity_z();
}
void State::clear_roll_angle_front() {
  if (roll_angle_front_ != NULL) roll_angle_front_->Clear();
  clear_has_roll_angle_front();
}
void State::clear_roll_rate_front() {
  if (roll_rate_front_ != NULL) roll_rate_front_->Clear();
  clear_has_roll_rate_front();
}
void State::clear_velocity_y_front() {
  if (velocity_y_front_ != NULL) velocity_y_front_->Clear();
  clear_has_velocity_y_front();
}
void State::clear_position_z_front() {
  if (position_z_front_ != NULL) position_z_front_->Clear();
  clear_has_position_z_front();
}
void State::clear_velocity_z_front() {
  if (velocity_z_front_ != NULL) velocity_z_front_->Clear();
  clear_has_velocity_z_front();
}
void State::clear_roll_angle_rear() {
  if (roll_angle_rear_ != NULL) roll_angle_rear_->Clear();
  clear_has_roll_angle_rear();
}
void State::clear_roll_rate_rear() {
  if (roll_rate_rear_ != NULL) roll_rate_rear_->Clear();
  clear_has_roll_rate_rear();
}
void State::clear_velocity_y_rear() {
  if (velocity_y_rear_ != NULL) velocity_y_rear_->Clear();
  clear_has_velocity_y_rear();
}
void State::clear_position_z_rear() {
  if (position_z_rear_ != NULL) position_z_rear_->Clear();
  clear_has_position_z_rear();
}
void State::clear_velocity_z_rear() {
  if (velocity_z_rear_ != NULL) velocity_z_rear_->Clear();
  clear_has_velocity_z_rear();
}
void State::clear_left_front_wheel_angular_speed() {
  if (left_front_wheel_angular_speed_ != NULL) left_front_wheel_angular_speed_->Clear();
  clear_has_left_front_wheel_angular_speed();
}
void State::clear_right_front_wheel_angular_speed() {
  if (right_front_wheel_angular_speed_ != NULL) right_front_wheel_angular_speed_->Clear();
  clear_has_right_front_wheel_angular_speed();
}
void State::clear_left_rear_wheel_angular_speed() {
  if (left_rear_wheel_angular_speed_ != NULL) left_rear_wheel_angular_speed_->Clear();
  clear_has_left_rear_wheel_angular_speed();
}
void State::clear_right_rear_wheel_angular_speed() {
  if (right_rear_wheel_angular_speed_ != NULL) right_rear_wheel_angular_speed_->Clear();
  clear_has_right_rear_wheel_angular_speed();
}
void State::clear_delta_y_f() {
  if (delta_y_f_ != NULL) delta_y_f_->Clear();
  clear_has_delta_y_f();
}
void State::clear_delta_y_r() {
  if (delta_y_r_ != NULL) delta_y_r_->Clear();
  clear_has_delta_y_r();
}
void State::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  clear_has_acceleration();
}
void State::clear_acceleration_y() {
  if (acceleration_y_ != NULL) acceleration_y_->Clear();
  clear_has_acceleration_y();
}
void State::clear_jerk() {
  if (jerk_ != NULL) jerk_->Clear();
  clear_has_jerk();
}
void State::clear_time_step() {
  if (time_step_ != NULL) time_step_->Clear();
  clear_has_time_step();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kPointFieldNumber;
const int State::kShapeFieldNumber;
const int State::kOrientationFieldNumber;
const int State::kVelocityFieldNumber;
const int State::kSteeringAngleFieldNumber;
const int State::kSteeringAngleSpeedFieldNumber;
const int State::kYawRateFieldNumber;
const int State::kSlipAngleFieldNumber;
const int State::kRollAngleFieldNumber;
const int State::kRollRateFieldNumber;
const int State::kPitchAngleFieldNumber;
const int State::kPitchRateFieldNumber;
const int State::kVelocityYFieldNumber;
const int State::kPositionZFieldNumber;
const int State::kVelocityZFieldNumber;
const int State::kRollAngleFrontFieldNumber;
const int State::kRollRateFrontFieldNumber;
const int State::kVelocityYFrontFieldNumber;
const int State::kPositionZFrontFieldNumber;
const int State::kVelocityZFrontFieldNumber;
const int State::kRollAngleRearFieldNumber;
const int State::kRollRateRearFieldNumber;
const int State::kVelocityYRearFieldNumber;
const int State::kPositionZRearFieldNumber;
const int State::kVelocityZRearFieldNumber;
const int State::kLeftFrontWheelAngularSpeedFieldNumber;
const int State::kRightFrontWheelAngularSpeedFieldNumber;
const int State::kLeftRearWheelAngularSpeedFieldNumber;
const int State::kRightRearWheelAngularSpeedFieldNumber;
const int State::kDeltaYFFieldNumber;
const int State::kDeltaYRFieldNumber;
const int State::kAccelerationFieldNumber;
const int State::kAccelerationYFieldNumber;
const int State::kJerkFieldNumber;
const int State::kTimeStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::commonroad::FloatExactOrInterval(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::commonroad::FloatExactOrInterval(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_steering_angle()) {
    steering_angle_ = new ::commonroad::FloatExactOrInterval(*from.steering_angle_);
  } else {
    steering_angle_ = NULL;
  }
  if (from.has_steering_angle_speed()) {
    steering_angle_speed_ = new ::commonroad::FloatExactOrInterval(*from.steering_angle_speed_);
  } else {
    steering_angle_speed_ = NULL;
  }
  if (from.has_yaw_rate()) {
    yaw_rate_ = new ::commonroad::FloatExactOrInterval(*from.yaw_rate_);
  } else {
    yaw_rate_ = NULL;
  }
  if (from.has_slip_angle()) {
    slip_angle_ = new ::commonroad::FloatExactOrInterval(*from.slip_angle_);
  } else {
    slip_angle_ = NULL;
  }
  if (from.has_roll_angle()) {
    roll_angle_ = new ::commonroad::FloatExactOrInterval(*from.roll_angle_);
  } else {
    roll_angle_ = NULL;
  }
  if (from.has_roll_rate()) {
    roll_rate_ = new ::commonroad::FloatExactOrInterval(*from.roll_rate_);
  } else {
    roll_rate_ = NULL;
  }
  if (from.has_pitch_angle()) {
    pitch_angle_ = new ::commonroad::FloatExactOrInterval(*from.pitch_angle_);
  } else {
    pitch_angle_ = NULL;
  }
  if (from.has_pitch_rate()) {
    pitch_rate_ = new ::commonroad::FloatExactOrInterval(*from.pitch_rate_);
  } else {
    pitch_rate_ = NULL;
  }
  if (from.has_velocity_y()) {
    velocity_y_ = new ::commonroad::FloatExactOrInterval(*from.velocity_y_);
  } else {
    velocity_y_ = NULL;
  }
  if (from.has_position_z()) {
    position_z_ = new ::commonroad::FloatExactOrInterval(*from.position_z_);
  } else {
    position_z_ = NULL;
  }
  if (from.has_velocity_z()) {
    velocity_z_ = new ::commonroad::FloatExactOrInterval(*from.velocity_z_);
  } else {
    velocity_z_ = NULL;
  }
  if (from.has_roll_angle_front()) {
    roll_angle_front_ = new ::commonroad::FloatExactOrInterval(*from.roll_angle_front_);
  } else {
    roll_angle_front_ = NULL;
  }
  if (from.has_roll_rate_front()) {
    roll_rate_front_ = new ::commonroad::FloatExactOrInterval(*from.roll_rate_front_);
  } else {
    roll_rate_front_ = NULL;
  }
  if (from.has_velocity_y_front()) {
    velocity_y_front_ = new ::commonroad::FloatExactOrInterval(*from.velocity_y_front_);
  } else {
    velocity_y_front_ = NULL;
  }
  if (from.has_position_z_front()) {
    position_z_front_ = new ::commonroad::FloatExactOrInterval(*from.position_z_front_);
  } else {
    position_z_front_ = NULL;
  }
  if (from.has_velocity_z_front()) {
    velocity_z_front_ = new ::commonroad::FloatExactOrInterval(*from.velocity_z_front_);
  } else {
    velocity_z_front_ = NULL;
  }
  if (from.has_roll_angle_rear()) {
    roll_angle_rear_ = new ::commonroad::FloatExactOrInterval(*from.roll_angle_rear_);
  } else {
    roll_angle_rear_ = NULL;
  }
  if (from.has_roll_rate_rear()) {
    roll_rate_rear_ = new ::commonroad::FloatExactOrInterval(*from.roll_rate_rear_);
  } else {
    roll_rate_rear_ = NULL;
  }
  if (from.has_velocity_y_rear()) {
    velocity_y_rear_ = new ::commonroad::FloatExactOrInterval(*from.velocity_y_rear_);
  } else {
    velocity_y_rear_ = NULL;
  }
  if (from.has_position_z_rear()) {
    position_z_rear_ = new ::commonroad::FloatExactOrInterval(*from.position_z_rear_);
  } else {
    position_z_rear_ = NULL;
  }
  if (from.has_velocity_z_rear()) {
    velocity_z_rear_ = new ::commonroad::FloatExactOrInterval(*from.velocity_z_rear_);
  } else {
    velocity_z_rear_ = NULL;
  }
  if (from.has_left_front_wheel_angular_speed()) {
    left_front_wheel_angular_speed_ = new ::commonroad::FloatExactOrInterval(*from.left_front_wheel_angular_speed_);
  } else {
    left_front_wheel_angular_speed_ = NULL;
  }
  if (from.has_right_front_wheel_angular_speed()) {
    right_front_wheel_angular_speed_ = new ::commonroad::FloatExactOrInterval(*from.right_front_wheel_angular_speed_);
  } else {
    right_front_wheel_angular_speed_ = NULL;
  }
  if (from.has_left_rear_wheel_angular_speed()) {
    left_rear_wheel_angular_speed_ = new ::commonroad::FloatExactOrInterval(*from.left_rear_wheel_angular_speed_);
  } else {
    left_rear_wheel_angular_speed_ = NULL;
  }
  if (from.has_right_rear_wheel_angular_speed()) {
    right_rear_wheel_angular_speed_ = new ::commonroad::FloatExactOrInterval(*from.right_rear_wheel_angular_speed_);
  } else {
    right_rear_wheel_angular_speed_ = NULL;
  }
  if (from.has_delta_y_f()) {
    delta_y_f_ = new ::commonroad::FloatExactOrInterval(*from.delta_y_f_);
  } else {
    delta_y_f_ = NULL;
  }
  if (from.has_delta_y_r()) {
    delta_y_r_ = new ::commonroad::FloatExactOrInterval(*from.delta_y_r_);
  } else {
    delta_y_r_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::commonroad::FloatExactOrInterval(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_acceleration_y()) {
    acceleration_y_ = new ::commonroad::FloatExactOrInterval(*from.acceleration_y_);
  } else {
    acceleration_y_ = NULL;
  }
  if (from.has_jerk()) {
    jerk_ = new ::commonroad::FloatExactOrInterval(*from.jerk_);
  } else {
    jerk_ = NULL;
  }
  if (from.has_time_step()) {
    time_step_ = new ::commonroad::IntegerExactOrInterval(*from.time_step_);
  } else {
    time_step_ = NULL;
  }
  clear_has_position();
  switch (from.position_case()) {
    case kPoint: {
      mutable_point()->::commonroad::Point::MergeFrom(from.point());
      break;
    }
    case kShape: {
      mutable_shape()->::commonroad::Shape::MergeFrom(from.shape());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.State)
}

void State::SharedCtor() {
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_step_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(time_step_));
  clear_has_position();
}

State::~State() {
  // @@protoc_insertion_point(destructor:commonroad.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete steering_angle_;
  if (this != internal_default_instance()) delete steering_angle_speed_;
  if (this != internal_default_instance()) delete yaw_rate_;
  if (this != internal_default_instance()) delete slip_angle_;
  if (this != internal_default_instance()) delete roll_angle_;
  if (this != internal_default_instance()) delete roll_rate_;
  if (this != internal_default_instance()) delete pitch_angle_;
  if (this != internal_default_instance()) delete pitch_rate_;
  if (this != internal_default_instance()) delete velocity_y_;
  if (this != internal_default_instance()) delete position_z_;
  if (this != internal_default_instance()) delete velocity_z_;
  if (this != internal_default_instance()) delete roll_angle_front_;
  if (this != internal_default_instance()) delete roll_rate_front_;
  if (this != internal_default_instance()) delete velocity_y_front_;
  if (this != internal_default_instance()) delete position_z_front_;
  if (this != internal_default_instance()) delete velocity_z_front_;
  if (this != internal_default_instance()) delete roll_angle_rear_;
  if (this != internal_default_instance()) delete roll_rate_rear_;
  if (this != internal_default_instance()) delete velocity_y_rear_;
  if (this != internal_default_instance()) delete position_z_rear_;
  if (this != internal_default_instance()) delete velocity_z_rear_;
  if (this != internal_default_instance()) delete left_front_wheel_angular_speed_;
  if (this != internal_default_instance()) delete right_front_wheel_angular_speed_;
  if (this != internal_default_instance()) delete left_rear_wheel_angular_speed_;
  if (this != internal_default_instance()) delete right_rear_wheel_angular_speed_;
  if (this != internal_default_instance()) delete delta_y_f_;
  if (this != internal_default_instance()) delete delta_y_r_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete acceleration_y_;
  if (this != internal_default_instance()) delete jerk_;
  if (this != internal_default_instance()) delete time_step_;
  if (has_position()) {
    clear_position();
  }
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::clear_position() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.State)
  switch (position_case()) {
    case kPoint: {
      delete position_.point_;
      break;
    }
    case kShape: {
      delete position_.shape_;
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POSITION_NOT_SET;
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(steering_angle_ != NULL);
      steering_angle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(steering_angle_speed_ != NULL);
      steering_angle_speed_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(yaw_rate_ != NULL);
      yaw_rate_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(slip_angle_ != NULL);
      slip_angle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(roll_angle_ != NULL);
      roll_angle_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(roll_rate_ != NULL);
      roll_rate_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pitch_angle_ != NULL);
      pitch_angle_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(pitch_rate_ != NULL);
      pitch_rate_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(velocity_y_ != NULL);
      velocity_y_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(position_z_ != NULL);
      position_z_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(velocity_z_ != NULL);
      velocity_z_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(roll_angle_front_ != NULL);
      roll_angle_front_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(roll_rate_front_ != NULL);
      roll_rate_front_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(velocity_y_front_ != NULL);
      velocity_y_front_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(position_z_front_ != NULL);
      position_z_front_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(velocity_z_front_ != NULL);
      velocity_z_front_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(roll_angle_rear_ != NULL);
      roll_angle_rear_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(roll_rate_rear_ != NULL);
      roll_rate_rear_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(velocity_y_rear_ != NULL);
      velocity_y_rear_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(position_z_rear_ != NULL);
      position_z_rear_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(velocity_z_rear_ != NULL);
      velocity_z_rear_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(left_front_wheel_angular_speed_ != NULL);
      left_front_wheel_angular_speed_->Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(right_front_wheel_angular_speed_ != NULL);
      right_front_wheel_angular_speed_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(left_rear_wheel_angular_speed_ != NULL);
      left_rear_wheel_angular_speed_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(right_rear_wheel_angular_speed_ != NULL);
      right_rear_wheel_angular_speed_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(delta_y_f_ != NULL);
      delta_y_f_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(delta_y_r_ != NULL);
      delta_y_r_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(acceleration_y_ != NULL);
      acceleration_y_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(jerk_ != NULL);
      jerk_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_step_ != NULL);
    time_step_->Clear();
  }
  clear_position();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonroad.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Shape shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval steering_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval steering_angle_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_angle_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval yaw_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval slip_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_slip_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_rate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval pitch_angle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval pitch_rate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval position_z = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_z = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_angle_front = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_angle_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_rate_front = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_rate_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_y_front = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_y_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval position_z_front = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_z_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_z_front = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_z_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_angle_rear = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_angle_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval roll_rate_rear = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll_rate_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_y_rear = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_y_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval position_z_rear = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_z_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval velocity_z_rear = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_z_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval left_front_wheel_angular_speed = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_front_wheel_angular_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval right_front_wheel_angular_speed = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_front_wheel_angular_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval left_rear_wheel_angular_speed = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_rear_wheel_angular_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval right_rear_wheel_angular_speed = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_rear_wheel_angular_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval delta_y_f = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delta_y_f()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval delta_y_r = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delta_y_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval acceleration = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval acceleration_y = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatExactOrInterval jerk = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jerk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.IntegerExactOrInterval time_step = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (position_case()) {
    case kPoint:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_point(), output);
      break;
    case kShape:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_shape(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .commonroad.FloatExactOrInterval orientation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_orientation(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_velocity(), output);
  }

  // optional .commonroad.FloatExactOrInterval steering_angle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_steering_angle(), output);
  }

  // optional .commonroad.FloatExactOrInterval steering_angle_speed = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_steering_angle_speed(), output);
  }

  // optional .commonroad.FloatExactOrInterval yaw_rate = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_yaw_rate(), output);
  }

  // optional .commonroad.FloatExactOrInterval slip_angle = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_slip_angle(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_roll_angle(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_roll_rate(), output);
  }

  // optional .commonroad.FloatExactOrInterval pitch_angle = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_pitch_angle(), output);
  }

  // optional .commonroad.FloatExactOrInterval pitch_rate = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_pitch_rate(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_velocity_y(), output);
  }

  // optional .commonroad.FloatExactOrInterval position_z = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_position_z(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_velocity_z(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle_front = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_roll_angle_front(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate_front = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_roll_rate_front(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y_front = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_velocity_y_front(), output);
  }

  // optional .commonroad.FloatExactOrInterval position_z_front = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_position_z_front(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z_front = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_velocity_z_front(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle_rear = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_roll_angle_rear(), output);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate_rear = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_roll_rate_rear(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y_rear = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_velocity_y_rear(), output);
  }

  // optional .commonroad.FloatExactOrInterval position_z_rear = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_position_z_rear(), output);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z_rear = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_velocity_z_rear(), output);
  }

  // optional .commonroad.FloatExactOrInterval left_front_wheel_angular_speed = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_left_front_wheel_angular_speed(), output);
  }

  // optional .commonroad.FloatExactOrInterval right_front_wheel_angular_speed = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_right_front_wheel_angular_speed(), output);
  }

  // optional .commonroad.FloatExactOrInterval left_rear_wheel_angular_speed = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_left_rear_wheel_angular_speed(), output);
  }

  // optional .commonroad.FloatExactOrInterval right_rear_wheel_angular_speed = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_right_rear_wheel_angular_speed(), output);
  }

  // optional .commonroad.FloatExactOrInterval delta_y_f = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_delta_y_f(), output);
  }

  // optional .commonroad.FloatExactOrInterval delta_y_r = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_delta_y_r(), output);
  }

  // optional .commonroad.FloatExactOrInterval acceleration = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_acceleration(), output);
  }

  // optional .commonroad.FloatExactOrInterval acceleration_y = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_internal_acceleration_y(), output);
  }

  // optional .commonroad.FloatExactOrInterval jerk = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_internal_jerk(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .commonroad.IntegerExactOrInterval time_step = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_internal_time_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (position_case()) {
    case kPoint:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_point(), deterministic, target);
      break;
    case kShape:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_shape(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .commonroad.FloatExactOrInterval orientation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_orientation(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_velocity(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval steering_angle = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_steering_angle(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval steering_angle_speed = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_steering_angle_speed(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval yaw_rate = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_yaw_rate(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval slip_angle = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_slip_angle(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_roll_angle(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_roll_rate(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval pitch_angle = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_pitch_angle(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval pitch_rate = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_pitch_rate(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_velocity_y(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval position_z = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_position_z(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_velocity_z(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle_front = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_roll_angle_front(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate_front = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_roll_rate_front(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y_front = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_velocity_y_front(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval position_z_front = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_position_z_front(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z_front = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_velocity_z_front(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_angle_rear = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_roll_angle_rear(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval roll_rate_rear = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_roll_rate_rear(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_y_rear = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_velocity_y_rear(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval position_z_rear = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_position_z_rear(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval velocity_z_rear = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_velocity_z_rear(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval left_front_wheel_angular_speed = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_left_front_wheel_angular_speed(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval right_front_wheel_angular_speed = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_right_front_wheel_angular_speed(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval left_rear_wheel_angular_speed = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_left_rear_wheel_angular_speed(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval right_rear_wheel_angular_speed = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_right_rear_wheel_angular_speed(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval delta_y_f = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_delta_y_f(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval delta_y_r = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_delta_y_r(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval acceleration = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_acceleration(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval acceleration_y = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->_internal_acceleration_y(), deterministic, target);
  }

  // optional .commonroad.FloatExactOrInterval jerk = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->_internal_jerk(), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .commonroad.IntegerExactOrInterval time_step = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, this->_internal_time_step(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .commonroad.FloatExactOrInterval orientation = 3;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .commonroad.FloatExactOrInterval velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .commonroad.FloatExactOrInterval steering_angle = 5;
    if (has_steering_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_angle_);
    }

    // optional .commonroad.FloatExactOrInterval steering_angle_speed = 6;
    if (has_steering_angle_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_angle_speed_);
    }

    // optional .commonroad.FloatExactOrInterval yaw_rate = 7;
    if (has_yaw_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yaw_rate_);
    }

    // optional .commonroad.FloatExactOrInterval slip_angle = 8;
    if (has_slip_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *slip_angle_);
    }

    // optional .commonroad.FloatExactOrInterval roll_angle = 9;
    if (has_roll_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_angle_);
    }

    // optional .commonroad.FloatExactOrInterval roll_rate = 10;
    if (has_roll_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_rate_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .commonroad.FloatExactOrInterval pitch_angle = 11;
    if (has_pitch_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pitch_angle_);
    }

    // optional .commonroad.FloatExactOrInterval pitch_rate = 12;
    if (has_pitch_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pitch_rate_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_y = 13;
    if (has_velocity_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_y_);
    }

    // optional .commonroad.FloatExactOrInterval position_z = 14;
    if (has_position_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_z_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_z = 15;
    if (has_velocity_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_z_);
    }

    // optional .commonroad.FloatExactOrInterval roll_angle_front = 16;
    if (has_roll_angle_front()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_angle_front_);
    }

    // optional .commonroad.FloatExactOrInterval roll_rate_front = 17;
    if (has_roll_rate_front()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_rate_front_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_y_front = 18;
    if (has_velocity_y_front()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_y_front_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .commonroad.FloatExactOrInterval position_z_front = 19;
    if (has_position_z_front()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_z_front_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_z_front = 20;
    if (has_velocity_z_front()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_z_front_);
    }

    // optional .commonroad.FloatExactOrInterval roll_angle_rear = 21;
    if (has_roll_angle_rear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_angle_rear_);
    }

    // optional .commonroad.FloatExactOrInterval roll_rate_rear = 22;
    if (has_roll_rate_rear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roll_rate_rear_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_y_rear = 23;
    if (has_velocity_y_rear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_y_rear_);
    }

    // optional .commonroad.FloatExactOrInterval position_z_rear = 24;
    if (has_position_z_rear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_z_rear_);
    }

    // optional .commonroad.FloatExactOrInterval velocity_z_rear = 25;
    if (has_velocity_z_rear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_z_rear_);
    }

    // optional .commonroad.FloatExactOrInterval left_front_wheel_angular_speed = 26;
    if (has_left_front_wheel_angular_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_front_wheel_angular_speed_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .commonroad.FloatExactOrInterval right_front_wheel_angular_speed = 27;
    if (has_right_front_wheel_angular_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_front_wheel_angular_speed_);
    }

    // optional .commonroad.FloatExactOrInterval left_rear_wheel_angular_speed = 28;
    if (has_left_rear_wheel_angular_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_rear_wheel_angular_speed_);
    }

    // optional .commonroad.FloatExactOrInterval right_rear_wheel_angular_speed = 29;
    if (has_right_rear_wheel_angular_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_rear_wheel_angular_speed_);
    }

    // optional .commonroad.FloatExactOrInterval delta_y_f = 30;
    if (has_delta_y_f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delta_y_f_);
    }

    // optional .commonroad.FloatExactOrInterval delta_y_r = 31;
    if (has_delta_y_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delta_y_r_);
    }

    // optional .commonroad.FloatExactOrInterval acceleration = 32;
    if (has_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .commonroad.FloatExactOrInterval acceleration_y = 33;
    if (has_acceleration_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_y_);
    }

    // optional .commonroad.FloatExactOrInterval jerk = 34;
    if (has_jerk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *jerk_);
    }

  }
  // optional .commonroad.IntegerExactOrInterval time_step = 35;
  if (has_time_step()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_step_);
  }

  switch (position_case()) {
    // optional .commonroad.Point point = 1;
    case kPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_.point_);
      break;
    }
    // optional .commonroad.Shape shape = 2;
    case kShape: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_.shape_);
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_orientation()->::commonroad::FloatExactOrInterval::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_steering_angle()->::commonroad::FloatExactOrInterval::MergeFrom(from.steering_angle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_steering_angle_speed()->::commonroad::FloatExactOrInterval::MergeFrom(from.steering_angle_speed());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_yaw_rate()->::commonroad::FloatExactOrInterval::MergeFrom(from.yaw_rate());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_slip_angle()->::commonroad::FloatExactOrInterval::MergeFrom(from.slip_angle());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_roll_angle()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_angle());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_roll_rate()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_rate());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_pitch_angle()->::commonroad::FloatExactOrInterval::MergeFrom(from.pitch_angle());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_pitch_rate()->::commonroad::FloatExactOrInterval::MergeFrom(from.pitch_rate());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_velocity_y()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_y());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_position_z()->::commonroad::FloatExactOrInterval::MergeFrom(from.position_z());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_velocity_z()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_z());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_roll_angle_front()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_angle_front());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_roll_rate_front()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_rate_front());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_velocity_y_front()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_y_front());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_position_z_front()->::commonroad::FloatExactOrInterval::MergeFrom(from.position_z_front());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_velocity_z_front()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_z_front());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_roll_angle_rear()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_angle_rear());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_roll_rate_rear()->::commonroad::FloatExactOrInterval::MergeFrom(from.roll_rate_rear());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_velocity_y_rear()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_y_rear());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_position_z_rear()->::commonroad::FloatExactOrInterval::MergeFrom(from.position_z_rear());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_velocity_z_rear()->::commonroad::FloatExactOrInterval::MergeFrom(from.velocity_z_rear());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_left_front_wheel_angular_speed()->::commonroad::FloatExactOrInterval::MergeFrom(from.left_front_wheel_angular_speed());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_right_front_wheel_angular_speed()->::commonroad::FloatExactOrInterval::MergeFrom(from.right_front_wheel_angular_speed());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_left_rear_wheel_angular_speed()->::commonroad::FloatExactOrInterval::MergeFrom(from.left_rear_wheel_angular_speed());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_right_rear_wheel_angular_speed()->::commonroad::FloatExactOrInterval::MergeFrom(from.right_rear_wheel_angular_speed());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_delta_y_f()->::commonroad::FloatExactOrInterval::MergeFrom(from.delta_y_f());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_delta_y_r()->::commonroad::FloatExactOrInterval::MergeFrom(from.delta_y_r());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_acceleration()->::commonroad::FloatExactOrInterval::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_acceleration_y()->::commonroad::FloatExactOrInterval::MergeFrom(from.acceleration_y());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_jerk()->::commonroad::FloatExactOrInterval::MergeFrom(from.jerk());
    }
  }
  if (from.has_time_step()) {
    mutable_time_step()->::commonroad::IntegerExactOrInterval::MergeFrom(from.time_step());
  }
  switch (from.position_case()) {
    case kPoint: {
      mutable_point()->::commonroad::Point::MergeFrom(from.point());
      break;
    }
    case kShape: {
      mutable_shape()->::commonroad::Shape::MergeFrom(from.shape());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  if (has_steering_angle()) {
    if (!this->steering_angle_->IsInitialized()) return false;
  }
  if (has_steering_angle_speed()) {
    if (!this->steering_angle_speed_->IsInitialized()) return false;
  }
  if (has_yaw_rate()) {
    if (!this->yaw_rate_->IsInitialized()) return false;
  }
  if (has_slip_angle()) {
    if (!this->slip_angle_->IsInitialized()) return false;
  }
  if (has_roll_angle()) {
    if (!this->roll_angle_->IsInitialized()) return false;
  }
  if (has_roll_rate()) {
    if (!this->roll_rate_->IsInitialized()) return false;
  }
  if (has_pitch_angle()) {
    if (!this->pitch_angle_->IsInitialized()) return false;
  }
  if (has_pitch_rate()) {
    if (!this->pitch_rate_->IsInitialized()) return false;
  }
  if (has_velocity_y()) {
    if (!this->velocity_y_->IsInitialized()) return false;
  }
  if (has_position_z()) {
    if (!this->position_z_->IsInitialized()) return false;
  }
  if (has_velocity_z()) {
    if (!this->velocity_z_->IsInitialized()) return false;
  }
  if (has_roll_angle_front()) {
    if (!this->roll_angle_front_->IsInitialized()) return false;
  }
  if (has_roll_rate_front()) {
    if (!this->roll_rate_front_->IsInitialized()) return false;
  }
  if (has_velocity_y_front()) {
    if (!this->velocity_y_front_->IsInitialized()) return false;
  }
  if (has_position_z_front()) {
    if (!this->position_z_front_->IsInitialized()) return false;
  }
  if (has_velocity_z_front()) {
    if (!this->velocity_z_front_->IsInitialized()) return false;
  }
  if (has_roll_angle_rear()) {
    if (!this->roll_angle_rear_->IsInitialized()) return false;
  }
  if (has_roll_rate_rear()) {
    if (!this->roll_rate_rear_->IsInitialized()) return false;
  }
  if (has_velocity_y_rear()) {
    if (!this->velocity_y_rear_->IsInitialized()) return false;
  }
  if (has_position_z_rear()) {
    if (!this->position_z_rear_->IsInitialized()) return false;
  }
  if (has_velocity_z_rear()) {
    if (!this->velocity_z_rear_->IsInitialized()) return false;
  }
  if (has_left_front_wheel_angular_speed()) {
    if (!this->left_front_wheel_angular_speed_->IsInitialized()) return false;
  }
  if (has_right_front_wheel_angular_speed()) {
    if (!this->right_front_wheel_angular_speed_->IsInitialized()) return false;
  }
  if (has_left_rear_wheel_angular_speed()) {
    if (!this->left_rear_wheel_angular_speed_->IsInitialized()) return false;
  }
  if (has_right_rear_wheel_angular_speed()) {
    if (!this->right_rear_wheel_angular_speed_->IsInitialized()) return false;
  }
  if (has_delta_y_f()) {
    if (!this->delta_y_f_->IsInitialized()) return false;
  }
  if (has_delta_y_r()) {
    if (!this->delta_y_r_->IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration_->IsInitialized()) return false;
  }
  if (has_acceleration_y()) {
    if (!this->acceleration_y_->IsInitialized()) return false;
  }
  if (has_jerk()) {
    if (!this->jerk_->IsInitialized()) return false;
  }
  if (has_time_step()) {
    if (!this->time_step_->IsInitialized()) return false;
  }
  switch (position_case()) {
    case kPoint: {
      if (has_point()) {
        if (!this->point().IsInitialized()) return false;
      }
      break;
    }
    case kShape: {
      if (has_shape()) {
        if (!this->shape().IsInitialized()) return false;
      }
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  swap(orientation_, other->orientation_);
  swap(velocity_, other->velocity_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_angle_speed_, other->steering_angle_speed_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(slip_angle_, other->slip_angle_);
  swap(roll_angle_, other->roll_angle_);
  swap(roll_rate_, other->roll_rate_);
  swap(pitch_angle_, other->pitch_angle_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(velocity_y_, other->velocity_y_);
  swap(position_z_, other->position_z_);
  swap(velocity_z_, other->velocity_z_);
  swap(roll_angle_front_, other->roll_angle_front_);
  swap(roll_rate_front_, other->roll_rate_front_);
  swap(velocity_y_front_, other->velocity_y_front_);
  swap(position_z_front_, other->position_z_front_);
  swap(velocity_z_front_, other->velocity_z_front_);
  swap(roll_angle_rear_, other->roll_angle_rear_);
  swap(roll_rate_rear_, other->roll_rate_rear_);
  swap(velocity_y_rear_, other->velocity_y_rear_);
  swap(position_z_rear_, other->position_z_rear_);
  swap(velocity_z_rear_, other->velocity_z_rear_);
  swap(left_front_wheel_angular_speed_, other->left_front_wheel_angular_speed_);
  swap(right_front_wheel_angular_speed_, other->right_front_wheel_angular_speed_);
  swap(left_rear_wheel_angular_speed_, other->left_rear_wheel_angular_speed_);
  swap(right_rear_wheel_angular_speed_, other->right_rear_wheel_angular_speed_);
  swap(delta_y_f_, other->delta_y_f_);
  swap(delta_y_r_, other->delta_y_r_);
  swap(acceleration_, other->acceleration_);
  swap(acceleration_y_, other->acceleration_y_);
  swap(jerk_, other->jerk_);
  swap(time_step_, other->time_step_);
  swap(position_, other->position_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalState::InitAsDefaultInstance() {
  ::commonroad::_SignalState_default_instance_._instance.get_mutable()->time_step_ = const_cast< ::commonroad::IntegerExactOrInterval*>(
      ::commonroad::IntegerExactOrInterval::internal_default_instance());
}
void SignalState::clear_time_step() {
  if (time_step_ != NULL) time_step_->Clear();
  clear_has_time_step();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalState::kTimeStepFieldNumber;
const int SignalState::kHornFieldNumber;
const int SignalState::kIndicatorLeftFieldNumber;
const int SignalState::kIndicatorRightFieldNumber;
const int SignalState::kBrakingLightsFieldNumber;
const int SignalState::kHazardWarningLightsFieldNumber;
const int SignalState::kFlashingBlueLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalState::SignalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_SignalState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.SignalState)
}
SignalState::SignalState(const SignalState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_step()) {
    time_step_ = new ::commonroad::IntegerExactOrInterval(*from.time_step_);
  } else {
    time_step_ = NULL;
  }
  ::memcpy(&horn_, &from.horn_,
    static_cast<size_t>(reinterpret_cast<char*>(&flashing_blue_lights_) -
    reinterpret_cast<char*>(&horn_)) + sizeof(flashing_blue_lights_));
  // @@protoc_insertion_point(copy_constructor:commonroad.SignalState)
}

void SignalState::SharedCtor() {
  ::memset(&time_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flashing_blue_lights_) -
      reinterpret_cast<char*>(&time_step_)) + sizeof(flashing_blue_lights_));
}

SignalState::~SignalState() {
  // @@protoc_insertion_point(destructor:commonroad.SignalState)
  SharedDtor();
}

void SignalState::SharedDtor() {
  if (this != internal_default_instance()) delete time_step_;
}

void SignalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalState::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalState& SignalState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_SignalState.base);
  return *internal_default_instance();
}


void SignalState::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_step_ != NULL);
    time_step_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&horn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flashing_blue_lights_) -
        reinterpret_cast<char*>(&horn_)) + sizeof(flashing_blue_lights_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.SignalState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonroad.IntegerExactOrInterval time_step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool indicator_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_indicator_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indicator_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool indicator_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_indicator_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indicator_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool braking_lights = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_braking_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &braking_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hazard_warning_lights = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hazard_warning_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hazard_warning_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flashing_blue_lights = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_flashing_blue_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flashing_blue_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.SignalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.SignalState)
  return false;
#undef DO_
}

void SignalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.IntegerExactOrInterval time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time_step(), output);
  }

  // optional bool horn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->horn(), output);
  }

  // optional bool indicator_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->indicator_left(), output);
  }

  // optional bool indicator_right = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->indicator_right(), output);
  }

  // optional bool braking_lights = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->braking_lights(), output);
  }

  // optional bool hazard_warning_lights = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hazard_warning_lights(), output);
  }

  // optional bool flashing_blue_lights = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->flashing_blue_lights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.SignalState)
}

::google::protobuf::uint8* SignalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.SignalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .commonroad.IntegerExactOrInterval time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time_step(), deterministic, target);
  }

  // optional bool horn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->horn(), target);
  }

  // optional bool indicator_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->indicator_left(), target);
  }

  // optional bool indicator_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->indicator_right(), target);
  }

  // optional bool braking_lights = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->braking_lights(), target);
  }

  // optional bool hazard_warning_lights = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hazard_warning_lights(), target);
  }

  // optional bool flashing_blue_lights = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->flashing_blue_lights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.SignalState)
  return target;
}

size_t SignalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.SignalState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .commonroad.IntegerExactOrInterval time_step = 1;
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *time_step_);
    }

    // optional bool horn = 2;
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool indicator_left = 3;
    if (has_indicator_left()) {
      total_size += 1 + 1;
    }

    // optional bool indicator_right = 4;
    if (has_indicator_right()) {
      total_size += 1 + 1;
    }

    // optional bool braking_lights = 5;
    if (has_braking_lights()) {
      total_size += 1 + 1;
    }

    // optional bool hazard_warning_lights = 6;
    if (has_hazard_warning_lights()) {
      total_size += 1 + 1;
    }

    // optional bool flashing_blue_lights = 7;
    if (has_flashing_blue_lights()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.SignalState)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.SignalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.SignalState)
    MergeFrom(*source);
  }
}

void SignalState::MergeFrom(const SignalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.SignalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time_step()->::commonroad::IntegerExactOrInterval::MergeFrom(from.time_step());
    }
    if (cached_has_bits & 0x00000002u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00000004u) {
      indicator_left_ = from.indicator_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      indicator_right_ = from.indicator_right_;
    }
    if (cached_has_bits & 0x00000010u) {
      braking_lights_ = from.braking_lights_;
    }
    if (cached_has_bits & 0x00000020u) {
      hazard_warning_lights_ = from.hazard_warning_lights_;
    }
    if (cached_has_bits & 0x00000040u) {
      flashing_blue_lights_ = from.flashing_blue_lights_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.SignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalState::CopyFrom(const SignalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.SignalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalState::IsInitialized() const {
  if (has_time_step()) {
    if (!this->time_step_->IsInitialized()) return false;
  }
  return true;
}

void SignalState::Swap(SignalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalState::InternalSwap(SignalState* other) {
  using std::swap;
  swap(time_step_, other->time_step_);
  swap(horn_, other->horn_);
  swap(indicator_left_, other->indicator_left_);
  swap(indicator_right_, other->indicator_right_);
  swap(braking_lights_, other->braking_lights_);
  swap(hazard_warning_lights_, other->hazard_warning_lights_);
  swap(flashing_blue_lights_, other->flashing_blue_lights_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalState::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Occupancy::InitAsDefaultInstance() {
  ::commonroad::_Occupancy_default_instance_._instance.get_mutable()->time_step_ = const_cast< ::commonroad::IntegerExactOrInterval*>(
      ::commonroad::IntegerExactOrInterval::internal_default_instance());
  ::commonroad::_Occupancy_default_instance_._instance.get_mutable()->shape_ = const_cast< ::commonroad::Shape*>(
      ::commonroad::Shape::internal_default_instance());
}
void Occupancy::clear_time_step() {
  if (time_step_ != NULL) time_step_->Clear();
  clear_has_time_step();
}
void Occupancy::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Occupancy::kTimeStepFieldNumber;
const int Occupancy::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Occupancy::Occupancy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_Occupancy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Occupancy)
}
Occupancy::Occupancy(const Occupancy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_step()) {
    time_step_ = new ::commonroad::IntegerExactOrInterval(*from.time_step_);
  } else {
    time_step_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::commonroad::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.Occupancy)
}

void Occupancy::SharedCtor() {
  ::memset(&time_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shape_) -
      reinterpret_cast<char*>(&time_step_)) + sizeof(shape_));
}

Occupancy::~Occupancy() {
  // @@protoc_insertion_point(destructor:commonroad.Occupancy)
  SharedDtor();
}

void Occupancy::SharedDtor() {
  if (this != internal_default_instance()) delete time_step_;
  if (this != internal_default_instance()) delete shape_;
}

void Occupancy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Occupancy::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Occupancy& Occupancy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_Occupancy.base);
  return *internal_default_instance();
}


void Occupancy::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Occupancy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(time_step_ != NULL);
      time_step_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != NULL);
      shape_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Occupancy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Occupancy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonroad.IntegerExactOrInterval time_step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Shape shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Occupancy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Occupancy)
  return false;
#undef DO_
}

void Occupancy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Occupancy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.IntegerExactOrInterval time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time_step(), output);
  }

  // required .commonroad.Shape shape = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_shape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Occupancy)
}

::google::protobuf::uint8* Occupancy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Occupancy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.IntegerExactOrInterval time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time_step(), deterministic, target);
  }

  // required .commonroad.Shape shape = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_shape(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Occupancy)
  return target;
}

size_t Occupancy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.Occupancy)
  size_t total_size = 0;

  if (has_time_step()) {
    // required .commonroad.IntegerExactOrInterval time_step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_step_);
  }

  if (has_shape()) {
    // required .commonroad.Shape shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  return total_size;
}
size_t Occupancy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Occupancy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .commonroad.IntegerExactOrInterval time_step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_step_);

    // required .commonroad.Shape shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Occupancy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Occupancy)
  GOOGLE_DCHECK_NE(&from, this);
  const Occupancy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Occupancy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Occupancy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Occupancy)
    MergeFrom(*source);
  }
}

void Occupancy::MergeFrom(const Occupancy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Occupancy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time_step()->::commonroad::IntegerExactOrInterval::MergeFrom(from.time_step());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shape()->::commonroad::Shape::MergeFrom(from.shape());
    }
  }
}

void Occupancy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Occupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Occupancy::CopyFrom(const Occupancy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Occupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Occupancy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_time_step()) {
    if (!this->time_step_->IsInitialized()) return false;
  }
  if (has_shape()) {
    if (!this->shape_->IsInitialized()) return false;
  }
  return true;
}

void Occupancy::Swap(Occupancy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Occupancy::InternalSwap(Occupancy* other) {
  using std::swap;
  swap(time_step_, other->time_step_);
  swap(shape_, other->shape_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Occupancy::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OccupancySet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OccupancySet::kOccupanciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OccupancySet::OccupancySet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_OccupancySet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.OccupancySet)
}
OccupancySet::OccupancySet(const OccupancySet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      occupancies_(from.occupancies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.OccupancySet)
}

void OccupancySet::SharedCtor() {
}

OccupancySet::~OccupancySet() {
  // @@protoc_insertion_point(destructor:commonroad.OccupancySet)
  SharedDtor();
}

void OccupancySet::SharedDtor() {
}

void OccupancySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OccupancySet::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OccupancySet& OccupancySet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_OccupancySet.base);
  return *internal_default_instance();
}


void OccupancySet::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.OccupancySet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  occupancies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OccupancySet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.OccupancySet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonroad.Occupancy occupancies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_occupancies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.OccupancySet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.OccupancySet)
  return false;
#undef DO_
}

void OccupancySet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.OccupancySet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Occupancy occupancies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupancies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->occupancies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.OccupancySet)
}

::google::protobuf::uint8* OccupancySet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.OccupancySet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Occupancy occupancies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupancies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->occupancies(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.OccupancySet)
  return target;
}

size_t OccupancySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.OccupancySet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .commonroad.Occupancy occupancies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->occupancies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->occupancies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancySet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.OccupancySet)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancySet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OccupancySet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.OccupancySet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.OccupancySet)
    MergeFrom(*source);
  }
}

void OccupancySet::MergeFrom(const OccupancySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.OccupancySet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  occupancies_.MergeFrom(from.occupancies_);
}

void OccupancySet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.OccupancySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancySet::CopyFrom(const OccupancySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.OccupancySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancySet::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->occupancies())) return false;
  return true;
}

void OccupancySet::Swap(OccupancySet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OccupancySet::InternalSwap(OccupancySet* other) {
  using std::swap;
  CastToBase(&occupancies_)->InternalSwap(CastToBase(&other->occupancies_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OccupancySet::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kInitialTimeStepFieldNumber;
const int Trajectory::kStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_Trajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  initial_time_step_ = from.initial_time_step_;
  // @@protoc_insertion_point(copy_constructor:commonroad.Trajectory)
}

void Trajectory::SharedCtor() {
  initial_time_step_ = 0u;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:commonroad.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_Trajectory.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  initial_time_step_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Trajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 initial_time_step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_initial_time_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_time_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.State states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 initial_time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->initial_time_step(), output);
  }

  // repeated .commonroad.State states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 initial_time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->initial_time_step(), target);
  }

  // repeated .commonroad.State states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->states(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 initial_time_step = 1;
  if (has_initial_time_step()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->initial_time_step());
  }
  // repeated .commonroad.State states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->states(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.has_initial_time_step()) {
    set_initial_time_step(from.initial_time_step());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->states())) return false;
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  CastToBase(&states_)->InternalSwap(CastToBase(&other->states_));
  swap(initial_time_step_, other->initial_time_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPrediction::InitAsDefaultInstance() {
  ::commonroad::_TrajectoryPrediction_default_instance_._instance.get_mutable()->trajectory_ = const_cast< ::commonroad::Trajectory*>(
      ::commonroad::Trajectory::internal_default_instance());
  ::commonroad::_TrajectoryPrediction_default_instance_._instance.get_mutable()->shape_ = const_cast< ::commonroad::Shape*>(
      ::commonroad::Shape::internal_default_instance());
}
void TrajectoryPrediction::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPrediction::kTrajectoryFieldNumber;
const int TrajectoryPrediction::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPrediction::TrajectoryPrediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_TrajectoryPrediction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrajectoryPrediction)
}
TrajectoryPrediction::TrajectoryPrediction(const TrajectoryPrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory()) {
    trajectory_ = new ::commonroad::Trajectory(*from.trajectory_);
  } else {
    trajectory_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::commonroad::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.TrajectoryPrediction)
}

void TrajectoryPrediction::SharedCtor() {
  ::memset(&trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shape_) -
      reinterpret_cast<char*>(&trajectory_)) + sizeof(shape_));
}

TrajectoryPrediction::~TrajectoryPrediction() {
  // @@protoc_insertion_point(destructor:commonroad.TrajectoryPrediction)
  SharedDtor();
}

void TrajectoryPrediction::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_;
  if (this != internal_default_instance()) delete shape_;
}

void TrajectoryPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryPrediction::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPrediction& TrajectoryPrediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_TrajectoryPrediction.base);
  return *internal_default_instance();
}


void TrajectoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrajectoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trajectory_ != NULL);
      trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != NULL);
      shape_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrajectoryPrediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonroad.Trajectory trajectory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.Shape shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrajectoryPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrajectoryPrediction)
  return false;
#undef DO_
}

void TrajectoryPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrajectoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.Trajectory trajectory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trajectory(), output);
  }

  // required .commonroad.Shape shape = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_shape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrajectoryPrediction)
}

::google::protobuf::uint8* TrajectoryPrediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrajectoryPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.Trajectory trajectory = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trajectory(), deterministic, target);
  }

  // required .commonroad.Shape shape = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_shape(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrajectoryPrediction)
  return target;
}

size_t TrajectoryPrediction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.TrajectoryPrediction)
  size_t total_size = 0;

  if (has_trajectory()) {
    // required .commonroad.Trajectory trajectory = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_);
  }

  if (has_shape()) {
    // required .commonroad.Shape shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  return total_size;
}
size_t TrajectoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrajectoryPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .commonroad.Trajectory trajectory = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_);

    // required .commonroad.Shape shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrajectoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPrediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPrediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrajectoryPrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrajectoryPrediction)
    MergeFrom(*source);
  }
}

void TrajectoryPrediction::MergeFrom(const TrajectoryPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrajectoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory()->::commonroad::Trajectory::MergeFrom(from.trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shape()->::commonroad::Shape::MergeFrom(from.shape());
    }
  }
}

void TrajectoryPrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrajectoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPrediction::CopyFrom(const TrajectoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrajectoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPrediction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_trajectory()) {
    if (!this->trajectory_->IsInitialized()) return false;
  }
  if (has_shape()) {
    if (!this->shape_->IsInitialized()) return false;
  }
  return true;
}

void TrajectoryPrediction::Swap(TrajectoryPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPrediction::InternalSwap(TrajectoryPrediction* other) {
  using std::swap;
  swap(trajectory_, other->trajectory_);
  swap(shape_, other->shape_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryPrediction::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetBasedPrediction::InitAsDefaultInstance() {
  ::commonroad::_SetBasedPrediction_default_instance_._instance.get_mutable()->occupancy_set_ = const_cast< ::commonroad::OccupancySet*>(
      ::commonroad::OccupancySet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetBasedPrediction::kInitialTimeStepFieldNumber;
const int SetBasedPrediction::kOccupancySetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetBasedPrediction::SetBasedPrediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_obstacle_2eproto::scc_info_SetBasedPrediction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.SetBasedPrediction)
}
SetBasedPrediction::SetBasedPrediction(const SetBasedPrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_occupancy_set()) {
    occupancy_set_ = new ::commonroad::OccupancySet(*from.occupancy_set_);
  } else {
    occupancy_set_ = NULL;
  }
  initial_time_step_ = from.initial_time_step_;
  // @@protoc_insertion_point(copy_constructor:commonroad.SetBasedPrediction)
}

void SetBasedPrediction::SharedCtor() {
  ::memset(&occupancy_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_time_step_) -
      reinterpret_cast<char*>(&occupancy_set_)) + sizeof(initial_time_step_));
}

SetBasedPrediction::~SetBasedPrediction() {
  // @@protoc_insertion_point(destructor:commonroad.SetBasedPrediction)
  SharedDtor();
}

void SetBasedPrediction::SharedDtor() {
  if (this != internal_default_instance()) delete occupancy_set_;
}

void SetBasedPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetBasedPrediction::descriptor() {
  ::protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetBasedPrediction& SetBasedPrediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_obstacle_2eproto::scc_info_SetBasedPrediction.base);
  return *internal_default_instance();
}


void SetBasedPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.SetBasedPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(occupancy_set_ != NULL);
    occupancy_set_->Clear();
  }
  initial_time_step_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetBasedPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.SetBasedPrediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 initial_time_step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_initial_time_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_time_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.OccupancySet occupancy_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occupancy_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.SetBasedPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.SetBasedPrediction)
  return false;
#undef DO_
}

void SetBasedPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.SetBasedPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 initial_time_step = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->initial_time_step(), output);
  }

  // required .commonroad.OccupancySet occupancy_set = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_occupancy_set(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.SetBasedPrediction)
}

::google::protobuf::uint8* SetBasedPrediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.SetBasedPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 initial_time_step = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->initial_time_step(), target);
  }

  // required .commonroad.OccupancySet occupancy_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_occupancy_set(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.SetBasedPrediction)
  return target;
}

size_t SetBasedPrediction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.SetBasedPrediction)
  size_t total_size = 0;

  if (has_occupancy_set()) {
    // required .commonroad.OccupancySet occupancy_set = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occupancy_set_);
  }

  if (has_initial_time_step()) {
    // required uint32 initial_time_step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->initial_time_step());
  }

  return total_size;
}
size_t SetBasedPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.SetBasedPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .commonroad.OccupancySet occupancy_set = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occupancy_set_);

    // required uint32 initial_time_step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->initial_time_step());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBasedPrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.SetBasedPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBasedPrediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetBasedPrediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.SetBasedPrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.SetBasedPrediction)
    MergeFrom(*source);
  }
}

void SetBasedPrediction::MergeFrom(const SetBasedPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.SetBasedPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_occupancy_set()->::commonroad::OccupancySet::MergeFrom(from.occupancy_set());
    }
    if (cached_has_bits & 0x00000002u) {
      initial_time_step_ = from.initial_time_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetBasedPrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.SetBasedPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBasedPrediction::CopyFrom(const SetBasedPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.SetBasedPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBasedPrediction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_occupancy_set()) {
    if (!this->occupancy_set_->IsInitialized()) return false;
  }
  return true;
}

void SetBasedPrediction::Swap(SetBasedPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetBasedPrediction::InternalSwap(SetBasedPrediction* other) {
  using std::swap;
  swap(occupancy_set_, other->occupancy_set_);
  swap(initial_time_step_, other->initial_time_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetBasedPrediction::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::ObstacleTypeEnum* Arena::CreateMaybeMessage< ::commonroad::ObstacleTypeEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::ObstacleTypeEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::State* Arena::CreateMaybeMessage< ::commonroad::State >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::SignalState* Arena::CreateMaybeMessage< ::commonroad::SignalState >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::SignalState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Occupancy* Arena::CreateMaybeMessage< ::commonroad::Occupancy >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Occupancy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::OccupancySet* Arena::CreateMaybeMessage< ::commonroad::OccupancySet >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::OccupancySet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Trajectory* Arena::CreateMaybeMessage< ::commonroad::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Trajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrajectoryPrediction* Arena::CreateMaybeMessage< ::commonroad::TrajectoryPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrajectoryPrediction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::SetBasedPrediction* Arena::CreateMaybeMessage< ::commonroad::SetBasedPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::SetBasedPrediction >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
