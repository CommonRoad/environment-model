// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_problem.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/planning_problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_obstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_obstacle_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_State;
}  // namespace protobuf_obstacle_2eproto
namespace protobuf_planning_5fproblem_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fproblem_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GoalState;
}  // namespace protobuf_planning_5fproblem_2eproto
namespace commonroad {
class GoalStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GoalState>
      _instance;
} _GoalState_default_instance_;
class PlanningProblemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningProblem>
      _instance;
} _PlanningProblem_default_instance_;
}  // namespace commonroad
namespace protobuf_planning_5fproblem_2eproto {
static void InitDefaultsGoalState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_GoalState_default_instance_;
    new (ptr) ::commonroad::GoalState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::GoalState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GoalState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGoalState}, {
      &protobuf_obstacle_2eproto::scc_info_State.base,}};

static void InitDefaultsPlanningProblem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_PlanningProblem_default_instance_;
    new (ptr) ::commonroad::PlanningProblem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::PlanningProblem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlanningProblem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlanningProblem}, {
      &protobuf_obstacle_2eproto::scc_info_State.base,
      &protobuf_planning_5fproblem_2eproto::scc_info_GoalState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GoalState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningProblem.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GoalState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GoalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GoalState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::GoalState, goal_position_lanelets_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::PlanningProblem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::PlanningProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::PlanningProblem, planning_problem_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::PlanningProblem, initial_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::PlanningProblem, goal_states_),
  1,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::commonroad::GoalState)},
  { 9, 17, sizeof(::commonroad::PlanningProblem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_GoalState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_PlanningProblem_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning_problem.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026planning_problem.proto\022\ncommonroad\032\016ob"
      "stacle.proto\"M\n\tGoalState\022 \n\005state\030\001 \002(\013"
      "2\021.commonroad.State\022\036\n\026goal_position_lan"
      "elets\030\002 \003(\r\"\204\001\n\017PlanningProblem\022\033\n\023plann"
      "ing_problem_id\030\001 \002(\r\022(\n\rinitial_state\030\002 "
      "\002(\0132\021.commonroad.State\022*\n\013goal_states\030\003 "
      "\003(\0132\025.commonroad.GoalState"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning_problem.proto", &protobuf_RegisterTypes);
  ::protobuf_obstacle_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_5fproblem_2eproto
namespace commonroad {

// ===================================================================

void GoalState::InitAsDefaultInstance() {
  ::commonroad::_GoalState_default_instance_._instance.get_mutable()->state_ = const_cast< ::commonroad::State*>(
      ::commonroad::State::internal_default_instance());
}
void GoalState::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalState::kStateFieldNumber;
const int GoalState::kGoalPositionLaneletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalState::GoalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fproblem_2eproto::scc_info_GoalState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.GoalState)
}
GoalState::GoalState(const GoalState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      goal_position_lanelets_(from.goal_position_lanelets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::commonroad::State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.GoalState)
}

void GoalState::SharedCtor() {
  state_ = NULL;
}

GoalState::~GoalState() {
  // @@protoc_insertion_point(destructor:commonroad.GoalState)
  SharedDtor();
}

void GoalState::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void GoalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GoalState::descriptor() {
  ::protobuf_planning_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalState& GoalState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fproblem_2eproto::scc_info_GoalState.base);
  return *internal_default_instance();
}


void GoalState::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.GoalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goal_position_lanelets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.GoalState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonroad.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 goal_position_lanelets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_goal_position_lanelets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_goal_position_lanelets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.GoalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.GoalState)
  return false;
#undef DO_
}

void GoalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.GoalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_state(), output);
  }

  // repeated uint32 goal_position_lanelets = 2;
  for (int i = 0, n = this->goal_position_lanelets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->goal_position_lanelets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.GoalState)
}

::google::protobuf::uint8* GoalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.GoalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .commonroad.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_state(), deterministic, target);
  }

  // repeated uint32 goal_position_lanelets = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->goal_position_lanelets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.GoalState)
  return target;
}

size_t GoalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.GoalState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .commonroad.State state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }
  // repeated uint32 goal_position_lanelets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->goal_position_lanelets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->goal_position_lanelets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.GoalState)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.GoalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.GoalState)
    MergeFrom(*source);
  }
}

void GoalState::MergeFrom(const GoalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.GoalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goal_position_lanelets_.MergeFrom(from.goal_position_lanelets_);
  if (from.has_state()) {
    mutable_state()->::commonroad::State::MergeFrom(from.state());
  }
}

void GoalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.GoalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalState::CopyFrom(const GoalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.GoalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void GoalState::Swap(GoalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalState::InternalSwap(GoalState* other) {
  using std::swap;
  goal_position_lanelets_.InternalSwap(&other->goal_position_lanelets_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GoalState::GetMetadata() const {
  protobuf_planning_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningProblem::InitAsDefaultInstance() {
  ::commonroad::_PlanningProblem_default_instance_._instance.get_mutable()->initial_state_ = const_cast< ::commonroad::State*>(
      ::commonroad::State::internal_default_instance());
}
void PlanningProblem::clear_initial_state() {
  if (initial_state_ != NULL) initial_state_->Clear();
  clear_has_initial_state();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningProblem::kPlanningProblemIdFieldNumber;
const int PlanningProblem::kInitialStateFieldNumber;
const int PlanningProblem::kGoalStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningProblem::PlanningProblem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fproblem_2eproto::scc_info_PlanningProblem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.PlanningProblem)
}
PlanningProblem::PlanningProblem(const PlanningProblem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      goal_states_(from.goal_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initial_state()) {
    initial_state_ = new ::commonroad::State(*from.initial_state_);
  } else {
    initial_state_ = NULL;
  }
  planning_problem_id_ = from.planning_problem_id_;
  // @@protoc_insertion_point(copy_constructor:commonroad.PlanningProblem)
}

void PlanningProblem::SharedCtor() {
  ::memset(&initial_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planning_problem_id_) -
      reinterpret_cast<char*>(&initial_state_)) + sizeof(planning_problem_id_));
}

PlanningProblem::~PlanningProblem() {
  // @@protoc_insertion_point(destructor:commonroad.PlanningProblem)
  SharedDtor();
}

void PlanningProblem::SharedDtor() {
  if (this != internal_default_instance()) delete initial_state_;
}

void PlanningProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningProblem::descriptor() {
  ::protobuf_planning_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningProblem& PlanningProblem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fproblem_2eproto::scc_info_PlanningProblem.base);
  return *internal_default_instance();
}


void PlanningProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.PlanningProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goal_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(initial_state_ != NULL);
    initial_state_->Clear();
  }
  planning_problem_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningProblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.PlanningProblem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 planning_problem_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_planning_problem_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &planning_problem_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.State initial_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.GoalState goal_states = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_goal_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.PlanningProblem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.PlanningProblem)
  return false;
#undef DO_
}

void PlanningProblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.PlanningProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 planning_problem_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->planning_problem_id(), output);
  }

  // required .commonroad.State initial_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_initial_state(), output);
  }

  // repeated .commonroad.GoalState goal_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->goal_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->goal_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.PlanningProblem)
}

::google::protobuf::uint8* PlanningProblem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.PlanningProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 planning_problem_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->planning_problem_id(), target);
  }

  // required .commonroad.State initial_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_initial_state(), deterministic, target);
  }

  // repeated .commonroad.GoalState goal_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->goal_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->goal_states(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.PlanningProblem)
  return target;
}

size_t PlanningProblem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.PlanningProblem)
  size_t total_size = 0;

  if (has_initial_state()) {
    // required .commonroad.State initial_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_state_);
  }

  if (has_planning_problem_id()) {
    // required uint32 planning_problem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->planning_problem_id());
  }

  return total_size;
}
size_t PlanningProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.PlanningProblem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .commonroad.State initial_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_state_);

    // required uint32 planning_problem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->planning_problem_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .commonroad.GoalState goal_states = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->goal_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->goal_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningProblem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.PlanningProblem)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningProblem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningProblem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.PlanningProblem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.PlanningProblem)
    MergeFrom(*source);
  }
}

void PlanningProblem::MergeFrom(const PlanningProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.PlanningProblem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goal_states_.MergeFrom(from.goal_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_initial_state()->::commonroad::State::MergeFrom(from.initial_state());
    }
    if (cached_has_bits & 0x00000002u) {
      planning_problem_id_ = from.planning_problem_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningProblem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.PlanningProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningProblem::CopyFrom(const PlanningProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.PlanningProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningProblem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->goal_states())) return false;
  if (has_initial_state()) {
    if (!this->initial_state_->IsInitialized()) return false;
  }
  return true;
}

void PlanningProblem::Swap(PlanningProblem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningProblem::InternalSwap(PlanningProblem* other) {
  using std::swap;
  CastToBase(&goal_states_)->InternalSwap(CastToBase(&other->goal_states_));
  swap(initial_state_, other->initial_state_);
  swap(planning_problem_id_, other->planning_problem_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningProblem::GetMetadata() const {
  protobuf_planning_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::GoalState* Arena::CreateMaybeMessage< ::commonroad::GoalState >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::GoalState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::PlanningProblem* Arena::CreateMaybeMessage< ::commonroad::PlanningProblem >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::PlanningProblem >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
