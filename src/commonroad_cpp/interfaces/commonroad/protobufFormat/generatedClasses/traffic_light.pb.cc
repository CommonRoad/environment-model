// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_traffic_5flight_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5flight_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CycleElement;
}  // namespace protobuf_traffic_5flight_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class TrafficLightStateEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightStateEnum>
      _instance;
} _TrafficLightStateEnum_default_instance_;
class TrafficLightDirectionEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDirectionEnum>
      _instance;
} _TrafficLightDirectionEnum_default_instance_;
class CycleElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CycleElement>
      _instance;
} _CycleElement_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
}  // namespace commonroad
namespace protobuf_traffic_5flight_2eproto {
static void InitDefaultsTrafficLightStateEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficLightStateEnum_default_instance_;
    new (ptr) ::commonroad::TrafficLightStateEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficLightStateEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightStateEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightStateEnum}, {}};

static void InitDefaultsTrafficLightDirectionEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficLightDirectionEnum_default_instance_;
    new (ptr) ::commonroad::TrafficLightDirectionEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficLightDirectionEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightDirectionEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightDirectionEnum}, {}};

static void InitDefaultsCycleElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_CycleElement_default_instance_;
    new (ptr) ::commonroad::CycleElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::CycleElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CycleElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCycleElement}, {}};

static void InitDefaultsTrafficLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficLight_default_instance_;
    new (ptr) ::commonroad::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficLight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficLight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficLight}, {
      &protobuf_traffic_5flight_2eproto::scc_info_CycleElement.base,
      &protobuf_util_2eproto::scc_info_Point.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightStateEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightDirectionEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CycleElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLight.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLightStateEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLightStateEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLightDirectionEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLightDirectionEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CycleElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CycleElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CycleElement, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::CycleElement, color_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, traffic_light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, cycle_elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficLight, active_),
  1,
  ~0u,
  0,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::commonroad::TrafficLightStateEnum)},
  { 5, 10, sizeof(::commonroad::TrafficLightDirectionEnum)},
  { 10, 17, sizeof(::commonroad::CycleElement)},
  { 19, 30, sizeof(::commonroad::TrafficLight)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficLightStateEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficLightDirectionEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_CycleElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficLight_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "traffic_light.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023traffic_light.proto\022\ncommonroad\032\nutil."
      "proto\"j\n\025TrafficLightStateEnum\"Q\n\021Traffi"
      "cLightState\022\007\n\003RED\020\000\022\016\n\nRED_YELLOW\020\001\022\t\n\005"
      "GREEN\020\002\022\n\n\006YELLOW\020\003\022\014\n\010INACTIVE\020\004\"\227\001\n\031Tr"
      "afficLightDirectionEnum\"z\n\025TrafficLightD"
      "irection\022\t\n\005RIGHT\020\000\022\014\n\010STRAIGHT\020\001\022\010\n\004LEF"
      "T\020\002\022\021\n\rLEFT_STRAIGHT\020\003\022\022\n\016STRAIGHT_RIGHT"
      "\020\004\022\016\n\nLEFT_RIGHT\020\005\022\007\n\003ALL\020\006\"d\n\014CycleElem"
      "ent\022\020\n\010duration\030\001 \002(\r\022B\n\005color\030\002 \002(\01623.c"
      "ommonroad.TrafficLightStateEnum.TrafficL"
      "ightState\"\364\001\n\014TrafficLight\022\030\n\020traffic_li"
      "ght_id\030\001 \002(\r\0220\n\016cycle_elements\030\002 \003(\0132\030.c"
      "ommonroad.CycleElement\022#\n\010position\030\003 \001(\013"
      "2\021.commonroad.Point\022\023\n\013time_offset\030\004 \001(\r"
      "\022N\n\tdirection\030\005 \001(\0162;.commonroad.Traffic"
      "LightDirectionEnum.TrafficLightDirection"
      "\022\016\n\006active\030\006 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic_light.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_traffic_5flight_2eproto
namespace commonroad {
const ::google::protobuf::EnumDescriptor* TrafficLightStateEnum_TrafficLightState_descriptor() {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5flight_2eproto::file_level_enum_descriptors[0];
}
bool TrafficLightStateEnum_TrafficLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::RED;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::RED_YELLOW;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::GREEN;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::YELLOW;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::INACTIVE;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::TrafficLightState_MIN;
const TrafficLightStateEnum_TrafficLightState TrafficLightStateEnum::TrafficLightState_MAX;
const int TrafficLightStateEnum::TrafficLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLightDirectionEnum_TrafficLightDirection_descriptor() {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5flight_2eproto::file_level_enum_descriptors[1];
}
bool TrafficLightDirectionEnum_TrafficLightDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::RIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::STRAIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::LEFT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::LEFT_STRAIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::STRAIGHT_RIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::LEFT_RIGHT;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::ALL;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::TrafficLightDirection_MIN;
const TrafficLightDirectionEnum_TrafficLightDirection TrafficLightDirectionEnum::TrafficLightDirection_MAX;
const int TrafficLightDirectionEnum::TrafficLightDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficLightStateEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightStateEnum::TrafficLightStateEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5flight_2eproto::scc_info_TrafficLightStateEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficLightStateEnum)
}
TrafficLightStateEnum::TrafficLightStateEnum(const TrafficLightStateEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficLightStateEnum)
}

void TrafficLightStateEnum::SharedCtor() {
}

TrafficLightStateEnum::~TrafficLightStateEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficLightStateEnum)
  SharedDtor();
}

void TrafficLightStateEnum::SharedDtor() {
}

void TrafficLightStateEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightStateEnum::descriptor() {
  ::protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightStateEnum& TrafficLightStateEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5flight_2eproto::scc_info_TrafficLightStateEnum.base);
  return *internal_default_instance();
}


void TrafficLightStateEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficLightStateEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightStateEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficLightStateEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficLightStateEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficLightStateEnum)
  return false;
#undef DO_
}

void TrafficLightStateEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficLightStateEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficLightStateEnum)
}

::google::protobuf::uint8* TrafficLightStateEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficLightStateEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficLightStateEnum)
  return target;
}

size_t TrafficLightStateEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficLightStateEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightStateEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficLightStateEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightStateEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightStateEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficLightStateEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficLightStateEnum)
    MergeFrom(*source);
  }
}

void TrafficLightStateEnum::MergeFrom(const TrafficLightStateEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficLightStateEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficLightStateEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficLightStateEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightStateEnum::CopyFrom(const TrafficLightStateEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficLightStateEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightStateEnum::IsInitialized() const {
  return true;
}

void TrafficLightStateEnum::Swap(TrafficLightStateEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightStateEnum::InternalSwap(TrafficLightStateEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightStateEnum::GetMetadata() const {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightDirectionEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDirectionEnum::TrafficLightDirectionEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5flight_2eproto::scc_info_TrafficLightDirectionEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficLightDirectionEnum)
}
TrafficLightDirectionEnum::TrafficLightDirectionEnum(const TrafficLightDirectionEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficLightDirectionEnum)
}

void TrafficLightDirectionEnum::SharedCtor() {
}

TrafficLightDirectionEnum::~TrafficLightDirectionEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficLightDirectionEnum)
  SharedDtor();
}

void TrafficLightDirectionEnum::SharedDtor() {
}

void TrafficLightDirectionEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightDirectionEnum::descriptor() {
  ::protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDirectionEnum& TrafficLightDirectionEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5flight_2eproto::scc_info_TrafficLightDirectionEnum.base);
  return *internal_default_instance();
}


void TrafficLightDirectionEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficLightDirectionEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDirectionEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficLightDirectionEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficLightDirectionEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficLightDirectionEnum)
  return false;
#undef DO_
}

void TrafficLightDirectionEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficLightDirectionEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficLightDirectionEnum)
}

::google::protobuf::uint8* TrafficLightDirectionEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficLightDirectionEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficLightDirectionEnum)
  return target;
}

size_t TrafficLightDirectionEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficLightDirectionEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDirectionEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficLightDirectionEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDirectionEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDirectionEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficLightDirectionEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficLightDirectionEnum)
    MergeFrom(*source);
  }
}

void TrafficLightDirectionEnum::MergeFrom(const TrafficLightDirectionEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficLightDirectionEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficLightDirectionEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficLightDirectionEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDirectionEnum::CopyFrom(const TrafficLightDirectionEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficLightDirectionEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDirectionEnum::IsInitialized() const {
  return true;
}

void TrafficLightDirectionEnum::Swap(TrafficLightDirectionEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDirectionEnum::InternalSwap(TrafficLightDirectionEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightDirectionEnum::GetMetadata() const {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CycleElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CycleElement::kDurationFieldNumber;
const int CycleElement::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CycleElement::CycleElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5flight_2eproto::scc_info_CycleElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.CycleElement)
}
CycleElement::CycleElement(const CycleElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:commonroad.CycleElement)
}

void CycleElement::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(color_));
}

CycleElement::~CycleElement() {
  // @@protoc_insertion_point(destructor:commonroad.CycleElement)
  SharedDtor();
}

void CycleElement::SharedDtor() {
}

void CycleElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CycleElement::descriptor() {
  ::protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CycleElement& CycleElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5flight_2eproto::scc_info_CycleElement.base);
  return *internal_default_instance();
}


void CycleElement::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.CycleElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CycleElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.CycleElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficLightStateEnum_TrafficLightState_IsValid(value)) {
            set_color(static_cast< ::commonroad::TrafficLightStateEnum_TrafficLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.CycleElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.CycleElement)
  return false;
#undef DO_
}

void CycleElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.CycleElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.CycleElement)
}

::google::protobuf::uint8* CycleElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.CycleElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.CycleElement)
  return target;
}

size_t CycleElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.CycleElement)
  size_t total_size = 0;

  if (has_duration()) {
    // required uint32 duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  if (has_color()) {
    // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  return total_size;
}
size_t CycleElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.CycleElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());

    // required .commonroad.TrafficLightStateEnum.TrafficLightState color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CycleElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.CycleElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CycleElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CycleElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.CycleElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.CycleElement)
    MergeFrom(*source);
  }
}

void CycleElement::MergeFrom(const CycleElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.CycleElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CycleElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.CycleElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CycleElement::CopyFrom(const CycleElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.CycleElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CycleElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CycleElement::Swap(CycleElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CycleElement::InternalSwap(CycleElement* other) {
  using std::swap;
  swap(duration_, other->duration_);
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CycleElement::GetMetadata() const {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::commonroad::_TrafficLight_default_instance_._instance.get_mutable()->position_ = const_cast< ::commonroad::Point*>(
      ::commonroad::Point::internal_default_instance());
}
void TrafficLight::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kTrafficLightIdFieldNumber;
const int TrafficLight::kCycleElementsFieldNumber;
const int TrafficLight::kPositionFieldNumber;
const int TrafficLight::kTimeOffsetFieldNumber;
const int TrafficLight::kDirectionFieldNumber;
const int TrafficLight::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5flight_2eproto::scc_info_TrafficLight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cycle_elements_(from.cycle_elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::commonroad::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&traffic_light_id_, &from.traffic_light_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&traffic_light_id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&position_)) + sizeof(active_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5flight_2eproto::scc_info_TrafficLight.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cycle_elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&traffic_light_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&traffic_light_id_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficLight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 traffic_light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_traffic_light_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traffic_light_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.CycleElement cycle_elements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cycle_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Point position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficLightDirectionEnum_TrafficLightDirection_IsValid(value)) {
            set_direction(static_cast< ::commonroad::TrafficLightDirectionEnum_TrafficLightDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 traffic_light_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->traffic_light_id(), output);
  }

  // repeated .commonroad.CycleElement cycle_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cycle_elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cycle_elements(static_cast<int>(i)),
      output);
  }

  // optional .commonroad.Point position = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position(), output);
  }

  // optional uint32 time_offset = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_offset(), output);
  }

  // optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->direction(), output);
  }

  // optional bool active = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 traffic_light_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->traffic_light_id(), target);
  }

  // repeated .commonroad.CycleElement cycle_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cycle_elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cycle_elements(static_cast<int>(i)), deterministic, target);
  }

  // optional .commonroad.Point position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position(), deterministic, target);
  }

  // optional uint32 time_offset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_offset(), target);
  }

  // optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->direction(), target);
  }

  // optional bool active = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 traffic_light_id = 1;
  if (has_traffic_light_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->traffic_light_id());
  }
  // repeated .commonroad.CycleElement cycle_elements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cycle_elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cycle_elements(static_cast<int>(i)));
    }
  }

  // optional .commonroad.Point position = 3;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 time_offset = 4;
    if (has_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_offset());
    }

    // optional .commonroad.TrafficLightDirectionEnum.TrafficLightDirection direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional bool active = 6;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cycle_elements_.MergeFrom(from.cycle_elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::commonroad::Point::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      traffic_light_id_ = from.traffic_light_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_offset_ = from.time_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cycle_elements())) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  CastToBase(&cycle_elements_)->InternalSwap(CastToBase(&other->cycle_elements_));
  swap(position_, other->position_);
  swap(traffic_light_id_, other->traffic_light_id_);
  swap(time_offset_, other->time_offset_);
  swap(direction_, other->direction_);
  swap(active_, other->active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_traffic_5flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5flight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficLightStateEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficLightStateEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficLightStateEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficLightDirectionEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficLightDirectionEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficLightDirectionEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::CycleElement* Arena::CreateMaybeMessage< ::commonroad::CycleElement >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::CycleElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficLight* Arena::CreateMaybeMessage< ::commonroad::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficLight >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
