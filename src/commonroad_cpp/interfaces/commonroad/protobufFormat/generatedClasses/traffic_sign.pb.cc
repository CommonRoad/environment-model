// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_sign.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/traffic_sign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_traffic_5fsign_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_5fsign_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignElement;
}  // namespace protobuf_traffic_5fsign_2eproto
namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class TrafficSignIDGermanyEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDGermanyEnum>
      _instance;
} _TrafficSignIDGermanyEnum_default_instance_;
class TrafficSignIDZamundaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDZamundaEnum>
      _instance;
} _TrafficSignIDZamundaEnum_default_instance_;
class TrafficSignIDUsaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDUsaEnum>
      _instance;
} _TrafficSignIDUsaEnum_default_instance_;
class TrafficSignIDChinaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDChinaEnum>
      _instance;
} _TrafficSignIDChinaEnum_default_instance_;
class TrafficSignIDSpainEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDSpainEnum>
      _instance;
} _TrafficSignIDSpainEnum_default_instance_;
class TrafficSignIDRussiaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDRussiaEnum>
      _instance;
} _TrafficSignIDRussiaEnum_default_instance_;
class TrafficSignIDArgentinaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDArgentinaEnum>
      _instance;
} _TrafficSignIDArgentinaEnum_default_instance_;
class TrafficSignIDBelgiumEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDBelgiumEnum>
      _instance;
} _TrafficSignIDBelgiumEnum_default_instance_;
class TrafficSignIDFranceEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDFranceEnum>
      _instance;
} _TrafficSignIDFranceEnum_default_instance_;
class TrafficSignIDGreeceEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDGreeceEnum>
      _instance;
} _TrafficSignIDGreeceEnum_default_instance_;
class TrafficSignIDCroatiaEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDCroatiaEnum>
      _instance;
} _TrafficSignIDCroatiaEnum_default_instance_;
class TrafficSignIDItalyEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDItalyEnum>
      _instance;
} _TrafficSignIDItalyEnum_default_instance_;
class TrafficSignIDPuertoRicoEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignIDPuertoRicoEnum>
      _instance;
} _TrafficSignIDPuertoRicoEnum_default_instance_;
class TrafficSignElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignElement>
      _instance;
  int germany_element_id_;
  int zamunda_element_id_;
  int usa_element_id_;
  int china_element_id_;
  int spain_element_id_;
  int russia_element_id_;
  int argentina_element_id_;
  int belgium_element_id_;
  int france_element_id_;
  int greece_element_id_;
  int croatia_element_id_;
  int italy_element_id_;
  int puerto_rico_element_id_;
} _TrafficSignElement_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign>
      _instance;
} _TrafficSign_default_instance_;
}  // namespace commonroad
namespace protobuf_traffic_5fsign_2eproto {
static void InitDefaultsTrafficSignIDGermanyEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDGermanyEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDGermanyEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDGermanyEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDGermanyEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDGermanyEnum}, {}};

static void InitDefaultsTrafficSignIDZamundaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDZamundaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDZamundaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDZamundaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDZamundaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDZamundaEnum}, {}};

static void InitDefaultsTrafficSignIDUsaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDUsaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDUsaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDUsaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDUsaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDUsaEnum}, {}};

static void InitDefaultsTrafficSignIDChinaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDChinaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDChinaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDChinaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDChinaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDChinaEnum}, {}};

static void InitDefaultsTrafficSignIDSpainEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDSpainEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDSpainEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDSpainEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDSpainEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDSpainEnum}, {}};

static void InitDefaultsTrafficSignIDRussiaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDRussiaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDRussiaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDRussiaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDRussiaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDRussiaEnum}, {}};

static void InitDefaultsTrafficSignIDArgentinaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDArgentinaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDArgentinaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDArgentinaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDArgentinaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDArgentinaEnum}, {}};

static void InitDefaultsTrafficSignIDBelgiumEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDBelgiumEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDBelgiumEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDBelgiumEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDBelgiumEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDBelgiumEnum}, {}};

static void InitDefaultsTrafficSignIDFranceEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDFranceEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDFranceEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDFranceEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDFranceEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDFranceEnum}, {}};

static void InitDefaultsTrafficSignIDGreeceEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDGreeceEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDGreeceEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDGreeceEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDGreeceEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDGreeceEnum}, {}};

static void InitDefaultsTrafficSignIDCroatiaEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDCroatiaEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDCroatiaEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDCroatiaEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDCroatiaEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDCroatiaEnum}, {}};

static void InitDefaultsTrafficSignIDItalyEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDItalyEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDItalyEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDItalyEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDItalyEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDItalyEnum}, {}};

static void InitDefaultsTrafficSignIDPuertoRicoEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignIDPuertoRicoEnum_default_instance_;
    new (ptr) ::commonroad::TrafficSignIDPuertoRicoEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignIDPuertoRicoEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignIDPuertoRicoEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignIDPuertoRicoEnum}, {}};

static void InitDefaultsTrafficSignElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSignElement_default_instance_;
    new (ptr) ::commonroad::TrafficSignElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSignElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficSignElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficSignElement}, {}};

static void InitDefaultsTrafficSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TrafficSign_default_instance_;
    new (ptr) ::commonroad::TrafficSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TrafficSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficSign}, {
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignElement.base,
      &protobuf_util_2eproto::scc_info_Point.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDGermanyEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDZamundaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDUsaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDChinaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDSpainEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDRussiaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDArgentinaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDBelgiumEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDFranceEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDGreeceEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDCroatiaEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDItalyEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignIDPuertoRicoEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign.base);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDGermanyEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDGermanyEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDZamundaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDZamundaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDUsaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDUsaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDChinaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDChinaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDSpainEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDSpainEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDRussiaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDRussiaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDArgentinaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDArgentinaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDBelgiumEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDBelgiumEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDFranceEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDFranceEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDGreeceEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDGreeceEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDCroatiaEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDCroatiaEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDItalyEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDItalyEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDPuertoRicoEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignIDPuertoRicoEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignElement, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignElement, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, germany_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, zamunda_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, usa_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, china_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, spain_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, russia_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, argentina_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, belgium_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, france_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, greece_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, croatia_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, italy_element_id_),
  offsetof(::commonroad::TrafficSignElementDefaultTypeInternal, puerto_rico_element_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignElement, additional_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSignElement, traffic_sign_element_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, traffic_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, traffic_sign_elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, first_occurrences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TrafficSign, virtual__),
  1,
  ~0u,
  ~0u,
  0,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::commonroad::TrafficSignIDGermanyEnum)},
  { 5, 10, sizeof(::commonroad::TrafficSignIDZamundaEnum)},
  { 10, 15, sizeof(::commonroad::TrafficSignIDUsaEnum)},
  { 15, 20, sizeof(::commonroad::TrafficSignIDChinaEnum)},
  { 20, 25, sizeof(::commonroad::TrafficSignIDSpainEnum)},
  { 25, 30, sizeof(::commonroad::TrafficSignIDRussiaEnum)},
  { 30, 35, sizeof(::commonroad::TrafficSignIDArgentinaEnum)},
  { 35, 40, sizeof(::commonroad::TrafficSignIDBelgiumEnum)},
  { 40, 45, sizeof(::commonroad::TrafficSignIDFranceEnum)},
  { 45, 50, sizeof(::commonroad::TrafficSignIDGreeceEnum)},
  { 50, 55, sizeof(::commonroad::TrafficSignIDCroatiaEnum)},
  { 55, 60, sizeof(::commonroad::TrafficSignIDItalyEnum)},
  { 60, 65, sizeof(::commonroad::TrafficSignIDPuertoRicoEnum)},
  { 65, 85, sizeof(::commonroad::TrafficSignElement)},
  { 99, 109, sizeof(::commonroad::TrafficSign)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDGermanyEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDZamundaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDUsaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDChinaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDSpainEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDRussiaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDArgentinaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDBelgiumEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDFranceEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDGreeceEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDCroatiaEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDItalyEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignIDPuertoRicoEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSignElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TrafficSign_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "traffic_sign.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022traffic_sign.proto\022\ncommonroad\032\nutil.p"
      "roto\"\3079\n\030TrafficSignIDGermanyEnum\"\2529\n\024Tr"
      "afficSignIDGermany\022\027\n\023WARNING_DANGER_SPO"
      "T\020\000\022\035\n\031WARNING_RIGHT_BEFORE_LEFT\020\001\022\026\n\022WA"
      "RNING_LEFT_CURVE\020\002\022\027\n\023WARNING_RIGHT_CURV"
      "E\020\003\022 \n\034WARNING_STEEP_HILL_DOWNWARDS\020\004\022\031\n"
      "\025WARNING_SLIPPERY_ROAD\020\005\022\035\n\031WARNING_CONS"
      "TRUCTION_SITE\020\006\022!\n\035WARNING_TRAFFIC_QUEUE"
      "S_LIKELY\020\007\022\034\n\030WARNING_ONCOMING_TRAFFIC\020\010"
      "\022 \n\034WARNING_TRAFFIC_LIGHTS_AHEAD\020\t\022\035\n\031WA"
      "RNING_PEDESTRIANS_RIGHT\020\n\022\034\n\030WARNING_PED"
      "ESTRIANS_LEFT\020\013\022\034\n\030WARNING_CROSSING_CYCL"
      "IST\020\014\022!\n\035WARNING_ANIMAL_CROSSING_RIGHT\020\r"
      "\022\030\n\024WARNING_LOOSE_GRAVEL\020\016\022\013\n\007RAILWAY\020\017\022"
      "\t\n\005YIELD\020\020\022\010\n\004STOP\020\021\022\037\n\033PRIORITY_OPPOSIT"
      "E_DIRECTION\020\022\022\024\n\020TURN_RIGHT_AHEAD\020\023\022\023\n\017T"
      "URN_LEFT_AHEAD\020\024\022\027\n\023KEEP_STRAIGHT_AHEAD\020"
      "\025\022\036\n\032PRESCRIBED_DIRECTION_RIGHT\020\026\022\016\n\nROU"
      "NDABOUT\020\027\022\020\n\014ONEWAY_RIGHT\020\030\022\017\n\013ONEWAY_LE"
      "FT\020\031\022\033\n\027PRESCRIBED_PASSING_LEFT\020\032\022\034\n\030PRE"
      "SCRIBED_PASSING_RIGHT\020\033\022!\n\035DO_NOT_DRIVE_"
      "ON_SHOULDER_LANE\020\034\022(\n$DO_NOT_DRIVE_ON_SH"
      "OULDER_LANE_2_LANE\020\035\022(\n$DO_NOT_DRIVE_ON_"
      "SHOULDER_LANE_3_LANE\020\036\022\014\n\010BUS_STOP\020\037\022\013\n\007"
      "BIKEWAY\020 \022\014\n\010SIDEWALK\020!\022\037\n\033PEDESTRIAN_AN"
      "D_BICYCLE_ROAD\020\"\022\031\n\025PEDESTRIAN_ZONE_STAR"
      "T\020#\022\027\n\023PEDESTRIAN_ZONE_END\020$\022\026\n\022BICYCLE_"
      "ROAD_START\020%\022\024\n\020BICYCLE_ROAD_END\020&\022\013\n\007BU"
      "SLANE\020\'\022\024\n\020BAN_ALL_VEHICLES\020(\022\014\n\010BAN_CAR"
      "S\020)\022\016\n\nBAN_TRUCKS\020*\022\017\n\013BAN_BICYCLE\020+\022\022\n\016"
      "BAN_MOTORCYCLE\020,\022\013\n\007BAN_BUS\020-\022\022\n\016BAN_PED"
      "ESTRIAN\020.\022 \n\034BAN_CAR_TRUCK_BUS_MOTORCYCL"
      "E\020/\022)\n%BAN_VEHICLES_CARRYING_DANGEROUS_G"
      "OODS\0200\022\016\n\nMAX_WEIGHT\0201\022\r\n\tMAX_WIDTH\0202\022\016\n"
      "\nMAX_HEIGHT\0203\022\016\n\nMAX_LENGTH\0204\022\014\n\010NO_ENTR"
      "Y\0205\022\034\n\030ENVIRONMENTAL_ZONE_START\0206\022\032\n\026ENV"
      "IRONMENTAL_ZONE_END\0207\022\n\n\006U_TURN\0208\022\r\n\tMAX"
      "_SPEED\0209\022\030\n\024MAX_SPEED_ZONE_START\020:\022\026\n\022MA"
      "X_SPEED_ZONE_END\020;\022\r\n\tMIN_SPEED\020<\022\027\n\023NO_"
      "OVERTAKING_START\020=\022\036\n\032NO_OVERTAKING_TRUC"
      "KS_START\020>\022\021\n\rMAX_SPEED_END\020\?\022\025\n\021NO_OVER"
      "TAKING_END\020@\022\034\n\030NO_OVERTAKING_TRUCKS_END"
      "\020A\022$\n ALL_MAX_SPEED_AND_OVERTAKING_END\020B"
      "\022\027\n\023NO_STOP_START_RIGHT\020C\022\030\n\024NO_STOP_CEN"
      "TER_RIGHT\020D\022 \n\034RESTRICTED_STOP_CENTER_RI"
      "GHT\020E\022\020\n\014RIGHT_OF_WAY\020F\022\014\n\010PRIORITY\020G\022\032\n"
      "\026PRIORITY_OVER_ONCOMING\020H\022\r\n\tTOWN_SIGN\020I"
      "\022\022\n\016TOWN_SIGN_BACK\020J\022\020\n\014PARKING_AREA\020K\022\025"
      "\n\021PARKING_AREA_LEFT\020L\022\026\n\022PARKING_AREA_RI"
      "GHT\020M\022\033\n\027PARKING_AREA_RIGHT_LEFT\020N\022\035\n\031TR"
      "AFFIC_CALMED_AREA_START\020O\022\033\n\027TRAFFIC_CAL"
      "MED_AREA_END\020P\022\n\n\006TUNNEL\020Q\022\023\n\017EMERYGECNY"
      "_STOP\020R\022\024\n\020INTERSTATE_START\020S\022\022\n\016INTERST"
      "ATE_END\020T\022\021\n\rHIGHWAY_START\020U\022\017\n\013HIGHWAY_"
      "END\020V\022 \n\034HIGHWAY_EXIT_WITH_PLACE_NAME\020W\022"
      "\016\n\nEXIT_ROUTE\020X\022\020\n\014HIGHWAY_EXIT\020Y\022\021\n\rEXI"
      "T_BUILT_UP\020Z\022\020\n\014EXIT_GENERAL\020[\022\030\n\024PEDEST"
      "RIANS_CROSSING\020\\\022\031\n\025WATER_PROTECTION_ZON"
      "E\020]\022\026\n\022TRAFFIC_ASSISTANTS\020^\022\014\n\010DEAD_END\020"
      "_\022\n\n\006POLICE\020`\022\032\n\026EMERGENCY_CALL_STATION\020"
      "a\022\017\n\013GAS_STATION\020b\022\031\n\025CAMP_AND_CARAVAN_S"
      "ITE\020c\022\024\n\020ATTRACTION_POINT\020d\022\023\n\017TOURISTIC"
      "_ROUTE\020e\022\033\n\027NEARBY_ATTRACTION_POINT\020f\022\030\n"
      "\024HIGHWAY_INTERSECTION\020g\022\036\n\032DIRECTION_ARR"
      "OW_SIGN_MULTI\020h\022\037\n\033DIRECTION_ARROW_SIGN_"
      "SINGLE\020i\022\037\n\033DIRECTION_SIGN_CONSOLIDATED\020"
      "j\022\036\n\032EXPRESSWAY_ARROW_DIRECTION\020k\022*\n&ARR"
      "OW_SIGN_POST_POINT_OF_INTEREST_LEFT\020l\022\013\n"
      "\007STATION\020m\022\024\n\020GUIDE_SIGN_TABLE\020n\022\025\n\021ADVA"
      "NCE_DIRECTION\020o\022\023\n\017DIRECTIONS_SIGN\020p\022\"\n\036"
      "EXPRESSWAY_ENTRANCE_DIRECTIONS\020q\022\033\n\027INTE"
      "RSTATE_ANNOUNCEMENT\020r\022 \n\034INTERSTATE_ADVA"
      "NCE_DIRECTION\020s\022 \n\034HIGHWAY_EXIT_AHEAD_10"
      "0_METER\020t\022 \n\034HIGHWAY_EXIT_AHEAD_200_METE"
      "R\020u\022 \n\034HIGHWAY_EXIT_AHEAD_300_METER\020v\022\036\n"
      "\032EXPRESSWAY_EXIT_100_METRES\020w\022\036\n\032EXPRESS"
      "WAY_EXIT_200_METRES\020x\022\036\n\032EXPRESSWAY_EXIT"
      "_300_METRES\020y\022\027\n\023INTERSTATE_DISTANCE\020z\022\021"
      "\n\rDETOUR_SKETCH\020{\022\023\n\017DETOUR_STRAIGHT\020|\022\031"
      "\n\025DETOUR_ON_DEMAND_LEFT\020}\022%\n!DETOUR_ON_D"
      "EMAND_GET_IN_LEFT_LANE\020~\022\'\n#DETOUR_ON_DE"
      "MAND_ANNOUNCEMENT_RIGHT\020\177\022\033\n\026DETOUR_ON_D"
      "EMAND_RIGHT\020\200\001\022\'\n\"DETOUR_ON_DEMAND_GET_I"
      "N_RIGHT_LANE\020\201\001\022%\n DETOUR_ON_DEMAND_STRA"
      "IGHTFORWARD\020\202\001\022%\n TRANSITION_3_LEFT_2_TR"
      "ANSITIONED\020\203\001\022!\n\034TRANSITION_1_LEFT_1_STR"
      "AIGHT\020\204\001\022\027\n\022TRANSITION_3_RIGHT\020\205\001\022%\n LAN"
      "E_BOARD_NO_OPPOSITE_TWO_LANES\020\206\001\022\"\n\035THRE"
      "E_LANES_NO_ONCOMING_LANES\020\207\001\022!\n\034FOUR_LAN"
      "ES_NO_ONCOMING_LANES\020\210\001\022!\n\034FIVE_LANES_NO"
      "_ONCOMING_LANES\020\211\001\022.\n)LANE_BOARD_3_LANES"
      "_NO_OPPOSITE_WITH_SIGNS\020\212\001\022&\n!NARROWING_"
      "LANES_1_LANE_FROM_RIGHT\020\213\001\022%\n NARROWING_"
      "LANES_1_LANE_FROM_LEFT\020\214\001\022(\n#NARROWING_L"
      "ANES_2_LANES_PLUS_1_LEFT\020\215\001\022>\n9FOUR_LANE"
      "S_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TU"
      "RN_RIGHT\020\216\001\022+\n&MERGING_LANES_1_LANE_PLUS"
      "_1_LANE_RIGHT\020\217\001\022\014\n\007BARRIER\020\220\001\022\031\n\024BARRIE"
      "R_GATE_100_800\020\221\001\022\032\n\025BARRIER_GATE_100_12"
      "00\020\222\001\022\032\n\025BARRIER_GATE_100_1600\020\223\001\022\032\n\025BAR"
      "RIER_GATE_250_1600\020\224\001\022\021\n\014BARRIER_GATE\020\225\001"
      "\022+\n&ROAD_WARNING_POST_SCRAPER_BEACON_RIG"
      "HT\020\226\001\022)\n$ROAD_WARNING_POST_ARROW_BEACON_"
      "RIGHT\020\227\001\022*\n%ROAD_WARNING_POST_SCRAPER_BE"
      "ACON_LEFT\020\230\001\0221\n,ROAD_WARNING_POST_SCRAPE"
      "R_BEACON_ARROW_RIGHT\020\231\001\022,\n\'ROAD_WARNING_"
      "POST_GUIDE_UP_THREE_ARROWS\020\232\001\022\037\n\032DIRECTI"
      "ON_SIGN_LEFT_SINGLE\020\233\001\022\036\n\031DIRECTION_SIGN"
      "_LEFT_SMALL\020\234\001\022\037\n\032DIRECTION_SIGN_LEFT_ME"
      "DIUM\020\235\001\022\036\n\031DIRECTION_SIGN_LEFT_LARGE\020\236\001\022"
      " \n\033DIRECTION_SIGN_RIGHT_SINGLE\020\237\001\022\037\n\032DIR"
      "ECTION_SIGN_RIGHT_SMALL\020\240\001\022 \n\033DIRECTION_"
      "SIGN_RIGHT_MEDIUM\020\241\001\022\037\n\032DIRECTION_SIGN_R"
      "IGHT_LARGE\020\242\001\022\030\n\023WARNING_PANEL_RIGHT\020\243\001\022"
      "\027\n\022WARNING_PANEL_LEFT\020\244\001\022!\n\034WARNING_PANE"
      "L_STRAIGHT_BROAD\020\245\001\022 \n\033WARNING_PANEL_STR"
      "AIGHT_HIGH\020\246\001\022\'\n\"GUIDE_SILL_WITH_GUIDE_B"
      "EACON_RIGHT\020\247\001\022\'\n\"GUIDE_RAIL_WITH_GUIDE_"
      "BEACON_RIGHT\020\250\001\022(\n#GUIDE_PANEL_WITH_GUID"
      "E_BEACON_RIGHT\020\251\001\022\020\n\013GREEN_ARROW\020\252\001\022\034\n\027A"
      "DDITION_LEFT_DIRECTION\020\253\001\022\036\n\031ADDITION_LE"
      "FT_DIRECTION_1\020\254\001\022)\n$ADDITION_LEFT_DIREC"
      "TION_DANGER_POINT\020\255\001\022\037\n\032ADDITION_RIGHT_D"
      "IRECTION_1\020\256\001\022*\n%ADDITION_RIGHT_DIRECTIO"
      "N_DANGER_POINT\020\257\001\022(\n#ADDITION_BOTH_DIREC"
      "TIONS_HORIZONTAL\020\260\001\022&\n!ADDITION_BOTH_DIR"
      "ECTIONS_VERTICAL\020\261\001\022 \n\033ADDITION_VALID_FO"
      "R_X_METERS\020\262\001\022$\n\037ADDITION_VALID_FOR_X_KI"
      "LOMETERS\020\263\001\022=\n8ADDITION_LEFT_TURNING_PRI"
      "ORITY_WITH_OPPOSITE_RIGHT_YIELD\020\264\001\022=\n8AD"
      "DITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIG"
      "HT_RIGHT_YIELD\020\265\001\0227\n2ADDITION_LEFT_TURNI"
      "NG_PRIORITY_WITH_OPPOSITE_YIELD\020\266\001\0224\n/AD"
      "DITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_"
      "YIELD\020\267\001\0227\n2ADDITION_LEFT_TRAFFIC_PRIORI"
      "TY_WITH_STRAIGHT_YIELD\020\270\001\022=\n8ADDITION_RI"
      "GHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_"
      "YIELD\020\271\001\022=\n8ADDITION_RIGHT_TRAFFIC_PRIOR"
      "ITY_WITH_STRAIGHT_LEFT_YIELD\020\272\001\0228\n3ADDIT"
      "ION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE"
      "_YIELD\020\273\001\0224\n/ADDITION_RIGHT_TURNING_PRIO"
      "RITY_WITH_LEFT_YIELD\020\274\001\0228\n3ADDITION_RIGH"
      "T_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD\020\275"
      "\001\022\037\n\032ADDITION_VALID_IN_X_METERS\020\276\001\022#\n\036AD"
      "DITION_VALID_IN_X_KILOMETERS\020\277\001\022%\n ADDIT"
      "ION_VALID_IN_200_KILOMETERS\020\300\001\022!\n\034ADDITI"
      "ON_VALID_IN_400_METRES\020\301\001\022!\n\034ADDITION_VA"
      "LID_IN_600_METRES\020\302\001\022#\n\036ADDITION_VALID_I"
      "N_2_KILOMETERS\020\303\001\022\031\n\024ADDITION_OIL_ON_ROA"
      "D\020\304\001\022\023\n\016ADDITION_SMOKE\020\305\001\022\032\n\025ADDITION_LO"
      "OSE_GRAVEL\020\306\001\022 \n\033ADDITION_BUILDING_SITE_"
      "EXIT\020\307\001\022\032\n\025ADDITION_DAMAGED_ROAD\020\311\001\022\030\n\023A"
      "DDITION_DIRTY_ROAD\020\312\001\022!\n\034ADDITION_DANGER"
      "_OF_COLLISION\020\313\001\022\034\n\027ADDITION_TOAD_MIGRAT"
      "ION\020\314\001\022\"\n\035ADDITION_DANGER_OF_CONGESTION\020"
      "\315\001\022*\n%ADDITION_RESTRICTED_VIEW_DUE_TO_TR"
      "EES\020\316\001\022\034\n\027DANGER_INDICATION_SMOKE\020\317\001\022&\n!"
      "ADDITION_CHILDREN_PLAYING_ON_ROAD\020\320\001\022#\n\036"
      "ADDITION_WINTER_SPORTS_ALLOWED\020\321\001\0228\n3ADD"
      "ITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN"
      "_14_DAYS\020\322\001\0228\n3ADDITION_CARAVANS_ALLOWED"
      "_TO_PARK_MORE_THAN_14_DAYS\020\323\001\022\035\n\030ADDITIO"
      "N_ROLLING_HIGHWAY\020\324\001\022\032\n\025ADDITION_LOADING"
      "_AREA\020\325\001\022\021\n\014ADDITION_END\020\326\001\022\036\n\031ADDITION_"
      "GET_OFF_BICYCLES\020\327\001\022\027\n\022ADDITION_NO_MOPED"
      "S\020\330\001\022 \n\033ADDITION_GREEN_WAVE_AT_KM_H\020\331\001\022\036"
      "\n\031ADDITION_STOP_HERE_AT_RED\020\332\001\022\033\n\026ADDITI"
      "ON_NOISE_CONTROL\020\333\001\022\037\n\032ADDITION_INFLOW_R"
      "EGULATION\020\334\001\022\034\n\027ADDITION_SECONDARY_LANE\020"
      "\335\001\022\024\n\017ADDITION_SCHOOL\020\336\001\022\032\n\025ADDITION_KIN"
      "DERGARTEN\020\337\001\022\035\n\030ADDITION_RETIREMENT_HOME"
      "\020\340\001\022\026\n\021ADDITION_HOSPITAL\020\341\001\022!\n\034ADDITION_"
      "RESIDENTS_PERMITTED\020\342\001\022 \n\033ADDITION_BICYC"
      "LES_PERMITTED\020\343\001\022\034\n\027ADDITION_CARS_PERMIT"
      "TED\020\344\001\022#\n\036ADDITION_AGRICULTURE_PERMITTED"
      "\020\345\001\022\036\n\031ADDITION_FOREST_PERMITTED\020\346\001\022*\n%A"
      "DDITION_AGRICULTURE_FOREST_PERMITTED\020\347\001\022"
      "%\n ADDITION_GREEN_STICKER_PERMITTED\020\350\001\022#"
      "\n\036ADDITION_TIME_PERIOD_PERMITTED\020\351\001\0222\n-A"
      "DDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_"
      "TONS\020\352\001\022\037\n\032ADDITION_MIN_MASS_3_5_TONS\020\353\001"
      "\022(\n#ADDITION_NO_WATER_POLLUTANTS_LOADED\020"
      "\354\001\022\032\n\025ALLOWED_MASS_7_5_TONS\020\355\001\022\037\n\032ADDITI"
      "ON_VALID_ON_SHOULDER\020\356\001\022\034\n\027ADDITION_VALI"
      "D_WHEN_WET\020\357\001\022\031\n\024LINE_MARKING_MISSING\020\360\001"
      "\022\014\n\007UNKNOWN\020\361\001\"\3069\n\030TrafficSignIDZamundaE"
      "num\"\2519\n\024TrafficSignIDZamunda\022\027\n\023WARNING_"
      "DANGER_SPOT\020\000\022\035\n\031WARNING_RIGHT_BEFORE_LE"
      "FT\020\001\022\026\n\022WARNING_LEFT_CURVE\020\002\022\027\n\023WARNING_"
      "RIGHT_CURVE\020\003\022 \n\034WARNING_STEEP_HILL_DOWN"
      "WARDS\020\004\022\031\n\025WARNING_SLIPPERY_ROAD\020\005\022\035\n\031WA"
      "RNING_CONSTRUCTION_SITE\020\006\022!\n\035WARNING_TRA"
      "FFIC_QUEUES_LIKELY\020\007\022\034\n\030WARNING_ONCOMING"
      "_TRAFFIC\020\010\022 \n\034WARNING_TRAFFIC_LIGHTS_AHE"
      "AD\020\t\022\035\n\031WARNING_PEDESTRIANS_RIGHT\020\n\022\034\n\030W"
      "ARNING_PEDESTRIANS_LEFT\020\013\022\034\n\030WARNING_CRO"
      "SSING_CYCLIST\020\014\022!\n\035WARNING_ANIMAL_CROSSI"
      "NG_RIGHT\020\r\022\030\n\024WARNING_LOOSE_GRAVEL\020\016\022\013\n\007"
      "RAILWAY\020\017\022\t\n\005YIELD\020\020\022\010\n\004STOP\020\021\022\037\n\033PRIORI"
      "TY_OPPOSITE_DIRECTION\020\022\022\024\n\020TURN_RIGHT_AH"
      "EAD\020\023\022\023\n\017TURN_LEFT_AHEAD\020\024\022\027\n\023KEEP_STRAI"
      "GHT_AHEAD\020\025\022\036\n\032PRESCRIBED_DIRECTION_RIGH"
      "T\020\026\022\016\n\nROUNDABOUT\020\027\022\020\n\014ONEWAY_RIGHT\020\030\022\017\n"
      "\013ONEWAY_LEFT\020\031\022\033\n\027PRESCRIBED_PASSING_LEF"
      "T\020\032\022\034\n\030PRESCRIBED_PASSING_RIGHT\020\033\022!\n\035DO_"
      "NOT_DRIVE_ON_SHOULDER_LANE\020\034\022(\n$DO_NOT_D"
      "RIVE_ON_SHOULDER_LANE_2_LANE\020\035\022(\n$DO_NOT"
      "_DRIVE_ON_SHOULDER_LANE_3_LANE\020\036\022\014\n\010BUS_"
      "STOP\020\037\022\013\n\007BIKEWAY\020 \022\014\n\010SIDEWALK\020!\022\037\n\033PED"
      "ESTRIAN_AND_BICYCLE_ROAD\020\"\022\031\n\025PEDESTRIAN"
      "_ZONE_START\020#\022\027\n\023PEDESTRIAN_ZONE_END\020$\022\026"
      "\n\022BICYCLE_ROAD_START\020%\022\024\n\020BICYCLE_ROAD_E"
      "ND\020&\022\013\n\007BUSLANE\020\'\022\024\n\020BAN_ALL_VEHICLES\020(\022"
      "\014\n\010BAN_CARS\020)\022\016\n\nBAN_TRUCKS\020*\022\017\n\013BAN_BIC"
      "YCLE\020+\022\022\n\016BAN_MOTORCYCLE\020,\022\013\n\007BAN_BUS\020-\022"
      "\022\n\016BAN_PEDESTRIAN\020.\022 \n\034BAN_CAR_TRUCK_BUS"
      "_MOTORCYCLE\020/\022)\n%BAN_VEHICLES_CARRYING_D"
      "ANGEROUS_GOODS\0200\022\016\n\nMAX_WEIGHT\0201\022\r\n\tMAX_"
      "WIDTH\0202\022\016\n\nMAX_HEIGHT\0203\022\016\n\nMAX_LENGTH\0204\022"
      "\014\n\010NO_ENTRY\0205\022\034\n\030ENVIRONMENTAL_ZONE_STAR"
      "T\0206\022\032\n\026ENVIRONMENTAL_ZONE_END\0207\022\n\n\006U_TUR"
      "N\0208\022\r\n\tMAX_SPEED\0209\022\030\n\024MAX_SPEED_ZONE_STA"
      "RT\020:\022\026\n\022MAX_SPEED_ZONE_END\020;\022\r\n\tMIN_SPEE"
      "D\020<\022\027\n\023NO_OVERTAKING_START\020=\022\036\n\032NO_OVERT"
      "AKING_TRUCKS_START\020>\022\021\n\rMAX_SPEED_END\020\?\022"
      "\025\n\021NO_OVERTAKING_END\020@\022\034\n\030NO_OVERTAKING_"
      "TRUCKS_END\020A\022$\n ALL_MAX_SPEED_AND_OVERTA"
      "KING_END\020B\022\027\n\023NO_STOP_START_RIGHT\020C\022\030\n\024N"
      "O_STOP_CENTER_RIGHT\020D\022 \n\034RESTRICTED_STOP"
      "_CENTER_RIGHT\020E\022\020\n\014RIGHT_OF_WAY\020F\022\014\n\010PRI"
      "ORITY\020G\022\032\n\026PRIORITY_OVER_ONCOMING\020H\022\r\n\tT"
      "OWN_SIGN\020I\022\022\n\016TOWN_SIGN_BACK\020J\022\020\n\014PARKIN"
      "G_AREA\020K\022\025\n\021PARKING_AREA_LEFT\020L\022\026\n\022PARKI"
      "NG_AREA_RIGHT\020M\022\033\n\027PARKING_AREA_RIGHT_LE"
      "FT\020N\022\035\n\031TRAFFIC_CALMED_AREA_START\020O\022\033\n\027T"
      "RAFFIC_CALMED_AREA_END\020P\022\n\n\006TUNNEL\020Q\022\022\n\016"
      "EMERGENCY_STOP\020R\022\024\n\020INTERSTATE_START\020S\022\022"
      "\n\016INTERSTATE_END\020T\022\021\n\rHIGHWAY_START\020U\022\017\n"
      "\013HIGHWAY_END\020V\022 \n\034HIGHWAY_EXIT_WITH_PLAC"
      "E_NAME\020W\022\016\n\nEXIT_ROUTE\020X\022\020\n\014HIGHWAY_EXIT"
      "\020Y\022\021\n\rEXIT_BUILT_UP\020Z\022\020\n\014EXIT_GENERAL\020[\022"
      "\030\n\024PEDESTRIANS_CROSSING\020\\\022\031\n\025WATER_PROTE"
      "CTION_ZONE\020]\022\026\n\022TRAFFIC_ASSISTANTS\020^\022\014\n\010"
      "DEAD_END\020_\022\n\n\006POLICE\020`\022\032\n\026EMERGENCY_CALL"
      "_STATION\020a\022\017\n\013GAS_STATION\020b\022\031\n\025CAMP_AND_"
      "CARAVAN_SITE\020c\022\024\n\020ATTRACTION_POINT\020d\022\023\n\017"
      "TOURISTIC_ROUTE\020e\022\033\n\027NEARBY_ATTRACTION_P"
      "OINT\020f\022\030\n\024HIGHWAY_INTERSECTION\020g\022\036\n\032DIRE"
      "CTION_ARROW_SIGN_MULTI\020h\022\037\n\033DIRECTION_AR"
      "ROW_SIGN_SINGLE\020i\022\037\n\033DIRECTION_SIGN_CONS"
      "OLIDATED\020j\022\036\n\032EXPRESSWAY_ARROW_DIRECTION"
      "\020k\022*\n&ARROW_SIGN_POST_POINT_OF_INTEREST_"
      "LEFT\020l\022\013\n\007STATION\020m\022\024\n\020GUIDE_SIGN_TABLE\020"
      "n\022\025\n\021ADVANCE_DIRECTION\020o\022\023\n\017DIRECTIONS_S"
      "IGN\020p\022\"\n\036EXPRESSWAY_ENTRANCE_DIRECTIONS\020"
      "q\022\033\n\027INTERSTATE_ANNOUNCEMENT\020r\022 \n\034INTERS"
      "TATE_ADVANCE_DIRECTION\020s\022 \n\034HIGHWAY_EXIT"
      "_AHEAD_100_METER\020t\022 \n\034HIGHWAY_EXIT_AHEAD"
      "_200_METER\020u\022 \n\034HIGHWAY_EXIT_AHEAD_300_M"
      "ETER\020v\022\036\n\032EXPRESSWAY_EXIT_100_METRES\020w\022\036"
      "\n\032EXPRESSWAY_EXIT_200_METRES\020x\022\036\n\032EXPRES"
      "SWAY_EXIT_300_METRES\020y\022\027\n\023INTERSTATE_DIS"
      "TANCE\020z\022\021\n\rDETOUR_SKETCH\020{\022\023\n\017DETOUR_STR"
      "AIGHT\020|\022\031\n\025DETOUR_ON_DEMAND_LEFT\020}\022%\n!DE"
      "TOUR_ON_DEMAND_GET_IN_LEFT_LANE\020~\022\'\n#DET"
      "OUR_ON_DEMAND_ANNOUNCEMENT_RIGHT\020\177\022\033\n\026DE"
      "TOUR_ON_DEMAND_RIGHT\020\200\001\022\'\n\"DETOUR_ON_DEM"
      "AND_GET_IN_RIGHT_LANE\020\201\001\022%\n DETOUR_ON_DE"
      "MAND_STRAIGHTFORWARD\020\202\001\022%\n TRANSITION_3_"
      "LEFT_2_TRANSITIONED\020\203\001\022!\n\034TRANSITION_1_L"
      "EFT_1_STRAIGHT\020\204\001\022\027\n\022TRANSITION_3_RIGHT\020"
      "\205\001\022%\n LANE_BOARD_NO_OPPOSITE_TWO_LANES\020\206"
      "\001\022\"\n\035THREE_LANES_NO_ONCOMING_LANES\020\207\001\022!\n"
      "\034FOUR_LANES_NO_ONCOMING_LANES\020\210\001\022!\n\034FIVE"
      "_LANES_NO_ONCOMING_LANES\020\211\001\022.\n)LANE_BOAR"
      "D_3_LANES_NO_OPPOSITE_WITH_SIGNS\020\212\001\022&\n!N"
      "ARROWING_LANES_1_LANE_FROM_RIGHT\020\213\001\022%\n N"
      "ARROWING_LANES_1_LANE_FROM_LEFT\020\214\001\022(\n#NA"
      "RROWING_LANES_2_LANES_PLUS_1_LEFT\020\215\001\022>\n9"
      "FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT"
      "_LANES_TURN_RIGHT\020\216\001\022+\n&MERGING_LANES_1_"
      "LANE_PLUS_1_LANE_RIGHT\020\217\001\022\014\n\007BARRIER\020\220\001\022"
      "\031\n\024BARRIER_GATE_100_800\020\221\001\022\032\n\025BARRIER_GA"
      "TE_100_1200\020\222\001\022\032\n\025BARRIER_GATE_100_1600\020"
      "\223\001\022\032\n\025BARRIER_GATE_250_1600\020\224\001\022\021\n\014BARRIE"
      "R_GATE\020\225\001\022+\n&ROAD_WARNING_POST_SCRAPER_B"
      "EACON_RIGHT\020\226\001\022)\n$ROAD_WARNING_POST_ARRO"
      "W_BEACON_RIGHT\020\227\001\022*\n%ROAD_WARNING_POST_S"
      "CRAPER_BEACON_LEFT\020\230\001\0221\n,ROAD_WARNING_PO"
      "ST_SCRAPER_BEACON_ARROW_RIGHT\020\231\001\022,\n\'ROAD"
      "_WARNING_POST_GUIDE_UP_THREE_ARROWS\020\232\001\022\037"
      "\n\032DIRECTION_SIGN_LEFT_SINGLE\020\233\001\022\036\n\031DIREC"
      "TION_SIGN_LEFT_SMALL\020\234\001\022\037\n\032DIRECTION_SIG"
      "N_LEFT_MEDIUM\020\235\001\022\036\n\031DIRECTION_SIGN_LEFT_"
      "LARGE\020\236\001\022 \n\033DIRECTION_SIGN_RIGHT_SINGLE\020"
      "\237\001\022\037\n\032DIRECTION_SIGN_RIGHT_SMALL\020\240\001\022 \n\033D"
      "IRECTION_SIGN_RIGHT_MEDIUM\020\241\001\022\037\n\032DIRECTI"
      "ON_SIGN_RIGHT_LARGE\020\242\001\022\030\n\023WARNING_PANEL_"
      "RIGHT\020\243\001\022\027\n\022WARNING_PANEL_LEFT\020\244\001\022!\n\034WAR"
      "NING_PANEL_STRAIGHT_BROAD\020\245\001\022 \n\033WARNING_"
      "PANEL_STRAIGHT_HIGH\020\246\001\022\'\n\"GUIDE_SILL_WIT"
      "H_GUIDE_BEACON_RIGHT\020\247\001\022\'\n\"GUIDE_RAIL_WI"
      "TH_GUIDE_BEACON_RIGHT\020\250\001\022(\n#GUIDE_PANEL_"
      "WITH_GUIDE_BEACON_RIGHT\020\251\001\022\020\n\013GREEN_ARRO"
      "W\020\252\001\022\034\n\027ADDITION_LEFT_DIRECTION\020\253\001\022\036\n\031AD"
      "DITION_LEFT_DIRECTION_1\020\254\001\022)\n$ADDITION_L"
      "EFT_DIRECTION_DANGER_POINT\020\255\001\022\037\n\032ADDITIO"
      "N_RIGHT_DIRECTION_1\020\256\001\022*\n%ADDITION_RIGHT"
      "_DIRECTION_DANGER_POINT\020\257\001\022(\n#ADDITION_B"
      "OTH_DIRECTIONS_HORIZONTAL\020\260\001\022&\n!ADDITION"
      "_BOTH_DIRECTIONS_VERTICAL\020\261\001\022 \n\033ADDITION"
      "_VALID_FOR_X_METERS\020\262\001\022$\n\037ADDITION_VALID"
      "_FOR_X_KILOMETERS\020\263\001\022=\n8ADDITION_LEFT_TU"
      "RNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD"
      "\020\264\001\022=\n8ADDITION_LEFT_TRAFFIC_PRIORITY_WI"
      "TH_STRAIGHT_RIGHT_YIELD\020\265\001\0227\n2ADDITION_L"
      "EFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD"
      "\020\266\001\0224\n/ADDITION_LEFT_TURNING_PRIORITY_WI"
      "TH_RIGHT_YIELD\020\267\001\0227\n2ADDITION_LEFT_TRAFF"
      "IC_PRIORITY_WITH_STRAIGHT_YIELD\020\270\001\022=\n8AD"
      "DITION_RIGHT_TURNING_PRIORITY_WITH_OPPOS"
      "ITE_LEFT_YIELD\020\271\001\022=\n8ADDITION_RIGHT_TRAF"
      "FIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD\020\272\001"
      "\0228\n3ADDITION_RIGHT_TURNING_PRIORITY_WITH"
      "_OPPOSITE_YIELD\020\273\001\0224\n/ADDITION_RIGHT_TUR"
      "NING_PRIORITY_WITH_LEFT_YIELD\020\274\001\0228\n3ADDI"
      "TION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGH"
      "T_YIELD\020\275\001\022\037\n\032ADDITION_VALID_IN_X_METERS"
      "\020\276\001\022#\n\036ADDITION_VALID_IN_X_KILOMETERS\020\277\001"
      "\022%\n ADDITION_VALID_IN_200_KILOMETERS\020\300\001\022"
      "!\n\034ADDITION_VALID_IN_400_METRES\020\301\001\022!\n\034AD"
      "DITION_VALID_IN_600_METRES\020\302\001\022#\n\036ADDITIO"
      "N_VALID_IN_2_KILOMETERS\020\303\001\022\031\n\024ADDITION_O"
      "IL_ON_ROAD\020\304\001\022\023\n\016ADDITION_SMOKE\020\305\001\022\032\n\025AD"
      "DITION_LOOSE_GRAVEL\020\306\001\022 \n\033ADDITION_BUILD"
      "ING_SITE_EXIT\020\307\001\022\032\n\025ADDITION_DAMAGED_ROA"
      "D\020\311\001\022\030\n\023ADDITION_DIRTY_ROAD\020\312\001\022!\n\034ADDITI"
      "ON_DANGER_OF_COLLISION\020\313\001\022\034\n\027ADDITION_TO"
      "AD_MIGRATION\020\314\001\022\"\n\035ADDITION_DANGER_OF_CO"
      "NGESTION\020\315\001\022*\n%ADDITION_RESTRICTED_VIEW_"
      "DUE_TO_TREES\020\316\001\022\034\n\027DANGER_INDICATION_SMO"
      "KE\020\317\001\022&\n!ADDITION_CHILDREN_PLAYING_ON_RO"
      "AD\020\320\001\022#\n\036ADDITION_WINTER_SPORTS_ALLOWED\020"
      "\321\001\0228\n3ADDITION_TRAILERS_ALLOWED_TO_PARK_"
      "MORE_THAN_14_DAYS\020\322\001\0228\n3ADDITION_CARAVAN"
      "S_ALLOWED_TO_PARK_MORE_THAN_14_DAYS\020\323\001\022\035"
      "\n\030ADDITION_ROLLING_HIGHWAY\020\324\001\022\032\n\025ADDITIO"
      "N_LOADING_AREA\020\325\001\022\021\n\014ADDITION_END\020\326\001\022\036\n\031"
      "ADDITION_GET_OFF_BICYCLES\020\327\001\022\027\n\022ADDITION"
      "_NO_MOPEDS\020\330\001\022 \n\033ADDITION_GREEN_WAVE_AT_"
      "KM_H\020\331\001\022\036\n\031ADDITION_STOP_HERE_AT_RED\020\332\001\022"
      "\033\n\026ADDITION_NOISE_CONTROL\020\333\001\022\037\n\032ADDITION"
      "_INFLOW_REGULATION\020\334\001\022\034\n\027ADDITION_SECOND"
      "ARY_LANE\020\335\001\022\024\n\017ADDITION_SCHOOL\020\336\001\022\032\n\025ADD"
      "ITION_KINDERGARTEN\020\337\001\022\035\n\030ADDITION_RETIRE"
      "MENT_HOME\020\340\001\022\026\n\021ADDITION_HOSPITAL\020\341\001\022!\n\034"
      "ADDITION_RESIDENTS_PERMITTED\020\342\001\022 \n\033ADDIT"
      "ION_BICYCLES_PERMITTED\020\343\001\022\034\n\027ADDITION_CA"
      "RS_PERMITTED\020\344\001\022#\n\036ADDITION_AGRICULTURE_"
      "PERMITTED\020\345\001\022\036\n\031ADDITION_FOREST_PERMITTE"
      "D\020\346\001\022*\n%ADDITION_AGRICULTURE_FOREST_PERM"
      "ITTED\020\347\001\022%\n ADDITION_GREEN_STICKER_PERMI"
      "TTED\020\350\001\022#\n\036ADDITION_TIME_PERIOD_PERMITTE"
      "D\020\351\001\0222\n-ADDITION_MOTOR_VEHICLES_ALLOWED_"
      "MASS_3_5_TONS\020\352\001\022\037\n\032ADDITION_MIN_MASS_3_"
      "5_TONS\020\353\001\022(\n#ADDITION_NO_WATER_POLLUTANT"
      "S_LOADED\020\354\001\022\032\n\025ALLOWED_MASS_7_5_TONS\020\355\001\022"
      "\037\n\032ADDITION_VALID_ON_SHOULDER\020\356\001\022\034\n\027ADDI"
      "TION_VALID_WHEN_WET\020\357\001\022\031\n\024LINE_MARKING_M"
      "ISSING\020\360\001\022\014\n\007UNKNOWN\020\361\001\"\202\005\n\024TrafficSignI"
      "DUsaEnum\"\351\004\n\020TrafficSignIDUsa\022\r\n\tMAX_SPE"
      "ED\020\000\022\n\n\006U_TURN\020\001\022\023\n\017ROAD_WORK_AHEAD\020\002\022\027\n"
      "\023NO_PARKING_ANY_TIME\020\003\022\017\n\013NO_STANDING\020\004\022"
      "\021\n\rTOW_AWAY_ZONE\020\005\022\020\n\014ONE_WAY_LEFT\020\006\022\021\n\r"
      "ONE_WAY_RIGHT\020\007\022\020\n\014DO_NOT_ENTER\020\010\022\020\n\014NO_"
      "LEFT_TURN\020\t\022\023\n\017RIGHT_TURN_ONLY\020\n\022\023\n\017TURN"
      "_ONLY_LANES\020\013\022\021\n\rNO_RIGHT_TURN\020\014\022\016\n\nKEEP"
      "_RIGHT\020\r\022\020\n\014SIGNAL_AHEAD\020\016\022\020\n\014LOADING_ZO"
      "NE\020\017\022\016\n\nNO_PARKING\020\020\022\022\n\016LEFT_TURN_ONLY\020\021"
      "\022\027\n\023NO_STRAIGHT_THROUGH\020\022\022\025\n\021LEFT_REVERS"
      "E_TURN\020\023\022\026\n\022PEDESTRIAN_WARNING\020\024\022 \n\034DIAG"
      "ONAL_DOWNWARD_LEFT_ARROW\020\025\022\023\n\017RIGHT_LANE"
      "_ENDS\020\026\022\035\n\031RESERVED_HANDICAP_PARKING\020\027\022\027"
      "\n\023NO_PARKING_BUS_STOP\020\030\022\017\n\013ON_PAVEMENT\020\031"
      "\022\035\n\031DO_NOT_BLOCK_INTERSECTION\020\032\022\026\n\022WARNI"
      "NG_ARROW_LEFT\020\033\022\013\n\007UNKNOWN\020\034\"J\n\026TrafficS"
      "ignIDChinaEnum\"0\n\022TrafficSignIDChina\022\r\n\t"
      "MAX_SPEED\020\000\022\013\n\007UNKNOWN\020\001\"\210\002\n\026TrafficSign"
      "IDSpainEnum\"\355\001\n\022TrafficSignIDSpain\022\t\n\005YI"
      "ELD\020\000\022\010\n\004STOP\020\001\022\024\n\020BAN_ALL_VEHICLES\020\002\022\014\n"
      "\010NO_ENTRY\020\003\022\016\n\nBAN_TRUCKS\020\004\022\016\n\nMAX_WEIGH"
      "T\020\005\022\016\n\nMAX_HEIGHT\020\006\022\r\n\tMAX_SPEED\020\007\022\027\n\023NO"
      "_OVERTAKING_START\020\010\022\017\n\013NO_STOPPING\020\t\022\016\n\n"
      "NO_WAITING\020\n\022\030\n\024PEDESTRIANS_CROSSING\020\013\022\013"
      "\n\007UNKNOWN\020\014\"L\n\027TrafficSignIDRussiaEnum\"1"
      "\n\023TrafficSignIDRussia\022\r\n\tMAX_SPEED\020\000\022\013\n\007"
      "UNKNOWN\020\001\"R\n\032TrafficSignIDArgentinaEnum\""
      "4\n\026TrafficSignIDArgentina\022\r\n\tMAX_SPEED\020\000"
      "\022\013\n\007UNKNOWN\020\001\"N\n\030TrafficSignIDBelgiumEnu"
      "m\"2\n\024TrafficSignIDBelgium\022\r\n\tMAX_SPEED\020\000"
      "\022\013\n\007UNKNOWN\020\001\"L\n\027TrafficSignIDFranceEnum"
      "\"1\n\023TrafficSignIDFrance\022\r\n\tMAX_SPEED\020\000\022\013"
      "\n\007UNKNOWN\020\001\"L\n\027TrafficSignIDGreeceEnum\"1"
      "\n\023TrafficSignIDGreece\022\r\n\tMAX_SPEED\020\000\022\013\n\007"
      "UNKNOWN\020\001\"N\n\030TrafficSignIDCroatiaEnum\"2\n"
      "\024TrafficSignIDCroatia\022\r\n\tMAX_SPEED\020\000\022\013\n\007"
      "UNKNOWN\020\001\"J\n\026TrafficSignIDItalyEnum\"0\n\022T"
      "rafficSignIDItaly\022\r\n\tMAX_SPEED\020\000\022\013\n\007UNKN"
      "OWN\020\001\"T\n\033TrafficSignIDPuertoRicoEnum\"5\n\027"
      "TrafficSignIDPuertoRico\022\r\n\tMAX_SPEED\020\000\022\013"
      "\n\007UNKNOWN\020\001\"\270\t\n\022TrafficSignElement\022W\n\022ge"
      "rmany_element_id\030\001 \001(\01629.commonroad.Traf"
      "ficSignIDGermanyEnum.TrafficSignIDGerman"
      "yH\000\022W\n\022zamunda_element_id\030\002 \001(\01629.common"
      "road.TrafficSignIDZamundaEnum.TrafficSig"
      "nIDZamundaH\000\022K\n\016usa_element_id\030\003 \001(\01621.c"
      "ommonroad.TrafficSignIDUsaEnum.TrafficSi"
      "gnIDUsaH\000\022Q\n\020china_element_id\030\004 \001(\01625.co"
      "mmonroad.TrafficSignIDChinaEnum.TrafficS"
      "ignIDChinaH\000\022Q\n\020spain_element_id\030\005 \001(\01625"
      ".commonroad.TrafficSignIDSpainEnum.Traff"
      "icSignIDSpainH\000\022T\n\021russia_element_id\030\007 \001"
      "(\01627.commonroad.TrafficSignIDRussiaEnum."
      "TrafficSignIDRussiaH\000\022]\n\024argentina_eleme"
      "nt_id\030\010 \001(\0162=.commonroad.TrafficSignIDAr"
      "gentinaEnum.TrafficSignIDArgentinaH\000\022W\n\022"
      "belgium_element_id\030\t \001(\01629.commonroad.Tr"
      "afficSignIDBelgiumEnum.TrafficSignIDBelg"
      "iumH\000\022T\n\021france_element_id\030\n \001(\01627.commo"
      "nroad.TrafficSignIDFranceEnum.TrafficSig"
      "nIDFranceH\000\022T\n\021greece_element_id\030\013 \001(\01627"
      ".commonroad.TrafficSignIDGreeceEnum.Traf"
      "ficSignIDGreeceH\000\022W\n\022croatia_element_id\030"
      "\014 \001(\01629.commonroad.TrafficSignIDCroatiaE"
      "num.TrafficSignIDCroatiaH\000\022Q\n\020italy_elem"
      "ent_id\030\r \001(\01625.commonroad.TrafficSignIDI"
      "talyEnum.TrafficSignIDItalyH\000\022a\n\026puerto_"
      "rico_element_id\030\016 \001(\0162\?.commonroad.Traff"
      "icSignIDPuertoRicoEnum.TrafficSignIDPuer"
      "toRicoH\000\022\031\n\021additional_values\030\017 \003(\tB\031\n\027t"
      "raffic_sign_element_id\"\266\001\n\013TrafficSign\022\027"
      "\n\017traffic_sign_id\030\001 \002(\r\022=\n\025traffic_sign_"
      "elements\030\002 \003(\0132\036.commonroad.TrafficSignE"
      "lement\022\031\n\021first_occurrences\030\003 \003(\r\022#\n\010pos"
      "ition\030\004 \001(\0132\021.commonroad.Point\022\017\n\007virtua"
      "l\030\005 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 17807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic_sign.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_traffic_5fsign_2eproto
namespace commonroad {
const ::google::protobuf::EnumDescriptor* TrafficSignIDGermanyEnum_TrafficSignIDGermany_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[0];
}
bool TrafficSignIDGermanyEnum_TrafficSignIDGermany_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_DANGER_SPOT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_RIGHT_BEFORE_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_LEFT_CURVE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_RIGHT_CURVE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_STEEP_HILL_DOWNWARDS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_SLIPPERY_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_CONSTRUCTION_SITE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_TRAFFIC_QUEUES_LIKELY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_ONCOMING_TRAFFIC;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_TRAFFIC_LIGHTS_AHEAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PEDESTRIANS_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PEDESTRIANS_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_CROSSING_CYCLIST;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_ANIMAL_CROSSING_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_LOOSE_GRAVEL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::RAILWAY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::STOP;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRIORITY_OPPOSITE_DIRECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TURN_RIGHT_AHEAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TURN_LEFT_AHEAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::KEEP_STRAIGHT_AHEAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRESCRIBED_DIRECTION_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROUNDABOUT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ONEWAY_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ONEWAY_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRESCRIBED_PASSING_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRESCRIBED_PASSING_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BUS_STOP;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BIKEWAY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::SIDEWALK;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PEDESTRIAN_AND_BICYCLE_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PEDESTRIAN_ZONE_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PEDESTRIAN_ZONE_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BICYCLE_ROAD_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BICYCLE_ROAD_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BUSLANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_ALL_VEHICLES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_CARS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_TRUCKS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_BICYCLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_MOTORCYCLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_BUS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_PEDESTRIAN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_CAR_TRUCK_BUS_MOTORCYCLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BAN_VEHICLES_CARRYING_DANGEROUS_GOODS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_WEIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_WIDTH;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_HEIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_LENGTH;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_ENTRY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ENVIRONMENTAL_ZONE_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ENVIRONMENTAL_ZONE_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::U_TURN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_SPEED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_SPEED_ZONE_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_SPEED_ZONE_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MIN_SPEED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_OVERTAKING_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_OVERTAKING_TRUCKS_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MAX_SPEED_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_OVERTAKING_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_OVERTAKING_TRUCKS_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ALL_MAX_SPEED_AND_OVERTAKING_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_STOP_START_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NO_STOP_CENTER_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::RESTRICTED_STOP_CENTER_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::RIGHT_OF_WAY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRIORITY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PRIORITY_OVER_ONCOMING;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TOWN_SIGN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TOWN_SIGN_BACK;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PARKING_AREA;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PARKING_AREA_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PARKING_AREA_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PARKING_AREA_RIGHT_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRAFFIC_CALMED_AREA_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRAFFIC_CALMED_AREA_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TUNNEL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EMERYGECNY_STOP;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::INTERSTATE_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::INTERSTATE_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_START;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_EXIT_WITH_PLACE_NAME;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXIT_ROUTE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_EXIT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXIT_BUILT_UP;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXIT_GENERAL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::PEDESTRIANS_CROSSING;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WATER_PROTECTION_ZONE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRAFFIC_ASSISTANTS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DEAD_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::POLICE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EMERGENCY_CALL_STATION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GAS_STATION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::CAMP_AND_CARAVAN_SITE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ATTRACTION_POINT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TOURISTIC_ROUTE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NEARBY_ATTRACTION_POINT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_INTERSECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_ARROW_SIGN_MULTI;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_ARROW_SIGN_SINGLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_CONSOLIDATED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXPRESSWAY_ARROW_DIRECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::STATION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GUIDE_SIGN_TABLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADVANCE_DIRECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTIONS_SIGN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXPRESSWAY_ENTRANCE_DIRECTIONS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::INTERSTATE_ANNOUNCEMENT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::INTERSTATE_ADVANCE_DIRECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_EXIT_AHEAD_100_METER;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_EXIT_AHEAD_200_METER;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::HIGHWAY_EXIT_AHEAD_300_METER;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXPRESSWAY_EXIT_100_METRES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXPRESSWAY_EXIT_200_METRES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::EXPRESSWAY_EXIT_300_METRES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::INTERSTATE_DISTANCE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_SKETCH;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_STRAIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_GET_IN_LEFT_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DETOUR_ON_DEMAND_STRAIGHTFORWARD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRANSITION_3_LEFT_2_TRANSITIONED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRANSITION_1_LEFT_1_STRAIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TRANSITION_3_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::LANE_BOARD_NO_OPPOSITE_TWO_LANES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::THREE_LANES_NO_ONCOMING_LANES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::FOUR_LANES_NO_ONCOMING_LANES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::FIVE_LANES_NO_ONCOMING_LANES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NARROWING_LANES_1_LANE_FROM_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NARROWING_LANES_1_LANE_FROM_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::NARROWING_LANES_2_LANES_PLUS_1_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER_GATE_100_800;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER_GATE_100_1200;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER_GATE_100_1600;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER_GATE_250_1600;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::BARRIER_GATE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROAD_WARNING_POST_ARROW_BEACON_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROAD_WARNING_POST_SCRAPER_BEACON_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_LEFT_SINGLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_LEFT_SMALL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_LEFT_MEDIUM;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_LEFT_LARGE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_RIGHT_SINGLE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_RIGHT_SMALL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_RIGHT_MEDIUM;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DIRECTION_SIGN_RIGHT_LARGE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PANEL_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PANEL_LEFT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PANEL_STRAIGHT_BROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::WARNING_PANEL_STRAIGHT_HIGH;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::GREEN_ARROW;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_DIRECTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_DIRECTION_1;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_DIRECTION_DANGER_POINT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_DIRECTION_1;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_DIRECTION_DANGER_POINT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_BOTH_DIRECTIONS_HORIZONTAL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_BOTH_DIRECTIONS_VERTICAL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_FOR_X_METERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_FOR_X_KILOMETERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_X_METERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_X_KILOMETERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_200_KILOMETERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_400_METRES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_600_METRES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_IN_2_KILOMETERS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_OIL_ON_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_SMOKE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LOOSE_GRAVEL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_BUILDING_SITE_EXIT;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_DAMAGED_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_DIRTY_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_DANGER_OF_COLLISION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_TOAD_MIGRATION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_DANGER_OF_CONGESTION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RESTRICTED_VIEW_DUE_TO_TREES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::DANGER_INDICATION_SMOKE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_CHILDREN_PLAYING_ON_ROAD;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_WINTER_SPORTS_ALLOWED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_ROLLING_HIGHWAY;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_LOADING_AREA;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_END;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_GET_OFF_BICYCLES;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_NO_MOPEDS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_GREEN_WAVE_AT_KM_H;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_STOP_HERE_AT_RED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_NOISE_CONTROL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_INFLOW_REGULATION;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_SECONDARY_LANE;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_SCHOOL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_KINDERGARTEN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RETIREMENT_HOME;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_HOSPITAL;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_RESIDENTS_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_BICYCLES_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_CARS_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_AGRICULTURE_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_FOREST_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_AGRICULTURE_FOREST_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_GREEN_STICKER_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_TIME_PERIOD_PERMITTED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_MIN_MASS_3_5_TONS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_NO_WATER_POLLUTANTS_LOADED;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ALLOWED_MASS_7_5_TONS;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_ON_SHOULDER;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::ADDITION_VALID_WHEN_WET;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::LINE_MARKING_MISSING;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::UNKNOWN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TrafficSignIDGermany_MIN;
const TrafficSignIDGermanyEnum_TrafficSignIDGermany TrafficSignIDGermanyEnum::TrafficSignIDGermany_MAX;
const int TrafficSignIDGermanyEnum::TrafficSignIDGermany_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDZamundaEnum_TrafficSignIDZamunda_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[1];
}
bool TrafficSignIDZamundaEnum_TrafficSignIDZamunda_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_DANGER_SPOT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_RIGHT_BEFORE_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_LEFT_CURVE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_RIGHT_CURVE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_STEEP_HILL_DOWNWARDS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_SLIPPERY_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_CONSTRUCTION_SITE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_TRAFFIC_QUEUES_LIKELY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_ONCOMING_TRAFFIC;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_TRAFFIC_LIGHTS_AHEAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PEDESTRIANS_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PEDESTRIANS_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_CROSSING_CYCLIST;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_ANIMAL_CROSSING_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_LOOSE_GRAVEL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::RAILWAY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::STOP;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRIORITY_OPPOSITE_DIRECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TURN_RIGHT_AHEAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TURN_LEFT_AHEAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::KEEP_STRAIGHT_AHEAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRESCRIBED_DIRECTION_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROUNDABOUT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ONEWAY_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ONEWAY_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRESCRIBED_PASSING_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRESCRIBED_PASSING_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE_2_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DO_NOT_DRIVE_ON_SHOULDER_LANE_3_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BUS_STOP;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BIKEWAY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::SIDEWALK;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PEDESTRIAN_AND_BICYCLE_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PEDESTRIAN_ZONE_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PEDESTRIAN_ZONE_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BICYCLE_ROAD_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BICYCLE_ROAD_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BUSLANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_ALL_VEHICLES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_CARS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_TRUCKS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_BICYCLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_MOTORCYCLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_BUS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_PEDESTRIAN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_CAR_TRUCK_BUS_MOTORCYCLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BAN_VEHICLES_CARRYING_DANGEROUS_GOODS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_WEIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_WIDTH;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_HEIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_LENGTH;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_ENTRY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ENVIRONMENTAL_ZONE_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ENVIRONMENTAL_ZONE_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::U_TURN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_SPEED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_SPEED_ZONE_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_SPEED_ZONE_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MIN_SPEED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_OVERTAKING_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_OVERTAKING_TRUCKS_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MAX_SPEED_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_OVERTAKING_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_OVERTAKING_TRUCKS_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ALL_MAX_SPEED_AND_OVERTAKING_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_STOP_START_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NO_STOP_CENTER_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::RESTRICTED_STOP_CENTER_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::RIGHT_OF_WAY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRIORITY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PRIORITY_OVER_ONCOMING;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TOWN_SIGN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TOWN_SIGN_BACK;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PARKING_AREA;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PARKING_AREA_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PARKING_AREA_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PARKING_AREA_RIGHT_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRAFFIC_CALMED_AREA_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRAFFIC_CALMED_AREA_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TUNNEL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EMERGENCY_STOP;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::INTERSTATE_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::INTERSTATE_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_START;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_EXIT_WITH_PLACE_NAME;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXIT_ROUTE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_EXIT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXIT_BUILT_UP;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXIT_GENERAL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::PEDESTRIANS_CROSSING;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WATER_PROTECTION_ZONE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRAFFIC_ASSISTANTS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DEAD_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::POLICE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EMERGENCY_CALL_STATION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GAS_STATION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::CAMP_AND_CARAVAN_SITE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ATTRACTION_POINT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TOURISTIC_ROUTE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NEARBY_ATTRACTION_POINT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_INTERSECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_ARROW_SIGN_MULTI;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_ARROW_SIGN_SINGLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_CONSOLIDATED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXPRESSWAY_ARROW_DIRECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ARROW_SIGN_POST_POINT_OF_INTEREST_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::STATION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GUIDE_SIGN_TABLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADVANCE_DIRECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTIONS_SIGN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXPRESSWAY_ENTRANCE_DIRECTIONS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::INTERSTATE_ANNOUNCEMENT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::INTERSTATE_ADVANCE_DIRECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_EXIT_AHEAD_100_METER;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_EXIT_AHEAD_200_METER;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::HIGHWAY_EXIT_AHEAD_300_METER;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXPRESSWAY_EXIT_100_METRES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXPRESSWAY_EXIT_200_METRES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::EXPRESSWAY_EXIT_300_METRES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::INTERSTATE_DISTANCE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_SKETCH;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_STRAIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_GET_IN_LEFT_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_ANNOUNCEMENT_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_GET_IN_RIGHT_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DETOUR_ON_DEMAND_STRAIGHTFORWARD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRANSITION_3_LEFT_2_TRANSITIONED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRANSITION_1_LEFT_1_STRAIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TRANSITION_3_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::LANE_BOARD_NO_OPPOSITE_TWO_LANES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::THREE_LANES_NO_ONCOMING_LANES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::FOUR_LANES_NO_ONCOMING_LANES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::FIVE_LANES_NO_ONCOMING_LANES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::LANE_BOARD_3_LANES_NO_OPPOSITE_WITH_SIGNS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NARROWING_LANES_1_LANE_FROM_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NARROWING_LANES_1_LANE_FROM_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::NARROWING_LANES_2_LANES_PLUS_1_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::FOUR_LANES_NO_ONCOMING_TRAFFIC_TWO_RIGHT_LANES_TURN_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::MERGING_LANES_1_LANE_PLUS_1_LANE_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER_GATE_100_800;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER_GATE_100_1200;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER_GATE_100_1600;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER_GATE_250_1600;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::BARRIER_GATE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROAD_WARNING_POST_SCRAPER_BEACON_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROAD_WARNING_POST_ARROW_BEACON_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROAD_WARNING_POST_SCRAPER_BEACON_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROAD_WARNING_POST_SCRAPER_BEACON_ARROW_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ROAD_WARNING_POST_GUIDE_UP_THREE_ARROWS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_LEFT_SINGLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_LEFT_SMALL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_LEFT_MEDIUM;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_LEFT_LARGE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_RIGHT_SINGLE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_RIGHT_SMALL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_RIGHT_MEDIUM;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DIRECTION_SIGN_RIGHT_LARGE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PANEL_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PANEL_LEFT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PANEL_STRAIGHT_BROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::WARNING_PANEL_STRAIGHT_HIGH;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GUIDE_SILL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GUIDE_RAIL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GUIDE_PANEL_WITH_GUIDE_BEACON_RIGHT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::GREEN_ARROW;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_DIRECTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_DIRECTION_1;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_DIRECTION_DANGER_POINT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_DIRECTION_1;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_DIRECTION_DANGER_POINT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_BOTH_DIRECTIONS_HORIZONTAL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_BOTH_DIRECTIONS_VERTICAL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_FOR_X_METERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_FOR_X_KILOMETERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_RIGHT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_RIGHT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_TURNING_PRIORITY_WITH_RIGHT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LEFT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_LEFT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_LEFT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_OPPOSITE_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_TURNING_PRIORITY_WITH_LEFT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RIGHT_TRAFFIC_PRIORITY_WITH_STRAIGHT_YIELD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_X_METERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_X_KILOMETERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_200_KILOMETERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_400_METRES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_600_METRES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_IN_2_KILOMETERS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_OIL_ON_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_SMOKE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LOOSE_GRAVEL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_BUILDING_SITE_EXIT;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_DAMAGED_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_DIRTY_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_DANGER_OF_COLLISION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_TOAD_MIGRATION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_DANGER_OF_CONGESTION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RESTRICTED_VIEW_DUE_TO_TREES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::DANGER_INDICATION_SMOKE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_CHILDREN_PLAYING_ON_ROAD;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_WINTER_SPORTS_ALLOWED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_TRAILERS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_CARAVANS_ALLOWED_TO_PARK_MORE_THAN_14_DAYS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_ROLLING_HIGHWAY;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_LOADING_AREA;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_END;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_GET_OFF_BICYCLES;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_NO_MOPEDS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_GREEN_WAVE_AT_KM_H;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_STOP_HERE_AT_RED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_NOISE_CONTROL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_INFLOW_REGULATION;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_SECONDARY_LANE;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_SCHOOL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_KINDERGARTEN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RETIREMENT_HOME;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_HOSPITAL;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_RESIDENTS_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_BICYCLES_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_CARS_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_AGRICULTURE_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_FOREST_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_AGRICULTURE_FOREST_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_GREEN_STICKER_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_TIME_PERIOD_PERMITTED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_MOTOR_VEHICLES_ALLOWED_MASS_3_5_TONS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_MIN_MASS_3_5_TONS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_NO_WATER_POLLUTANTS_LOADED;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ALLOWED_MASS_7_5_TONS;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_ON_SHOULDER;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::ADDITION_VALID_WHEN_WET;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::LINE_MARKING_MISSING;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::UNKNOWN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TrafficSignIDZamunda_MIN;
const TrafficSignIDZamundaEnum_TrafficSignIDZamunda TrafficSignIDZamundaEnum::TrafficSignIDZamunda_MAX;
const int TrafficSignIDZamundaEnum::TrafficSignIDZamunda_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDUsaEnum_TrafficSignIDUsa_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[2];
}
bool TrafficSignIDUsaEnum_TrafficSignIDUsa_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::MAX_SPEED;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::U_TURN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::ROAD_WORK_AHEAD;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_PARKING_ANY_TIME;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_STANDING;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::TOW_AWAY_ZONE;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::ONE_WAY_LEFT;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::ONE_WAY_RIGHT;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::DO_NOT_ENTER;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_LEFT_TURN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::RIGHT_TURN_ONLY;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::TURN_ONLY_LANES;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_RIGHT_TURN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::KEEP_RIGHT;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::SIGNAL_AHEAD;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::LOADING_ZONE;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_PARKING;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::LEFT_TURN_ONLY;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_STRAIGHT_THROUGH;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::LEFT_REVERSE_TURN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::PEDESTRIAN_WARNING;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::DIAGONAL_DOWNWARD_LEFT_ARROW;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::RIGHT_LANE_ENDS;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::RESERVED_HANDICAP_PARKING;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::NO_PARKING_BUS_STOP;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::ON_PAVEMENT;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::DO_NOT_BLOCK_INTERSECTION;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::WARNING_ARROW_LEFT;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::UNKNOWN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::TrafficSignIDUsa_MIN;
const TrafficSignIDUsaEnum_TrafficSignIDUsa TrafficSignIDUsaEnum::TrafficSignIDUsa_MAX;
const int TrafficSignIDUsaEnum::TrafficSignIDUsa_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDChinaEnum_TrafficSignIDChina_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[3];
}
bool TrafficSignIDChinaEnum_TrafficSignIDChina_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum::MAX_SPEED;
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum::UNKNOWN;
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum::TrafficSignIDChina_MIN;
const TrafficSignIDChinaEnum_TrafficSignIDChina TrafficSignIDChinaEnum::TrafficSignIDChina_MAX;
const int TrafficSignIDChinaEnum::TrafficSignIDChina_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDSpainEnum_TrafficSignIDSpain_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[4];
}
bool TrafficSignIDSpainEnum_TrafficSignIDSpain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::YIELD;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::STOP;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::BAN_ALL_VEHICLES;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::NO_ENTRY;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::BAN_TRUCKS;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::MAX_WEIGHT;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::MAX_HEIGHT;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::MAX_SPEED;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::NO_OVERTAKING_START;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::NO_STOPPING;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::NO_WAITING;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::PEDESTRIANS_CROSSING;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::UNKNOWN;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::TrafficSignIDSpain_MIN;
const TrafficSignIDSpainEnum_TrafficSignIDSpain TrafficSignIDSpainEnum::TrafficSignIDSpain_MAX;
const int TrafficSignIDSpainEnum::TrafficSignIDSpain_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDRussiaEnum_TrafficSignIDRussia_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[5];
}
bool TrafficSignIDRussiaEnum_TrafficSignIDRussia_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum::MAX_SPEED;
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum::UNKNOWN;
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum::TrafficSignIDRussia_MIN;
const TrafficSignIDRussiaEnum_TrafficSignIDRussia TrafficSignIDRussiaEnum::TrafficSignIDRussia_MAX;
const int TrafficSignIDRussiaEnum::TrafficSignIDRussia_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[6];
}
bool TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum::MAX_SPEED;
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum::UNKNOWN;
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum::TrafficSignIDArgentina_MIN;
const TrafficSignIDArgentinaEnum_TrafficSignIDArgentina TrafficSignIDArgentinaEnum::TrafficSignIDArgentina_MAX;
const int TrafficSignIDArgentinaEnum::TrafficSignIDArgentina_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[7];
}
bool TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum::MAX_SPEED;
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum::UNKNOWN;
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum::TrafficSignIDBelgium_MIN;
const TrafficSignIDBelgiumEnum_TrafficSignIDBelgium TrafficSignIDBelgiumEnum::TrafficSignIDBelgium_MAX;
const int TrafficSignIDBelgiumEnum::TrafficSignIDBelgium_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDFranceEnum_TrafficSignIDFrance_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[8];
}
bool TrafficSignIDFranceEnum_TrafficSignIDFrance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum::MAX_SPEED;
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum::UNKNOWN;
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum::TrafficSignIDFrance_MIN;
const TrafficSignIDFranceEnum_TrafficSignIDFrance TrafficSignIDFranceEnum::TrafficSignIDFrance_MAX;
const int TrafficSignIDFranceEnum::TrafficSignIDFrance_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDGreeceEnum_TrafficSignIDGreece_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[9];
}
bool TrafficSignIDGreeceEnum_TrafficSignIDGreece_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum::MAX_SPEED;
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum::UNKNOWN;
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum::TrafficSignIDGreece_MIN;
const TrafficSignIDGreeceEnum_TrafficSignIDGreece TrafficSignIDGreeceEnum::TrafficSignIDGreece_MAX;
const int TrafficSignIDGreeceEnum::TrafficSignIDGreece_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[10];
}
bool TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum::MAX_SPEED;
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum::UNKNOWN;
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum::TrafficSignIDCroatia_MIN;
const TrafficSignIDCroatiaEnum_TrafficSignIDCroatia TrafficSignIDCroatiaEnum::TrafficSignIDCroatia_MAX;
const int TrafficSignIDCroatiaEnum::TrafficSignIDCroatia_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDItalyEnum_TrafficSignIDItaly_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[11];
}
bool TrafficSignIDItalyEnum_TrafficSignIDItaly_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum::MAX_SPEED;
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum::UNKNOWN;
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum::TrafficSignIDItaly_MIN;
const TrafficSignIDItalyEnum_TrafficSignIDItaly TrafficSignIDItalyEnum::TrafficSignIDItaly_MAX;
const int TrafficSignIDItalyEnum::TrafficSignIDItaly_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_descriptor() {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_5fsign_2eproto::file_level_enum_descriptors[12];
}
bool TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum::MAX_SPEED;
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum::UNKNOWN;
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum::TrafficSignIDPuertoRico_MIN;
const TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico TrafficSignIDPuertoRicoEnum::TrafficSignIDPuertoRico_MAX;
const int TrafficSignIDPuertoRicoEnum::TrafficSignIDPuertoRico_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficSignIDGermanyEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDGermanyEnum::TrafficSignIDGermanyEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDGermanyEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDGermanyEnum)
}
TrafficSignIDGermanyEnum::TrafficSignIDGermanyEnum(const TrafficSignIDGermanyEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDGermanyEnum)
}

void TrafficSignIDGermanyEnum::SharedCtor() {
}

TrafficSignIDGermanyEnum::~TrafficSignIDGermanyEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDGermanyEnum)
  SharedDtor();
}

void TrafficSignIDGermanyEnum::SharedDtor() {
}

void TrafficSignIDGermanyEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDGermanyEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDGermanyEnum& TrafficSignIDGermanyEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDGermanyEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDGermanyEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDGermanyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDGermanyEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDGermanyEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDGermanyEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDGermanyEnum)
  return false;
#undef DO_
}

void TrafficSignIDGermanyEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDGermanyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDGermanyEnum)
}

::google::protobuf::uint8* TrafficSignIDGermanyEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDGermanyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDGermanyEnum)
  return target;
}

size_t TrafficSignIDGermanyEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDGermanyEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDGermanyEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDGermanyEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDGermanyEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDGermanyEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDGermanyEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDGermanyEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDGermanyEnum::MergeFrom(const TrafficSignIDGermanyEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDGermanyEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDGermanyEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDGermanyEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDGermanyEnum::CopyFrom(const TrafficSignIDGermanyEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDGermanyEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDGermanyEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDGermanyEnum::Swap(TrafficSignIDGermanyEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDGermanyEnum::InternalSwap(TrafficSignIDGermanyEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDGermanyEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDZamundaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDZamundaEnum::TrafficSignIDZamundaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDZamundaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDZamundaEnum)
}
TrafficSignIDZamundaEnum::TrafficSignIDZamundaEnum(const TrafficSignIDZamundaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDZamundaEnum)
}

void TrafficSignIDZamundaEnum::SharedCtor() {
}

TrafficSignIDZamundaEnum::~TrafficSignIDZamundaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDZamundaEnum)
  SharedDtor();
}

void TrafficSignIDZamundaEnum::SharedDtor() {
}

void TrafficSignIDZamundaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDZamundaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDZamundaEnum& TrafficSignIDZamundaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDZamundaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDZamundaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDZamundaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDZamundaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDZamundaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDZamundaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDZamundaEnum)
  return false;
#undef DO_
}

void TrafficSignIDZamundaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDZamundaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDZamundaEnum)
}

::google::protobuf::uint8* TrafficSignIDZamundaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDZamundaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDZamundaEnum)
  return target;
}

size_t TrafficSignIDZamundaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDZamundaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDZamundaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDZamundaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDZamundaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDZamundaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDZamundaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDZamundaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDZamundaEnum::MergeFrom(const TrafficSignIDZamundaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDZamundaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDZamundaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDZamundaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDZamundaEnum::CopyFrom(const TrafficSignIDZamundaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDZamundaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDZamundaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDZamundaEnum::Swap(TrafficSignIDZamundaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDZamundaEnum::InternalSwap(TrafficSignIDZamundaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDZamundaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDUsaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDUsaEnum::TrafficSignIDUsaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDUsaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDUsaEnum)
}
TrafficSignIDUsaEnum::TrafficSignIDUsaEnum(const TrafficSignIDUsaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDUsaEnum)
}

void TrafficSignIDUsaEnum::SharedCtor() {
}

TrafficSignIDUsaEnum::~TrafficSignIDUsaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDUsaEnum)
  SharedDtor();
}

void TrafficSignIDUsaEnum::SharedDtor() {
}

void TrafficSignIDUsaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDUsaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDUsaEnum& TrafficSignIDUsaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDUsaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDUsaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDUsaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDUsaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDUsaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDUsaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDUsaEnum)
  return false;
#undef DO_
}

void TrafficSignIDUsaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDUsaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDUsaEnum)
}

::google::protobuf::uint8* TrafficSignIDUsaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDUsaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDUsaEnum)
  return target;
}

size_t TrafficSignIDUsaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDUsaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDUsaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDUsaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDUsaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDUsaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDUsaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDUsaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDUsaEnum::MergeFrom(const TrafficSignIDUsaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDUsaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDUsaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDUsaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDUsaEnum::CopyFrom(const TrafficSignIDUsaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDUsaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDUsaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDUsaEnum::Swap(TrafficSignIDUsaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDUsaEnum::InternalSwap(TrafficSignIDUsaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDUsaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDChinaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDChinaEnum::TrafficSignIDChinaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDChinaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDChinaEnum)
}
TrafficSignIDChinaEnum::TrafficSignIDChinaEnum(const TrafficSignIDChinaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDChinaEnum)
}

void TrafficSignIDChinaEnum::SharedCtor() {
}

TrafficSignIDChinaEnum::~TrafficSignIDChinaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDChinaEnum)
  SharedDtor();
}

void TrafficSignIDChinaEnum::SharedDtor() {
}

void TrafficSignIDChinaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDChinaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDChinaEnum& TrafficSignIDChinaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDChinaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDChinaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDChinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDChinaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDChinaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDChinaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDChinaEnum)
  return false;
#undef DO_
}

void TrafficSignIDChinaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDChinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDChinaEnum)
}

::google::protobuf::uint8* TrafficSignIDChinaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDChinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDChinaEnum)
  return target;
}

size_t TrafficSignIDChinaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDChinaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDChinaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDChinaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDChinaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDChinaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDChinaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDChinaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDChinaEnum::MergeFrom(const TrafficSignIDChinaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDChinaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDChinaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDChinaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDChinaEnum::CopyFrom(const TrafficSignIDChinaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDChinaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDChinaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDChinaEnum::Swap(TrafficSignIDChinaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDChinaEnum::InternalSwap(TrafficSignIDChinaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDChinaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDSpainEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDSpainEnum::TrafficSignIDSpainEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDSpainEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDSpainEnum)
}
TrafficSignIDSpainEnum::TrafficSignIDSpainEnum(const TrafficSignIDSpainEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDSpainEnum)
}

void TrafficSignIDSpainEnum::SharedCtor() {
}

TrafficSignIDSpainEnum::~TrafficSignIDSpainEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDSpainEnum)
  SharedDtor();
}

void TrafficSignIDSpainEnum::SharedDtor() {
}

void TrafficSignIDSpainEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDSpainEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDSpainEnum& TrafficSignIDSpainEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDSpainEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDSpainEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDSpainEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDSpainEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDSpainEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDSpainEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDSpainEnum)
  return false;
#undef DO_
}

void TrafficSignIDSpainEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDSpainEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDSpainEnum)
}

::google::protobuf::uint8* TrafficSignIDSpainEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDSpainEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDSpainEnum)
  return target;
}

size_t TrafficSignIDSpainEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDSpainEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDSpainEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDSpainEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDSpainEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDSpainEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDSpainEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDSpainEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDSpainEnum::MergeFrom(const TrafficSignIDSpainEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDSpainEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDSpainEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDSpainEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDSpainEnum::CopyFrom(const TrafficSignIDSpainEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDSpainEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDSpainEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDSpainEnum::Swap(TrafficSignIDSpainEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDSpainEnum::InternalSwap(TrafficSignIDSpainEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDSpainEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDRussiaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDRussiaEnum::TrafficSignIDRussiaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDRussiaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDRussiaEnum)
}
TrafficSignIDRussiaEnum::TrafficSignIDRussiaEnum(const TrafficSignIDRussiaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDRussiaEnum)
}

void TrafficSignIDRussiaEnum::SharedCtor() {
}

TrafficSignIDRussiaEnum::~TrafficSignIDRussiaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDRussiaEnum)
  SharedDtor();
}

void TrafficSignIDRussiaEnum::SharedDtor() {
}

void TrafficSignIDRussiaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDRussiaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDRussiaEnum& TrafficSignIDRussiaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDRussiaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDRussiaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDRussiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDRussiaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDRussiaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDRussiaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDRussiaEnum)
  return false;
#undef DO_
}

void TrafficSignIDRussiaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDRussiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDRussiaEnum)
}

::google::protobuf::uint8* TrafficSignIDRussiaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDRussiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDRussiaEnum)
  return target;
}

size_t TrafficSignIDRussiaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDRussiaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDRussiaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDRussiaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDRussiaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDRussiaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDRussiaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDRussiaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDRussiaEnum::MergeFrom(const TrafficSignIDRussiaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDRussiaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDRussiaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDRussiaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDRussiaEnum::CopyFrom(const TrafficSignIDRussiaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDRussiaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDRussiaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDRussiaEnum::Swap(TrafficSignIDRussiaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDRussiaEnum::InternalSwap(TrafficSignIDRussiaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDRussiaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDArgentinaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDArgentinaEnum::TrafficSignIDArgentinaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDArgentinaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDArgentinaEnum)
}
TrafficSignIDArgentinaEnum::TrafficSignIDArgentinaEnum(const TrafficSignIDArgentinaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDArgentinaEnum)
}

void TrafficSignIDArgentinaEnum::SharedCtor() {
}

TrafficSignIDArgentinaEnum::~TrafficSignIDArgentinaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDArgentinaEnum)
  SharedDtor();
}

void TrafficSignIDArgentinaEnum::SharedDtor() {
}

void TrafficSignIDArgentinaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDArgentinaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDArgentinaEnum& TrafficSignIDArgentinaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDArgentinaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDArgentinaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDArgentinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDArgentinaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDArgentinaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDArgentinaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDArgentinaEnum)
  return false;
#undef DO_
}

void TrafficSignIDArgentinaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDArgentinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDArgentinaEnum)
}

::google::protobuf::uint8* TrafficSignIDArgentinaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDArgentinaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDArgentinaEnum)
  return target;
}

size_t TrafficSignIDArgentinaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDArgentinaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDArgentinaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDArgentinaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDArgentinaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDArgentinaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDArgentinaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDArgentinaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDArgentinaEnum::MergeFrom(const TrafficSignIDArgentinaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDArgentinaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDArgentinaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDArgentinaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDArgentinaEnum::CopyFrom(const TrafficSignIDArgentinaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDArgentinaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDArgentinaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDArgentinaEnum::Swap(TrafficSignIDArgentinaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDArgentinaEnum::InternalSwap(TrafficSignIDArgentinaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDArgentinaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDBelgiumEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDBelgiumEnum::TrafficSignIDBelgiumEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDBelgiumEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDBelgiumEnum)
}
TrafficSignIDBelgiumEnum::TrafficSignIDBelgiumEnum(const TrafficSignIDBelgiumEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDBelgiumEnum)
}

void TrafficSignIDBelgiumEnum::SharedCtor() {
}

TrafficSignIDBelgiumEnum::~TrafficSignIDBelgiumEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDBelgiumEnum)
  SharedDtor();
}

void TrafficSignIDBelgiumEnum::SharedDtor() {
}

void TrafficSignIDBelgiumEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDBelgiumEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDBelgiumEnum& TrafficSignIDBelgiumEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDBelgiumEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDBelgiumEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDBelgiumEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDBelgiumEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDBelgiumEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDBelgiumEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDBelgiumEnum)
  return false;
#undef DO_
}

void TrafficSignIDBelgiumEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDBelgiumEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDBelgiumEnum)
}

::google::protobuf::uint8* TrafficSignIDBelgiumEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDBelgiumEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDBelgiumEnum)
  return target;
}

size_t TrafficSignIDBelgiumEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDBelgiumEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDBelgiumEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDBelgiumEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDBelgiumEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDBelgiumEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDBelgiumEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDBelgiumEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDBelgiumEnum::MergeFrom(const TrafficSignIDBelgiumEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDBelgiumEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDBelgiumEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDBelgiumEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDBelgiumEnum::CopyFrom(const TrafficSignIDBelgiumEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDBelgiumEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDBelgiumEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDBelgiumEnum::Swap(TrafficSignIDBelgiumEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDBelgiumEnum::InternalSwap(TrafficSignIDBelgiumEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDBelgiumEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDFranceEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDFranceEnum::TrafficSignIDFranceEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDFranceEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDFranceEnum)
}
TrafficSignIDFranceEnum::TrafficSignIDFranceEnum(const TrafficSignIDFranceEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDFranceEnum)
}

void TrafficSignIDFranceEnum::SharedCtor() {
}

TrafficSignIDFranceEnum::~TrafficSignIDFranceEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDFranceEnum)
  SharedDtor();
}

void TrafficSignIDFranceEnum::SharedDtor() {
}

void TrafficSignIDFranceEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDFranceEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDFranceEnum& TrafficSignIDFranceEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDFranceEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDFranceEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDFranceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDFranceEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDFranceEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDFranceEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDFranceEnum)
  return false;
#undef DO_
}

void TrafficSignIDFranceEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDFranceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDFranceEnum)
}

::google::protobuf::uint8* TrafficSignIDFranceEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDFranceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDFranceEnum)
  return target;
}

size_t TrafficSignIDFranceEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDFranceEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDFranceEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDFranceEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDFranceEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDFranceEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDFranceEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDFranceEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDFranceEnum::MergeFrom(const TrafficSignIDFranceEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDFranceEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDFranceEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDFranceEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDFranceEnum::CopyFrom(const TrafficSignIDFranceEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDFranceEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDFranceEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDFranceEnum::Swap(TrafficSignIDFranceEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDFranceEnum::InternalSwap(TrafficSignIDFranceEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDFranceEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDGreeceEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDGreeceEnum::TrafficSignIDGreeceEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDGreeceEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDGreeceEnum)
}
TrafficSignIDGreeceEnum::TrafficSignIDGreeceEnum(const TrafficSignIDGreeceEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDGreeceEnum)
}

void TrafficSignIDGreeceEnum::SharedCtor() {
}

TrafficSignIDGreeceEnum::~TrafficSignIDGreeceEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDGreeceEnum)
  SharedDtor();
}

void TrafficSignIDGreeceEnum::SharedDtor() {
}

void TrafficSignIDGreeceEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDGreeceEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDGreeceEnum& TrafficSignIDGreeceEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDGreeceEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDGreeceEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDGreeceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDGreeceEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDGreeceEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDGreeceEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDGreeceEnum)
  return false;
#undef DO_
}

void TrafficSignIDGreeceEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDGreeceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDGreeceEnum)
}

::google::protobuf::uint8* TrafficSignIDGreeceEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDGreeceEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDGreeceEnum)
  return target;
}

size_t TrafficSignIDGreeceEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDGreeceEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDGreeceEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDGreeceEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDGreeceEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDGreeceEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDGreeceEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDGreeceEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDGreeceEnum::MergeFrom(const TrafficSignIDGreeceEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDGreeceEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDGreeceEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDGreeceEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDGreeceEnum::CopyFrom(const TrafficSignIDGreeceEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDGreeceEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDGreeceEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDGreeceEnum::Swap(TrafficSignIDGreeceEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDGreeceEnum::InternalSwap(TrafficSignIDGreeceEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDGreeceEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDCroatiaEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDCroatiaEnum::TrafficSignIDCroatiaEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDCroatiaEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDCroatiaEnum)
}
TrafficSignIDCroatiaEnum::TrafficSignIDCroatiaEnum(const TrafficSignIDCroatiaEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDCroatiaEnum)
}

void TrafficSignIDCroatiaEnum::SharedCtor() {
}

TrafficSignIDCroatiaEnum::~TrafficSignIDCroatiaEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDCroatiaEnum)
  SharedDtor();
}

void TrafficSignIDCroatiaEnum::SharedDtor() {
}

void TrafficSignIDCroatiaEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDCroatiaEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDCroatiaEnum& TrafficSignIDCroatiaEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDCroatiaEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDCroatiaEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDCroatiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDCroatiaEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDCroatiaEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDCroatiaEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDCroatiaEnum)
  return false;
#undef DO_
}

void TrafficSignIDCroatiaEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDCroatiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDCroatiaEnum)
}

::google::protobuf::uint8* TrafficSignIDCroatiaEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDCroatiaEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDCroatiaEnum)
  return target;
}

size_t TrafficSignIDCroatiaEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDCroatiaEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDCroatiaEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDCroatiaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDCroatiaEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDCroatiaEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDCroatiaEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDCroatiaEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDCroatiaEnum::MergeFrom(const TrafficSignIDCroatiaEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDCroatiaEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDCroatiaEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDCroatiaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDCroatiaEnum::CopyFrom(const TrafficSignIDCroatiaEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDCroatiaEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDCroatiaEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDCroatiaEnum::Swap(TrafficSignIDCroatiaEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDCroatiaEnum::InternalSwap(TrafficSignIDCroatiaEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDCroatiaEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDItalyEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDItalyEnum::TrafficSignIDItalyEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDItalyEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDItalyEnum)
}
TrafficSignIDItalyEnum::TrafficSignIDItalyEnum(const TrafficSignIDItalyEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDItalyEnum)
}

void TrafficSignIDItalyEnum::SharedCtor() {
}

TrafficSignIDItalyEnum::~TrafficSignIDItalyEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDItalyEnum)
  SharedDtor();
}

void TrafficSignIDItalyEnum::SharedDtor() {
}

void TrafficSignIDItalyEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDItalyEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDItalyEnum& TrafficSignIDItalyEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDItalyEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDItalyEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDItalyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDItalyEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDItalyEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDItalyEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDItalyEnum)
  return false;
#undef DO_
}

void TrafficSignIDItalyEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDItalyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDItalyEnum)
}

::google::protobuf::uint8* TrafficSignIDItalyEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDItalyEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDItalyEnum)
  return target;
}

size_t TrafficSignIDItalyEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDItalyEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDItalyEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDItalyEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDItalyEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDItalyEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDItalyEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDItalyEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDItalyEnum::MergeFrom(const TrafficSignIDItalyEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDItalyEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDItalyEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDItalyEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDItalyEnum::CopyFrom(const TrafficSignIDItalyEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDItalyEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDItalyEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDItalyEnum::Swap(TrafficSignIDItalyEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDItalyEnum::InternalSwap(TrafficSignIDItalyEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDItalyEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignIDPuertoRicoEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignIDPuertoRicoEnum::TrafficSignIDPuertoRicoEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDPuertoRicoEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignIDPuertoRicoEnum)
}
TrafficSignIDPuertoRicoEnum::TrafficSignIDPuertoRicoEnum(const TrafficSignIDPuertoRicoEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignIDPuertoRicoEnum)
}

void TrafficSignIDPuertoRicoEnum::SharedCtor() {
}

TrafficSignIDPuertoRicoEnum::~TrafficSignIDPuertoRicoEnum() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignIDPuertoRicoEnum)
  SharedDtor();
}

void TrafficSignIDPuertoRicoEnum::SharedDtor() {
}

void TrafficSignIDPuertoRicoEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignIDPuertoRicoEnum::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignIDPuertoRicoEnum& TrafficSignIDPuertoRicoEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignIDPuertoRicoEnum.base);
  return *internal_default_instance();
}


void TrafficSignIDPuertoRicoEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignIDPuertoRicoEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignIDPuertoRicoEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignIDPuertoRicoEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignIDPuertoRicoEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignIDPuertoRicoEnum)
  return false;
#undef DO_
}

void TrafficSignIDPuertoRicoEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignIDPuertoRicoEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignIDPuertoRicoEnum)
}

::google::protobuf::uint8* TrafficSignIDPuertoRicoEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignIDPuertoRicoEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignIDPuertoRicoEnum)
  return target;
}

size_t TrafficSignIDPuertoRicoEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignIDPuertoRicoEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignIDPuertoRicoEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignIDPuertoRicoEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignIDPuertoRicoEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignIDPuertoRicoEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignIDPuertoRicoEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignIDPuertoRicoEnum)
    MergeFrom(*source);
  }
}

void TrafficSignIDPuertoRicoEnum::MergeFrom(const TrafficSignIDPuertoRicoEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignIDPuertoRicoEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrafficSignIDPuertoRicoEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignIDPuertoRicoEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignIDPuertoRicoEnum::CopyFrom(const TrafficSignIDPuertoRicoEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignIDPuertoRicoEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignIDPuertoRicoEnum::IsInitialized() const {
  return true;
}

void TrafficSignIDPuertoRicoEnum::Swap(TrafficSignIDPuertoRicoEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignIDPuertoRicoEnum::InternalSwap(TrafficSignIDPuertoRicoEnum* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignIDPuertoRicoEnum::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignElement::InitAsDefaultInstance() {
  ::commonroad::_TrafficSignElement_default_instance_.germany_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.zamunda_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.usa_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.china_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.spain_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.russia_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.argentina_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.belgium_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.france_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.greece_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.croatia_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.italy_element_id_ = 0;
  ::commonroad::_TrafficSignElement_default_instance_.puerto_rico_element_id_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignElement::kGermanyElementIdFieldNumber;
const int TrafficSignElement::kZamundaElementIdFieldNumber;
const int TrafficSignElement::kUsaElementIdFieldNumber;
const int TrafficSignElement::kChinaElementIdFieldNumber;
const int TrafficSignElement::kSpainElementIdFieldNumber;
const int TrafficSignElement::kRussiaElementIdFieldNumber;
const int TrafficSignElement::kArgentinaElementIdFieldNumber;
const int TrafficSignElement::kBelgiumElementIdFieldNumber;
const int TrafficSignElement::kFranceElementIdFieldNumber;
const int TrafficSignElement::kGreeceElementIdFieldNumber;
const int TrafficSignElement::kCroatiaElementIdFieldNumber;
const int TrafficSignElement::kItalyElementIdFieldNumber;
const int TrafficSignElement::kPuertoRicoElementIdFieldNumber;
const int TrafficSignElement::kAdditionalValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignElement::TrafficSignElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSignElement)
}
TrafficSignElement::TrafficSignElement(const TrafficSignElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      additional_values_(from.additional_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_traffic_sign_element_id();
  switch (from.traffic_sign_element_id_case()) {
    case kGermanyElementId: {
      set_germany_element_id(from.germany_element_id());
      break;
    }
    case kZamundaElementId: {
      set_zamunda_element_id(from.zamunda_element_id());
      break;
    }
    case kUsaElementId: {
      set_usa_element_id(from.usa_element_id());
      break;
    }
    case kChinaElementId: {
      set_china_element_id(from.china_element_id());
      break;
    }
    case kSpainElementId: {
      set_spain_element_id(from.spain_element_id());
      break;
    }
    case kRussiaElementId: {
      set_russia_element_id(from.russia_element_id());
      break;
    }
    case kArgentinaElementId: {
      set_argentina_element_id(from.argentina_element_id());
      break;
    }
    case kBelgiumElementId: {
      set_belgium_element_id(from.belgium_element_id());
      break;
    }
    case kFranceElementId: {
      set_france_element_id(from.france_element_id());
      break;
    }
    case kGreeceElementId: {
      set_greece_element_id(from.greece_element_id());
      break;
    }
    case kCroatiaElementId: {
      set_croatia_element_id(from.croatia_element_id());
      break;
    }
    case kItalyElementId: {
      set_italy_element_id(from.italy_element_id());
      break;
    }
    case kPuertoRicoElementId: {
      set_puerto_rico_element_id(from.puerto_rico_element_id());
      break;
    }
    case TRAFFIC_SIGN_ELEMENT_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSignElement)
}

void TrafficSignElement::SharedCtor() {
  clear_has_traffic_sign_element_id();
}

TrafficSignElement::~TrafficSignElement() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSignElement)
  SharedDtor();
}

void TrafficSignElement::SharedDtor() {
  if (has_traffic_sign_element_id()) {
    clear_traffic_sign_element_id();
  }
}

void TrafficSignElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignElement::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignElement& TrafficSignElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSignElement.base);
  return *internal_default_instance();
}


void TrafficSignElement::clear_traffic_sign_element_id() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.TrafficSignElement)
  switch (traffic_sign_element_id_case()) {
    case kGermanyElementId: {
      // No need to clear
      break;
    }
    case kZamundaElementId: {
      // No need to clear
      break;
    }
    case kUsaElementId: {
      // No need to clear
      break;
    }
    case kChinaElementId: {
      // No need to clear
      break;
    }
    case kSpainElementId: {
      // No need to clear
      break;
    }
    case kRussiaElementId: {
      // No need to clear
      break;
    }
    case kArgentinaElementId: {
      // No need to clear
      break;
    }
    case kBelgiumElementId: {
      // No need to clear
      break;
    }
    case kFranceElementId: {
      // No need to clear
      break;
    }
    case kGreeceElementId: {
      // No need to clear
      break;
    }
    case kCroatiaElementId: {
      // No need to clear
      break;
    }
    case kItalyElementId: {
      // No need to clear
      break;
    }
    case kPuertoRicoElementId: {
      // No need to clear
      break;
    }
    case TRAFFIC_SIGN_ELEMENT_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRAFFIC_SIGN_ELEMENT_ID_NOT_SET;
}


void TrafficSignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSignElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_values_.Clear();
  clear_traffic_sign_element_id();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSignElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSignElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonroad.TrafficSignIDGermanyEnum.TrafficSignIDGermany germany_element_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany_IsValid(value)) {
            set_germany_element_id(static_cast< ::commonroad::TrafficSignIDGermanyEnum_TrafficSignIDGermany >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDZamundaEnum.TrafficSignIDZamunda zamunda_element_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda_IsValid(value)) {
            set_zamunda_element_id(static_cast< ::commonroad::TrafficSignIDZamundaEnum_TrafficSignIDZamunda >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDUsaEnum.TrafficSignIDUsa usa_element_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa_IsValid(value)) {
            set_usa_element_id(static_cast< ::commonroad::TrafficSignIDUsaEnum_TrafficSignIDUsa >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDChinaEnum.TrafficSignIDChina china_element_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina_IsValid(value)) {
            set_china_element_id(static_cast< ::commonroad::TrafficSignIDChinaEnum_TrafficSignIDChina >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDSpainEnum.TrafficSignIDSpain spain_element_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain_IsValid(value)) {
            set_spain_element_id(static_cast< ::commonroad::TrafficSignIDSpainEnum_TrafficSignIDSpain >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDRussiaEnum.TrafficSignIDRussia russia_element_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia_IsValid(value)) {
            set_russia_element_id(static_cast< ::commonroad::TrafficSignIDRussiaEnum_TrafficSignIDRussia >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDArgentinaEnum.TrafficSignIDArgentina argentina_element_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina_IsValid(value)) {
            set_argentina_element_id(static_cast< ::commonroad::TrafficSignIDArgentinaEnum_TrafficSignIDArgentina >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDBelgiumEnum.TrafficSignIDBelgium belgium_element_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium_IsValid(value)) {
            set_belgium_element_id(static_cast< ::commonroad::TrafficSignIDBelgiumEnum_TrafficSignIDBelgium >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDFranceEnum.TrafficSignIDFrance france_element_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance_IsValid(value)) {
            set_france_element_id(static_cast< ::commonroad::TrafficSignIDFranceEnum_TrafficSignIDFrance >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDGreeceEnum.TrafficSignIDGreece greece_element_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece_IsValid(value)) {
            set_greece_element_id(static_cast< ::commonroad::TrafficSignIDGreeceEnum_TrafficSignIDGreece >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDCroatiaEnum.TrafficSignIDCroatia croatia_element_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia_IsValid(value)) {
            set_croatia_element_id(static_cast< ::commonroad::TrafficSignIDCroatiaEnum_TrafficSignIDCroatia >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDItalyEnum.TrafficSignIDItaly italy_element_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly_IsValid(value)) {
            set_italy_element_id(static_cast< ::commonroad::TrafficSignIDItalyEnum_TrafficSignIDItaly >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.TrafficSignIDPuertoRicoEnum.TrafficSignIDPuertoRico puerto_rico_element_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico_IsValid(value)) {
            set_puerto_rico_element_id(static_cast< ::commonroad::TrafficSignIDPuertoRicoEnum_TrafficSignIDPuertoRico >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string additional_values = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_additional_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additional_values(this->additional_values_size() - 1).data(),
            static_cast<int>(this->additional_values(this->additional_values_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commonroad.TrafficSignElement.additional_values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSignElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSignElement)
  return false;
#undef DO_
}

void TrafficSignElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSignElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (traffic_sign_element_id_case()) {
    case kGermanyElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->germany_element_id(), output);
      break;
    case kZamundaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->zamunda_element_id(), output);
      break;
    case kUsaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        3, this->usa_element_id(), output);
      break;
    case kChinaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        4, this->china_element_id(), output);
      break;
    case kSpainElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        5, this->spain_element_id(), output);
      break;
    case kRussiaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        7, this->russia_element_id(), output);
      break;
    case kArgentinaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        8, this->argentina_element_id(), output);
      break;
    case kBelgiumElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        9, this->belgium_element_id(), output);
      break;
    case kFranceElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        10, this->france_element_id(), output);
      break;
    case kGreeceElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        11, this->greece_element_id(), output);
      break;
    case kCroatiaElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        12, this->croatia_element_id(), output);
      break;
    case kItalyElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        13, this->italy_element_id(), output);
      break;
    case kPuertoRicoElementId:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        14, this->puerto_rico_element_id(), output);
      break;
    default: ;
  }
  // repeated string additional_values = 15;
  for (int i = 0, n = this->additional_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additional_values(i).data(), static_cast<int>(this->additional_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.TrafficSignElement.additional_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->additional_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSignElement)
}

::google::protobuf::uint8* TrafficSignElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSignElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (traffic_sign_element_id_case()) {
    case kGermanyElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->germany_element_id(), target);
      break;
    case kZamundaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->zamunda_element_id(), target);
      break;
    case kUsaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        3, this->usa_element_id(), target);
      break;
    case kChinaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        4, this->china_element_id(), target);
      break;
    case kSpainElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        5, this->spain_element_id(), target);
      break;
    case kRussiaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        7, this->russia_element_id(), target);
      break;
    case kArgentinaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        8, this->argentina_element_id(), target);
      break;
    case kBelgiumElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        9, this->belgium_element_id(), target);
      break;
    case kFranceElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        10, this->france_element_id(), target);
      break;
    case kGreeceElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        11, this->greece_element_id(), target);
      break;
    case kCroatiaElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        12, this->croatia_element_id(), target);
      break;
    case kItalyElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        13, this->italy_element_id(), target);
      break;
    case kPuertoRicoElementId:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        14, this->puerto_rico_element_id(), target);
      break;
    default: ;
  }
  // repeated string additional_values = 15;
  for (int i = 0, n = this->additional_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additional_values(i).data(), static_cast<int>(this->additional_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commonroad.TrafficSignElement.additional_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->additional_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSignElement)
  return target;
}

size_t TrafficSignElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSignElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string additional_values = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->additional_values_size());
  for (int i = 0, n = this->additional_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->additional_values(i));
  }

  switch (traffic_sign_element_id_case()) {
    // optional .commonroad.TrafficSignIDGermanyEnum.TrafficSignIDGermany germany_element_id = 1;
    case kGermanyElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->germany_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDZamundaEnum.TrafficSignIDZamunda zamunda_element_id = 2;
    case kZamundaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zamunda_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDUsaEnum.TrafficSignIDUsa usa_element_id = 3;
    case kUsaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usa_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDChinaEnum.TrafficSignIDChina china_element_id = 4;
    case kChinaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->china_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDSpainEnum.TrafficSignIDSpain spain_element_id = 5;
    case kSpainElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->spain_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDRussiaEnum.TrafficSignIDRussia russia_element_id = 7;
    case kRussiaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->russia_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDArgentinaEnum.TrafficSignIDArgentina argentina_element_id = 8;
    case kArgentinaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->argentina_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDBelgiumEnum.TrafficSignIDBelgium belgium_element_id = 9;
    case kBelgiumElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->belgium_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDFranceEnum.TrafficSignIDFrance france_element_id = 10;
    case kFranceElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->france_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDGreeceEnum.TrafficSignIDGreece greece_element_id = 11;
    case kGreeceElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->greece_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDCroatiaEnum.TrafficSignIDCroatia croatia_element_id = 12;
    case kCroatiaElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->croatia_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDItalyEnum.TrafficSignIDItaly italy_element_id = 13;
    case kItalyElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->italy_element_id());
      break;
    }
    // optional .commonroad.TrafficSignIDPuertoRicoEnum.TrafficSignIDPuertoRico puerto_rico_element_id = 14;
    case kPuertoRicoElementId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->puerto_rico_element_id());
      break;
    }
    case TRAFFIC_SIGN_ELEMENT_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSignElement)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSignElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSignElement)
    MergeFrom(*source);
  }
}

void TrafficSignElement::MergeFrom(const TrafficSignElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSignElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_values_.MergeFrom(from.additional_values_);
  switch (from.traffic_sign_element_id_case()) {
    case kGermanyElementId: {
      set_germany_element_id(from.germany_element_id());
      break;
    }
    case kZamundaElementId: {
      set_zamunda_element_id(from.zamunda_element_id());
      break;
    }
    case kUsaElementId: {
      set_usa_element_id(from.usa_element_id());
      break;
    }
    case kChinaElementId: {
      set_china_element_id(from.china_element_id());
      break;
    }
    case kSpainElementId: {
      set_spain_element_id(from.spain_element_id());
      break;
    }
    case kRussiaElementId: {
      set_russia_element_id(from.russia_element_id());
      break;
    }
    case kArgentinaElementId: {
      set_argentina_element_id(from.argentina_element_id());
      break;
    }
    case kBelgiumElementId: {
      set_belgium_element_id(from.belgium_element_id());
      break;
    }
    case kFranceElementId: {
      set_france_element_id(from.france_element_id());
      break;
    }
    case kGreeceElementId: {
      set_greece_element_id(from.greece_element_id());
      break;
    }
    case kCroatiaElementId: {
      set_croatia_element_id(from.croatia_element_id());
      break;
    }
    case kItalyElementId: {
      set_italy_element_id(from.italy_element_id());
      break;
    }
    case kPuertoRicoElementId: {
      set_puerto_rico_element_id(from.puerto_rico_element_id());
      break;
    }
    case TRAFFIC_SIGN_ELEMENT_ID_NOT_SET: {
      break;
    }
  }
}

void TrafficSignElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignElement::CopyFrom(const TrafficSignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignElement::IsInitialized() const {
  return true;
}

void TrafficSignElement::Swap(TrafficSignElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignElement::InternalSwap(TrafficSignElement* other) {
  using std::swap;
  additional_values_.InternalSwap(CastToBase(&other->additional_values_));
  swap(traffic_sign_element_id_, other->traffic_sign_element_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignElement::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::commonroad::_TrafficSign_default_instance_._instance.get_mutable()->position_ = const_cast< ::commonroad::Point*>(
      ::commonroad::Point::internal_default_instance());
}
void TrafficSign::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign::kTrafficSignIdFieldNumber;
const int TrafficSign::kTrafficSignElementsFieldNumber;
const int TrafficSign::kFirstOccurrencesFieldNumber;
const int TrafficSign::kPositionFieldNumber;
const int TrafficSign::kVirtualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign::TrafficSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_5fsign_2eproto::scc_info_TrafficSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      traffic_sign_elements_(from.traffic_sign_elements_),
      first_occurrences_(from.first_occurrences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::commonroad::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&traffic_sign_id_, &from.traffic_sign_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual__) -
    reinterpret_cast<char*>(&traffic_sign_id_)) + sizeof(virtual__));
  // @@protoc_insertion_point(copy_constructor:commonroad.TrafficSign)
}

void TrafficSign::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual__) -
      reinterpret_cast<char*>(&position_)) + sizeof(virtual__));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:commonroad.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign::descriptor() {
  ::protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign& TrafficSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_5fsign_2eproto::scc_info_TrafficSign.base);
  return *internal_default_instance();
}


void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_sign_elements_.Clear();
  first_occurrences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&traffic_sign_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual__) -
        reinterpret_cast<char*>(&traffic_sign_id_)) + sizeof(virtual__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TrafficSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 traffic_sign_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_traffic_sign_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traffic_sign_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 first_occurrences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_first_occurrences())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_occurrences())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Point position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool virtual = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_virtual_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TrafficSign)
  return false;
#undef DO_
}

void TrafficSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 traffic_sign_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->traffic_sign_id(), output);
  }

  // repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->traffic_sign_elements(static_cast<int>(i)),
      output);
  }

  // repeated uint32 first_occurrences = 3;
  for (int i = 0, n = this->first_occurrences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->first_occurrences(i), output);
  }

  // optional .commonroad.Point position = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // optional bool virtual = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->virtual_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TrafficSign)
}

::google::protobuf::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 traffic_sign_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->traffic_sign_id(), target);
  }

  // repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traffic_sign_elements(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 first_occurrences = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->first_occurrences_, target);

  // optional .commonroad.Point position = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // optional bool virtual = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->virtual_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TrafficSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 traffic_sign_id = 1;
  if (has_traffic_sign_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->traffic_sign_id());
  }
  // repeated .commonroad.TrafficSignElement traffic_sign_elements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign_elements(static_cast<int>(i)));
    }
  }

  // repeated uint32 first_occurrences = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->first_occurrences_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->first_occurrences_size());
    total_size += data_size;
  }

  // optional .commonroad.Point position = 4;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // optional bool virtual = 5;
  if (has_virtual_()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TrafficSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_sign_elements_.MergeFrom(from.traffic_sign_elements_);
  first_occurrences_.MergeFrom(from.first_occurrences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::commonroad::Point::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      traffic_sign_id_ = from.traffic_sign_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual__ = from.virtual__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  return true;
}

void TrafficSign::Swap(TrafficSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  CastToBase(&traffic_sign_elements_)->InternalSwap(CastToBase(&other->traffic_sign_elements_));
  first_occurrences_.InternalSwap(&other->first_occurrences_);
  swap(position_, other->position_);
  swap(traffic_sign_id_, other->traffic_sign_id_);
  swap(virtual__, other->virtual__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  protobuf_traffic_5fsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_5fsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDGermanyEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDGermanyEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDGermanyEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDZamundaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDZamundaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDZamundaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDUsaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDUsaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDUsaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDChinaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDChinaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDChinaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDSpainEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDSpainEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDSpainEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDRussiaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDRussiaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDRussiaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDArgentinaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDArgentinaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDArgentinaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDBelgiumEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDBelgiumEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDBelgiumEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDFranceEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDFranceEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDFranceEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDGreeceEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDGreeceEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDGreeceEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDCroatiaEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDCroatiaEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDCroatiaEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDItalyEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDItalyEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDItalyEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignIDPuertoRicoEnum* Arena::CreateMaybeMessage< ::commonroad::TrafficSignIDPuertoRicoEnum >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignIDPuertoRicoEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSignElement* Arena::CreateMaybeMessage< ::commonroad::TrafficSignElement >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSignElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TrafficSign* Arena::CreateMaybeMessage< ::commonroad::TrafficSign >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TrafficSign >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
