// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util.proto

#include "commonroad_cpp/interfaces/commonroad/protobufFormat/generatedClasses/util.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_util_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatInterval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntegerInterval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Circle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Rectangle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Shape;
}  // namespace protobuf_util_2eproto
namespace commonroad {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rectangle>
      _instance;
} _Rectangle_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Circle>
      _instance;
} _Circle_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class ShapeGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShapeGroup>
      _instance;
} _ShapeGroup_default_instance_;
class ShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shape>
      _instance;
  const ::commonroad::Rectangle* rectangle_;
  const ::commonroad::Circle* circle_;
  const ::commonroad::Polygon* polygon_;
  const ::commonroad::ShapeGroup* shape_group_;
} _Shape_default_instance_;
class IntegerIntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegerInterval>
      _instance;
} _IntegerInterval_default_instance_;
class FloatIntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatInterval>
      _instance;
} _FloatInterval_default_instance_;
class IntegerExactOrIntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegerExactOrInterval>
      _instance;
  ::google::protobuf::int32 exact_;
  const ::commonroad::IntegerInterval* interval_;
} _IntegerExactOrInterval_default_instance_;
class FloatExactOrIntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatExactOrInterval>
      _instance;
  double exact_;
  const ::commonroad::FloatInterval* interval_;
} _FloatExactOrInterval_default_instance_;
class IntegerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegerList>
      _instance;
} _IntegerList_default_instance_;
class FloatListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatList>
      _instance;
} _FloatList_default_instance_;
class TimeStampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeStamp>
      _instance;
} _TimeStamp_default_instance_;
}  // namespace commonroad
namespace protobuf_util_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Point_default_instance_;
    new (ptr) ::commonroad::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsRectangle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Rectangle_default_instance_;
    new (ptr) ::commonroad::Rectangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Rectangle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rectangle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRectangle}, {
      &protobuf_util_2eproto::scc_info_Point.base,}};

static void InitDefaultsCircle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Circle_default_instance_;
    new (ptr) ::commonroad::Circle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Circle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Circle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCircle}, {
      &protobuf_util_2eproto::scc_info_Point.base,}};

static void InitDefaultsPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_Polygon_default_instance_;
    new (ptr) ::commonroad::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::Polygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygon}, {
      &protobuf_util_2eproto::scc_info_Point.base,}};

static void InitDefaultsShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_ShapeGroup_default_instance_;
    new (ptr) ::commonroad::ShapeGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::commonroad::_Shape_default_instance_;
    new (ptr) ::commonroad::Shape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::ShapeGroup::InitAsDefaultInstance();
  ::commonroad::Shape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Shape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsShape}, {
      &protobuf_util_2eproto::scc_info_Rectangle.base,
      &protobuf_util_2eproto::scc_info_Circle.base,
      &protobuf_util_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsIntegerInterval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_IntegerInterval_default_instance_;
    new (ptr) ::commonroad::IntegerInterval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::IntegerInterval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntegerInterval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntegerInterval}, {}};

static void InitDefaultsFloatInterval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_FloatInterval_default_instance_;
    new (ptr) ::commonroad::FloatInterval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::FloatInterval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatInterval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatInterval}, {}};

static void InitDefaultsIntegerExactOrInterval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_IntegerExactOrInterval_default_instance_;
    new (ptr) ::commonroad::IntegerExactOrInterval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::IntegerExactOrInterval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IntegerExactOrInterval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntegerExactOrInterval}, {
      &protobuf_util_2eproto::scc_info_IntegerInterval.base,}};

static void InitDefaultsFloatExactOrInterval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_FloatExactOrInterval_default_instance_;
    new (ptr) ::commonroad::FloatExactOrInterval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::FloatExactOrInterval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FloatExactOrInterval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFloatExactOrInterval}, {
      &protobuf_util_2eproto::scc_info_FloatInterval.base,}};

static void InitDefaultsIntegerList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_IntegerList_default_instance_;
    new (ptr) ::commonroad::IntegerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::IntegerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntegerList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntegerList}, {}};

static void InitDefaultsFloatList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_FloatList_default_instance_;
    new (ptr) ::commonroad::FloatList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::FloatList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatList}, {}};

static void InitDefaultsTimeStamp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::commonroad::_TimeStamp_default_instance_;
    new (ptr) ::commonroad::TimeStamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::commonroad::TimeStamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeStamp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeStamp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rectangle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Circle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegerInterval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatInterval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegerExactOrInterval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatExactOrInterval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegerList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeStamp.base);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Rectangle, orientation_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Circle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Circle, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Circle, center_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Polygon, vertices_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ShapeGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ShapeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::ShapeGroup, shapes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Shape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Shape, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::commonroad::ShapeDefaultTypeInternal, rectangle_),
  offsetof(::commonroad::ShapeDefaultTypeInternal, circle_),
  offsetof(::commonroad::ShapeDefaultTypeInternal, polygon_),
  offsetof(::commonroad::ShapeDefaultTypeInternal, shape_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::Shape, shape_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerInterval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerInterval, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerInterval, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatInterval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatInterval, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatInterval, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerExactOrInterval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerExactOrInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerExactOrInterval, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::commonroad::IntegerExactOrIntervalDefaultTypeInternal, exact_),
  offsetof(::commonroad::IntegerExactOrIntervalDefaultTypeInternal, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerExactOrInterval, exact_or_interval_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatExactOrInterval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatExactOrInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatExactOrInterval, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::commonroad::FloatExactOrIntervalDefaultTypeInternal, exact_),
  offsetof(::commonroad::FloatExactOrIntervalDefaultTypeInternal, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatExactOrInterval, exact_or_interval_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::IntegerList, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::FloatList, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::commonroad::TimeStamp, minute_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::commonroad::Point)},
  { 9, 18, sizeof(::commonroad::Rectangle)},
  { 22, 29, sizeof(::commonroad::Circle)},
  { 31, 37, sizeof(::commonroad::Polygon)},
  { 38, 44, sizeof(::commonroad::ShapeGroup)},
  { 45, 55, sizeof(::commonroad::Shape)},
  { 59, 66, sizeof(::commonroad::IntegerInterval)},
  { 68, 75, sizeof(::commonroad::FloatInterval)},
  { 77, 85, sizeof(::commonroad::IntegerExactOrInterval)},
  { 87, 95, sizeof(::commonroad::FloatExactOrInterval)},
  { 97, 103, sizeof(::commonroad::IntegerList)},
  { 104, 110, sizeof(::commonroad::FloatList)},
  { 111, 121, sizeof(::commonroad::TimeStamp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_ShapeGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_IntegerInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_FloatInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_IntegerExactOrInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_FloatExactOrInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_IntegerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_FloatList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::commonroad::_TimeStamp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "util.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nutil.proto\022\ncommonroad\"\035\n\005Point\022\t\n\001x\030\001"
      " \002(\001\022\t\n\001y\030\002 \002(\001\"b\n\tRectangle\022\016\n\006length\030\001"
      " \002(\001\022\r\n\005width\030\002 \002(\001\022!\n\006center\030\003 \001(\0132\021.co"
      "mmonroad.Point\022\023\n\013orientation\030\004 \001(\001\";\n\006C"
      "ircle\022\016\n\006radius\030\001 \002(\001\022!\n\006center\030\002 \001(\0132\021."
      "commonroad.Point\".\n\007Polygon\022#\n\010vertices\030"
      "\001 \003(\0132\021.commonroad.Point\"/\n\nShapeGroup\022!"
      "\n\006shapes\030\001 \003(\0132\021.commonroad.Shape\"\271\001\n\005Sh"
      "ape\022*\n\trectangle\030\001 \001(\0132\025.commonroad.Rect"
      "angleH\000\022$\n\006circle\030\002 \001(\0132\022.commonroad.Cir"
      "cleH\000\022&\n\007polygon\030\003 \001(\0132\023.commonroad.Poly"
      "gonH\000\022-\n\013shape_group\030\004 \001(\0132\026.commonroad."
      "ShapeGroupH\000B\007\n\005shape\"-\n\017IntegerInterval"
      "\022\r\n\005start\030\001 \002(\005\022\013\n\003end\030\002 \002(\005\"+\n\rFloatInt"
      "erval\022\r\n\005start\030\001 \002(\001\022\013\n\003end\030\002 \002(\001\"o\n\026Int"
      "egerExactOrInterval\022\017\n\005exact\030\001 \001(\005H\000\022/\n\010"
      "interval\030\002 \001(\0132\033.commonroad.IntegerInter"
      "valH\000B\023\n\021exact_or_interval\"k\n\024FloatExact"
      "OrInterval\022\017\n\005exact\030\001 \001(\001H\000\022-\n\010interval\030"
      "\002 \001(\0132\031.commonroad.FloatIntervalH\000B\023\n\021ex"
      "act_or_interval\"\035\n\013IntegerList\022\016\n\006values"
      "\030\001 \003(\005\"\033\n\tFloatList\022\016\n\006values\030\001 \003(\005\"S\n\tT"
      "imeStamp\022\014\n\004year\030\001 \001(\r\022\r\n\005month\030\002 \001(\r\022\013\n"
      "\003day\030\003 \001(\r\022\014\n\004hour\030\004 \001(\r\022\016\n\006minute\030\005 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 960);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "util.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_util_2eproto
namespace commonroad {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:commonroad.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
  ::commonroad::_Rectangle_default_instance_._instance.get_mutable()->center_ = const_cast< ::commonroad::Point*>(
      ::commonroad::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kLengthFieldNumber;
const int Rectangle::kWidthFieldNumber;
const int Rectangle::kCenterFieldNumber;
const int Rectangle::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Rectangle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::commonroad::Point(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&length_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:commonroad.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&center_)) + sizeof(orientation_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:commonroad.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Rectangle.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_ != NULL);
    center_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orientation_) -
        reinterpret_cast<char*>(&length_)) + sizeof(orientation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Rectangle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Point center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->length(), output);
  }

  // required double width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // optional .commonroad.Point center = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_center(), output);
  }

  // optional double orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->length(), target);
  }

  // required double width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // optional .commonroad.Point center = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_center(), deterministic, target);
  }

  // optional double orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Rectangle)
  return target;
}

size_t Rectangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.Rectangle)
  size_t total_size = 0;

  if (has_length()) {
    // required double length = 1;
    total_size += 1 + 8;
  }

  if (has_width()) {
    // required double width = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Rectangle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required double length = 1;
    total_size += 1 + 8;

    // required double width = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .commonroad.Point center = 3;
  if (has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // optional double orientation = 4;
  if (has_orientation()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_center()->::commonroad::Point::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(orientation_, other->orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
  ::commonroad::_Circle_default_instance_._instance.get_mutable()->center_ = const_cast< ::commonroad::Point*>(
      ::commonroad::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kRadiusFieldNumber;
const int Circle::kCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Circle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Circle)
}
Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::commonroad::Point(*from.center_);
  } else {
    center_ = NULL;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:commonroad.Circle)
}

void Circle::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:commonroad.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Circle::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Circle& Circle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Circle.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_ != NULL);
    center_->Clear();
  }
  radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Circle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Point center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Circle)
  return false;
#undef DO_
}

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double radius = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }

  // optional .commonroad.Point center = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_center(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double radius = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->radius(), target);
  }

  // optional .commonroad.Point center = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_center(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required double radius = 1;
  if (has_radius()) {
    total_size += 1 + 8;
  }
  // optional .commonroad.Point center = 2;
  if (has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_center()->::commonroad::Point::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kVerticesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Polygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.Polygon)
}

void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:commonroad.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Polygon.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Polygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonroad.Point vertices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vertices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Point vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vertices(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .commonroad.Point vertices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vertices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vertices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->vertices())) return false;
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  CastToBase(&vertices_)->InternalSwap(CastToBase(&other->vertices_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShapeGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeGroup::kShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeGroup::ShapeGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Shape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.ShapeGroup)
}
ShapeGroup::ShapeGroup(const ShapeGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.ShapeGroup)
}

void ShapeGroup::SharedCtor() {
}

ShapeGroup::~ShapeGroup() {
  // @@protoc_insertion_point(destructor:commonroad.ShapeGroup)
  SharedDtor();
}

void ShapeGroup::SharedDtor() {
}

void ShapeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShapeGroup::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShapeGroup& ShapeGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Shape.base);
  return *internal_default_instance();
}


void ShapeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.ShapeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShapeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.ShapeGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonroad.Shape shapes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.ShapeGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.ShapeGroup)
  return false;
#undef DO_
}

void ShapeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.ShapeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Shape shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->shapes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.ShapeGroup)
}

::google::protobuf::uint8* ShapeGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.ShapeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonroad.Shape shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->shapes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.ShapeGroup)
  return target;
}

size_t ShapeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.ShapeGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .commonroad.Shape shapes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shapes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shapes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.ShapeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.ShapeGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.ShapeGroup)
    MergeFrom(*source);
  }
}

void ShapeGroup::MergeFrom(const ShapeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.ShapeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
}

void ShapeGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.ShapeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeGroup::CopyFrom(const ShapeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.ShapeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeGroup::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->shapes())) return false;
  return true;
}

void ShapeGroup::Swap(ShapeGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeGroup::InternalSwap(ShapeGroup* other) {
  using std::swap;
  CastToBase(&shapes_)->InternalSwap(CastToBase(&other->shapes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShapeGroup::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shape::InitAsDefaultInstance() {
  ::commonroad::_Shape_default_instance_.rectangle_ = const_cast< ::commonroad::Rectangle*>(
      ::commonroad::Rectangle::internal_default_instance());
  ::commonroad::_Shape_default_instance_.circle_ = const_cast< ::commonroad::Circle*>(
      ::commonroad::Circle::internal_default_instance());
  ::commonroad::_Shape_default_instance_.polygon_ = const_cast< ::commonroad::Polygon*>(
      ::commonroad::Polygon::internal_default_instance());
  ::commonroad::_Shape_default_instance_.shape_group_ = const_cast< ::commonroad::ShapeGroup*>(
      ::commonroad::ShapeGroup::internal_default_instance());
}
void Shape::set_allocated_rectangle(::commonroad::Rectangle* rectangle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (rectangle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rectangle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    set_has_rectangle();
    shape_.rectangle_ = rectangle;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.Shape.rectangle)
}
void Shape::set_allocated_circle(::commonroad::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    set_has_circle();
    shape_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.Shape.circle)
}
void Shape::set_allocated_polygon(::commonroad::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
    shape_.polygon_ = polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.Shape.polygon)
}
void Shape::set_allocated_shape_group(::commonroad::ShapeGroup* shape_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (shape_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape_group, submessage_arena);
    }
    set_has_shape_group();
    shape_.shape_group_ = shape_group;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.Shape.shape_group)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kRectangleFieldNumber;
const int Shape::kCircleFieldNumber;
const int Shape::kPolygonFieldNumber;
const int Shape::kShapeGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_Shape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_shape();
  switch (from.shape_case()) {
    case kRectangle: {
      mutable_rectangle()->::commonroad::Rectangle::MergeFrom(from.rectangle());
      break;
    }
    case kCircle: {
      mutable_circle()->::commonroad::Circle::MergeFrom(from.circle());
      break;
    }
    case kPolygon: {
      mutable_polygon()->::commonroad::Polygon::MergeFrom(from.polygon());
      break;
    }
    case kShapeGroup: {
      mutable_shape_group()->::commonroad::ShapeGroup::MergeFrom(from.shape_group());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.Shape)
}

void Shape::SharedCtor() {
  clear_has_shape();
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:commonroad.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  if (has_shape()) {
    clear_shape();
  }
}

void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shape& Shape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_Shape.base);
  return *internal_default_instance();
}


void Shape::clear_shape() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.Shape)
  switch (shape_case()) {
    case kRectangle: {
      delete shape_.rectangle_;
      break;
    }
    case kCircle: {
      delete shape_.circle_;
      break;
    }
    case kPolygon: {
      delete shape_.polygon_;
      break;
    }
    case kShapeGroup: {
      delete shape_.shape_group_;
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHAPE_NOT_SET;
}


void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_shape();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.Shape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonroad.Rectangle rectangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Circle circle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.Polygon polygon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.ShapeGroup shape_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (shape_case()) {
    case kRectangle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_rectangle(), output);
      break;
    case kCircle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_circle(), output);
      break;
    case kPolygon:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_polygon(), output);
      break;
    case kShapeGroup:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_shape_group(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (shape_case()) {
    case kRectangle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_rectangle(), deterministic, target);
      break;
    case kCircle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_circle(), deterministic, target);
      break;
    case kPolygon:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_polygon(), deterministic, target);
      break;
    case kShapeGroup:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_shape_group(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.Shape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (shape_case()) {
    // optional .commonroad.Rectangle rectangle = 1;
    case kRectangle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.rectangle_);
      break;
    }
    // optional .commonroad.Circle circle = 2;
    case kCircle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.circle_);
      break;
    }
    // optional .commonroad.Polygon polygon = 3;
    case kPolygon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.polygon_);
      break;
    }
    // optional .commonroad.ShapeGroup shape_group = 4;
    case kShapeGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.shape_group_);
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.shape_case()) {
    case kRectangle: {
      mutable_rectangle()->::commonroad::Rectangle::MergeFrom(from.rectangle());
      break;
    }
    case kCircle: {
      mutable_circle()->::commonroad::Circle::MergeFrom(from.circle());
      break;
    }
    case kPolygon: {
      mutable_polygon()->::commonroad::Polygon::MergeFrom(from.polygon());
      break;
    }
    case kShapeGroup: {
      mutable_shape_group()->::commonroad::ShapeGroup::MergeFrom(from.shape_group());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  switch (shape_case()) {
    case kRectangle: {
      if (has_rectangle()) {
        if (!this->rectangle().IsInitialized()) return false;
      }
      break;
    }
    case kCircle: {
      if (has_circle()) {
        if (!this->circle().IsInitialized()) return false;
      }
      break;
    }
    case kPolygon: {
      if (has_polygon()) {
        if (!this->polygon().IsInitialized()) return false;
      }
      break;
    }
    case kShapeGroup: {
      if (has_shape_group()) {
        if (!this->shape_group().IsInitialized()) return false;
      }
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntegerInterval::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerInterval::kStartFieldNumber;
const int IntegerInterval::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerInterval::IntegerInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_IntegerInterval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.IntegerInterval)
}
IntegerInterval::IntegerInterval(const IntegerInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:commonroad.IntegerInterval)
}

void IntegerInterval::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

IntegerInterval::~IntegerInterval() {
  // @@protoc_insertion_point(destructor:commonroad.IntegerInterval)
  SharedDtor();
}

void IntegerInterval::SharedDtor() {
}

void IntegerInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegerInterval::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegerInterval& IntegerInterval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_IntegerInterval.base);
  return *internal_default_instance();
}


void IntegerInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.IntegerInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegerInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.IntegerInterval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.IntegerInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.IntegerInterval)
  return false;
#undef DO_
}

void IntegerInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.IntegerInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.IntegerInterval)
}

::google::protobuf::uint8* IntegerInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.IntegerInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.IntegerInterval)
  return target;
}

size_t IntegerInterval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.IntegerInterval)
  size_t total_size = 0;

  if (has_start()) {
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  return total_size;
}
size_t IntegerInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.IntegerInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.IntegerInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegerInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.IntegerInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.IntegerInterval)
    MergeFrom(*source);
  }
}

void IntegerInterval::MergeFrom(const IntegerInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.IntegerInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntegerInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.IntegerInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerInterval::CopyFrom(const IntegerInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.IntegerInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerInterval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IntegerInterval::Swap(IntegerInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerInterval::InternalSwap(IntegerInterval* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegerInterval::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FloatInterval::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatInterval::kStartFieldNumber;
const int FloatInterval::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatInterval::FloatInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_FloatInterval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.FloatInterval)
}
FloatInterval::FloatInterval(const FloatInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:commonroad.FloatInterval)
}

void FloatInterval::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

FloatInterval::~FloatInterval() {
  // @@protoc_insertion_point(destructor:commonroad.FloatInterval)
  SharedDtor();
}

void FloatInterval::SharedDtor() {
}

void FloatInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FloatInterval::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatInterval& FloatInterval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_FloatInterval.base);
  return *internal_default_instance();
}


void FloatInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.FloatInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.FloatInterval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.FloatInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.FloatInterval)
  return false;
#undef DO_
}

void FloatInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.FloatInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // required double end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.FloatInterval)
}

::google::protobuf::uint8* FloatInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.FloatInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start(), target);
  }

  // required double end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.FloatInterval)
  return target;
}

size_t FloatInterval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:commonroad.FloatInterval)
  size_t total_size = 0;

  if (has_start()) {
    // required double start = 1;
    total_size += 1 + 8;
  }

  if (has_end()) {
    // required double end = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FloatInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.FloatInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double start = 1;
    total_size += 1 + 8;

    // required double end = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.FloatInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.FloatInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.FloatInterval)
    MergeFrom(*source);
  }
}

void FloatInterval::MergeFrom(const FloatInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.FloatInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FloatInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.FloatInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatInterval::CopyFrom(const FloatInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.FloatInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatInterval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FloatInterval::Swap(FloatInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatInterval::InternalSwap(FloatInterval* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FloatInterval::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntegerExactOrInterval::InitAsDefaultInstance() {
  ::commonroad::_IntegerExactOrInterval_default_instance_.exact_ = 0;
  ::commonroad::_IntegerExactOrInterval_default_instance_.interval_ = const_cast< ::commonroad::IntegerInterval*>(
      ::commonroad::IntegerInterval::internal_default_instance());
}
void IntegerExactOrInterval::set_allocated_interval(::commonroad::IntegerInterval* interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_exact_or_interval();
  if (interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    exact_or_interval_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.IntegerExactOrInterval.interval)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerExactOrInterval::kExactFieldNumber;
const int IntegerExactOrInterval::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerExactOrInterval::IntegerExactOrInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_IntegerExactOrInterval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.IntegerExactOrInterval)
}
IntegerExactOrInterval::IntegerExactOrInterval(const IntegerExactOrInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_exact_or_interval();
  switch (from.exact_or_interval_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kInterval: {
      mutable_interval()->::commonroad::IntegerInterval::MergeFrom(from.interval());
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.IntegerExactOrInterval)
}

void IntegerExactOrInterval::SharedCtor() {
  clear_has_exact_or_interval();
}

IntegerExactOrInterval::~IntegerExactOrInterval() {
  // @@protoc_insertion_point(destructor:commonroad.IntegerExactOrInterval)
  SharedDtor();
}

void IntegerExactOrInterval::SharedDtor() {
  if (has_exact_or_interval()) {
    clear_exact_or_interval();
  }
}

void IntegerExactOrInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegerExactOrInterval::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegerExactOrInterval& IntegerExactOrInterval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_IntegerExactOrInterval.base);
  return *internal_default_instance();
}


void IntegerExactOrInterval::clear_exact_or_interval() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.IntegerExactOrInterval)
  switch (exact_or_interval_case()) {
    case kExact: {
      // No need to clear
      break;
    }
    case kInterval: {
      delete exact_or_interval_.interval_;
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXACT_OR_INTERVAL_NOT_SET;
}


void IntegerExactOrInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.IntegerExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_exact_or_interval();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegerExactOrInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.IntegerExactOrInterval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_exact_or_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exact_or_interval_.exact_)));
          set_has_exact();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.IntegerInterval interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.IntegerExactOrInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.IntegerExactOrInterval)
  return false;
#undef DO_
}

void IntegerExactOrInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.IntegerExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (exact_or_interval_case()) {
    case kExact:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exact(), output);
      break;
    case kInterval:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_interval(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.IntegerExactOrInterval)
}

::google::protobuf::uint8* IntegerExactOrInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.IntegerExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (exact_or_interval_case()) {
    case kExact:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exact(), target);
      break;
    case kInterval:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_interval(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.IntegerExactOrInterval)
  return target;
}

size_t IntegerExactOrInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.IntegerExactOrInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (exact_or_interval_case()) {
    // optional int32 exact = 1;
    case kExact: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exact());
      break;
    }
    // optional .commonroad.IntegerInterval interval = 2;
    case kInterval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exact_or_interval_.interval_);
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerExactOrInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.IntegerExactOrInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerExactOrInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegerExactOrInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.IntegerExactOrInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.IntegerExactOrInterval)
    MergeFrom(*source);
  }
}

void IntegerExactOrInterval::MergeFrom(const IntegerExactOrInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.IntegerExactOrInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.exact_or_interval_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kInterval: {
      mutable_interval()->::commonroad::IntegerInterval::MergeFrom(from.interval());
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
}

void IntegerExactOrInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.IntegerExactOrInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerExactOrInterval::CopyFrom(const IntegerExactOrInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.IntegerExactOrInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerExactOrInterval::IsInitialized() const {
  switch (exact_or_interval_case()) {
    case kExact: {
      break;
    }
    case kInterval: {
      if (has_interval()) {
        if (!this->interval().IsInitialized()) return false;
      }
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  return true;
}

void IntegerExactOrInterval::Swap(IntegerExactOrInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerExactOrInterval::InternalSwap(IntegerExactOrInterval* other) {
  using std::swap;
  swap(exact_or_interval_, other->exact_or_interval_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegerExactOrInterval::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FloatExactOrInterval::InitAsDefaultInstance() {
  ::commonroad::_FloatExactOrInterval_default_instance_.exact_ = 0;
  ::commonroad::_FloatExactOrInterval_default_instance_.interval_ = const_cast< ::commonroad::FloatInterval*>(
      ::commonroad::FloatInterval::internal_default_instance());
}
void FloatExactOrInterval::set_allocated_interval(::commonroad::FloatInterval* interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_exact_or_interval();
  if (interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    exact_or_interval_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:commonroad.FloatExactOrInterval.interval)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatExactOrInterval::kExactFieldNumber;
const int FloatExactOrInterval::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatExactOrInterval::FloatExactOrInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_FloatExactOrInterval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.FloatExactOrInterval)
}
FloatExactOrInterval::FloatExactOrInterval(const FloatExactOrInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_exact_or_interval();
  switch (from.exact_or_interval_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kInterval: {
      mutable_interval()->::commonroad::FloatInterval::MergeFrom(from.interval());
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commonroad.FloatExactOrInterval)
}

void FloatExactOrInterval::SharedCtor() {
  clear_has_exact_or_interval();
}

FloatExactOrInterval::~FloatExactOrInterval() {
  // @@protoc_insertion_point(destructor:commonroad.FloatExactOrInterval)
  SharedDtor();
}

void FloatExactOrInterval::SharedDtor() {
  if (has_exact_or_interval()) {
    clear_exact_or_interval();
  }
}

void FloatExactOrInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FloatExactOrInterval::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatExactOrInterval& FloatExactOrInterval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_FloatExactOrInterval.base);
  return *internal_default_instance();
}


void FloatExactOrInterval::clear_exact_or_interval() {
// @@protoc_insertion_point(one_of_clear_start:commonroad.FloatExactOrInterval)
  switch (exact_or_interval_case()) {
    case kExact: {
      // No need to clear
      break;
    }
    case kInterval: {
      delete exact_or_interval_.interval_;
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXACT_OR_INTERVAL_NOT_SET;
}


void FloatExactOrInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.FloatExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_exact_or_interval();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatExactOrInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.FloatExactOrInterval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double exact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          clear_exact_or_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exact_or_interval_.exact_)));
          set_has_exact();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .commonroad.FloatInterval interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.FloatExactOrInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.FloatExactOrInterval)
  return false;
#undef DO_
}

void FloatExactOrInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.FloatExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (exact_or_interval_case()) {
    case kExact:
      ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->exact(), output);
      break;
    case kInterval:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_interval(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.FloatExactOrInterval)
}

::google::protobuf::uint8* FloatExactOrInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.FloatExactOrInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (exact_or_interval_case()) {
    case kExact:
      target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->exact(), target);
      break;
    case kInterval:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_interval(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.FloatExactOrInterval)
  return target;
}

size_t FloatExactOrInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.FloatExactOrInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (exact_or_interval_case()) {
    // optional double exact = 1;
    case kExact: {
      total_size += 1 + 8;
      break;
    }
    // optional .commonroad.FloatInterval interval = 2;
    case kInterval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exact_or_interval_.interval_);
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatExactOrInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.FloatExactOrInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatExactOrInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatExactOrInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.FloatExactOrInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.FloatExactOrInterval)
    MergeFrom(*source);
  }
}

void FloatExactOrInterval::MergeFrom(const FloatExactOrInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.FloatExactOrInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.exact_or_interval_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kInterval: {
      mutable_interval()->::commonroad::FloatInterval::MergeFrom(from.interval());
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
}

void FloatExactOrInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.FloatExactOrInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatExactOrInterval::CopyFrom(const FloatExactOrInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.FloatExactOrInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatExactOrInterval::IsInitialized() const {
  switch (exact_or_interval_case()) {
    case kExact: {
      break;
    }
    case kInterval: {
      if (has_interval()) {
        if (!this->interval().IsInitialized()) return false;
      }
      break;
    }
    case EXACT_OR_INTERVAL_NOT_SET: {
      break;
    }
  }
  return true;
}

void FloatExactOrInterval::Swap(FloatExactOrInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatExactOrInterval::InternalSwap(FloatExactOrInterval* other) {
  using std::swap;
  swap(exact_or_interval_, other->exact_or_interval_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FloatExactOrInterval::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntegerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerList::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerList::IntegerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_IntegerList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.IntegerList)
}
IntegerList::IntegerList(const IntegerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.IntegerList)
}

void IntegerList::SharedCtor() {
}

IntegerList::~IntegerList() {
  // @@protoc_insertion_point(destructor:commonroad.IntegerList)
  SharedDtor();
}

void IntegerList::SharedDtor() {
}

void IntegerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegerList::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegerList& IntegerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_IntegerList.base);
  return *internal_default_instance();
}


void IntegerList::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.IntegerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.IntegerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.IntegerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.IntegerList)
  return false;
#undef DO_
}

void IntegerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.IntegerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.IntegerList)
}

::google::protobuf::uint8* IntegerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.IntegerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->values_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.IntegerList)
  return target;
}

size_t IntegerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.IntegerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 values = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.IntegerList)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.IntegerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.IntegerList)
    MergeFrom(*source);
  }
}

void IntegerList::MergeFrom(const IntegerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.IntegerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void IntegerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.IntegerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerList::CopyFrom(const IntegerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.IntegerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerList::IsInitialized() const {
  return true;
}

void IntegerList::Swap(IntegerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerList::InternalSwap(IntegerList* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegerList::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FloatList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatList::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatList::FloatList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_FloatList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.FloatList)
}
FloatList::FloatList(const FloatList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonroad.FloatList)
}

void FloatList::SharedCtor() {
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:commonroad.FloatList)
  SharedDtor();
}

void FloatList::SharedDtor() {
}

void FloatList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FloatList::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatList& FloatList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_FloatList.base);
  return *internal_default_instance();
}


void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.FloatList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.FloatList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.FloatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.FloatList)
  return false;
#undef DO_
}

void FloatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.FloatList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.FloatList)
}

::google::protobuf::uint8* FloatList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.FloatList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->values_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.FloatList)
  return target;
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.FloatList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 values = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.FloatList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.FloatList)
    MergeFrom(*source);
  }
}

void FloatList::MergeFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void FloatList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {
  return true;
}

void FloatList::Swap(FloatList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatList::InternalSwap(FloatList* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FloatList::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeStamp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeStamp::kYearFieldNumber;
const int TimeStamp::kMonthFieldNumber;
const int TimeStamp::kDayFieldNumber;
const int TimeStamp::kHourFieldNumber;
const int TimeStamp::kMinuteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeStamp::TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_util_2eproto::scc_info_TimeStamp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:commonroad.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&minute_) -
    reinterpret_cast<char*>(&year_)) + sizeof(minute_));
  // @@protoc_insertion_point(copy_constructor:commonroad.TimeStamp)
}

void TimeStamp::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minute_) -
      reinterpret_cast<char*>(&year_)) + sizeof(minute_));
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:commonroad.TimeStamp)
  SharedDtor();
}

void TimeStamp::SharedDtor() {
}

void TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeStamp::descriptor() {
  ::protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeStamp& TimeStamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_util_2eproto::scc_info_TimeStamp.base);
  return *internal_default_instance();
}


void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:commonroad.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minute_) -
        reinterpret_cast<char*>(&year_)) + sizeof(minute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:commonroad.TimeStamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:commonroad.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:commonroad.TimeStamp)
  return false;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:commonroad.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // optional uint32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // optional uint32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // optional uint32 minute = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:commonroad.TimeStamp)
}

::google::protobuf::uint8* TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:commonroad.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // optional uint32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // optional uint32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  // optional uint32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hour(), target);
  }

  // optional uint32 minute = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonroad.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonroad.TimeStamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 5;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonroad.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonroad.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonroad.TimeStamp)
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonroad.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_ = from.minute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonroad.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonroad.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeStamp::GetMetadata() const {
  protobuf_util_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_util_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonroad
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Point* Arena::CreateMaybeMessage< ::commonroad::Point >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Rectangle* Arena::CreateMaybeMessage< ::commonroad::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Rectangle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Circle* Arena::CreateMaybeMessage< ::commonroad::Circle >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Circle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Polygon* Arena::CreateMaybeMessage< ::commonroad::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Polygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::ShapeGroup* Arena::CreateMaybeMessage< ::commonroad::ShapeGroup >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::ShapeGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::Shape* Arena::CreateMaybeMessage< ::commonroad::Shape >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::Shape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::IntegerInterval* Arena::CreateMaybeMessage< ::commonroad::IntegerInterval >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::IntegerInterval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::FloatInterval* Arena::CreateMaybeMessage< ::commonroad::FloatInterval >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::FloatInterval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::IntegerExactOrInterval* Arena::CreateMaybeMessage< ::commonroad::IntegerExactOrInterval >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::IntegerExactOrInterval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::FloatExactOrInterval* Arena::CreateMaybeMessage< ::commonroad::FloatExactOrInterval >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::FloatExactOrInterval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::IntegerList* Arena::CreateMaybeMessage< ::commonroad::IntegerList >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::IntegerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::FloatList* Arena::CreateMaybeMessage< ::commonroad::FloatList >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::FloatList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::commonroad::TimeStamp* Arena::CreateMaybeMessage< ::commonroad::TimeStamp >(Arena* arena) {
  return Arena::CreateInternal< ::commonroad::TimeStamp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
